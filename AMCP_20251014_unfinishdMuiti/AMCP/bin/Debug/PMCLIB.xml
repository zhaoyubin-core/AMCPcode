<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PMCLIB</name>
    </assembly>
    <members>
        <member name="T:PMCLIB.AM4AXBOTStatusEx">
            <summary>
            extended xbot status struct
            </summary>
        </member>
        <member name="P:PMCLIB.AM4AMotionInfo.CmdType">
            <summary>
            Type of the command
            </summary>
        </member>
        <member name="P:PMCLIB.AM4AMotionInfo.CmdLabel">
            <summary>
            Command label
            </summary>
        </member>
        <member name="P:PMCLIB.AM4AMotionInfo.Command">
            <summary>
            Command information
            </summary>
        </member>
        <member name="T:PMCLIB.AM4AAllBoundaryInfo">
            <summary>
            boundary info. struct
            </summary>
        </member>
        <member name="T:PMCLIB.AM4AStationXbotIds">
            <summary>
            Class for storing bay xbot mapping inside a station
            </summary>
            <remarks>
            NOTE: this is a class because the data sent from the PMC may not group information by station
            </remarks>
        </member>
        <member name="M:PMCLIB.AM4AStationXbotIds.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PMCLIB.AM4AStationXbotIds.#ctor(PMCLIB.AM4AStationXbotIds)">
            <summary>
            Copy constructor
            </summary>
            <param name="aM4AStationXbotIds"></param>
        </member>
        <member name="M:PMCLIB.AM4A.Move2PositionLinear(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,PMCLIB.AM4ALinearParams,System.Double@,System.Double)">
            <summary>
            Linear P2P motion command for single xbot, which can be buffered
            </summary>
            <param name="cmdLabel">command label</param>
            <param name="wsID">region ID(reserved)</param>
            <param name="carID">xbot ID</param>
            <param name="mode">0---absolute motion;1--relative motion</param>
            <param name="type">0---direct;1--X first, then Y;2---Y first, then X</param>
            <param name="minfo">motion info.(target position/speed/acc. etc)</param>
            <param name="cornerRadius">Corner radius for X then Y or Y then X motion</param>
            <param name="tTime">travelling time</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.Move2PositionLinearCalib(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,PMCLIB.AM4ALinearParams,System.Double@)">
            <summary>
            Linear P2P motion command with user calibration for single xbot, which can be buffered
            </summary>
            <param name="cmdLabel">command label</param>
            <param name="wsID">region ID(reserved)</param>
            <param name="carID">xbot ID</param>
            <param name="mode">0---absolute motion;1--relative motion</param>
            <param name="type">0---direct;1--X first, then Y;2---Y first, then X</param>
            <param name="minfo">motion info.(target position/speed/acc. etc)</param>
            <param name="tTime">travelling time</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.Move2PositionLinearComp(System.Int32,System.Int32,System.Int32,PMCLIB.AM4ALinearParams,System.Double@)">
            <summary>
            Linear P2P motion command with sensing and force compensation for single xbot, which can be buffered
            </summary>
            <param name="cmdLabel">command label</param>
            <param name="wsID">region ID(reserved)</param>
            <param name="carID">xbot ID</param>
            <param name="minfo">motion info.(target position/speed/acc. etc)</param>
            <param name="tTime">travelling time</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.RotaryMotionP2P(System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Int32,System.Double@,System.Int32)">
            <summary>
            P2P rotary motion: rotate xbot from current angle to target angle
            </summary>
            <param name="cmdLabel">command label</param>
            <param name="wsID">reserved</param>
            <param name="xbotID">xbot ID(>0)</param>
            <param name="wMode">wrap mode: 0--no 2PI wrap around;1--rotate in +Rz wrap to [0,360);-1--rotate in -Rz wrap to [0,360)</param>
            <param name="mvel">max. angular speed[rpm]</param>
            <param name="macc">max. angular acceleration[rad/s^2]</param>
            <param name="targRz">target angle[deg]</param>
            <param name="bMode">boundary checking mode(0--high performance;1--compact)</param>
            <param name="tTime"></param>
            <param name="mMode">motion mode(0--absolue motion;1--relative motion)</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.RotaryMotionSpin(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Single,System.Single,System.Int32,System.Double@)">
            <summary>
            Spin rotary motion: rotate xbot with specific speed for certain time
            </summary>
            <param name="cmdLabel">command label</param>
            <param name="wsID">reserved</param>
            <param name="xbotID">xbot ID(>0)</param>
            <param name="vel">spin speed[rpm]: positive--spin in +Rz;negative--spin in -Rz</param>
            <param name="macc">max. angular acceleration[rad/s^2]</param>
            <param name="duration">spin duration[s]</param>
            <param name="targRz">target angle[deg] after spin stopped</param>
            <param name="bMode">boundary checking mode(0--high performance;1--compact)</param>
            <param name="tTime"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.LandingControl(System.Int32,System.Int32,System.Int32)">
            <summary>
            landing/levitation control
            </summary>
            <param name="wsID">region ID(not implemented)</param>
            <param name="carID">xbot ID</param>        
            <param name="signal">0: land xbot; 1: levitate xbot</param> 
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.LandingControl(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            landing/levitation control
            </summary>
            <param name="wsID">region ID(not implemented)</param>
            <param name="carID">xbot ID</param>        
            <param name="signal">0: land xbot; 1: levitate xbot</param> 
            <param name="sLevel">speed level: 0: full speed; 1: 1/2; 2: 1/4; 3: 1/8; 4: 1/16</param> 
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.LandingControl(System.Int32,System.Int32,System.Int32,System.Int32,System.Single)">
            <summary>
            landing/levitation with floating force control
            </summary>
            <param name="wsID">region ID(not implemented)</param>
            <param name="carID">xbot ID</param>        
            <param name="signal">0: land xbot; 1: levitate xbot</param> 
            <param name="sLevel">speed level: 0: full speed; 1: 1/2; 2: 1/4; 3: 1/8; 4: 1/16</param> 
            <param name="fFactor">z force after landing[N] </param> 
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.MobilityControl(System.Int32,System.Int32,System.Int32)">
            <summary>
            xbot mobility control: disable/land/levitate control
            </summary>
            <param name="wsID">region ID(not implemented)</param>
            <param name="xbotID">xbot ID</param>        
            <param name="level">0: disable xbot;1: land xbot; 1: levitate xbot</param> 
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.MobilityControl(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            xbot mobility control: disable/land/levitate control
            </summary>
            <param name="wsID">region ID(not implemented)</param>
            <param name="xbotID">xbot ID</param>        
            <param name="level">0: disable xbot;1: land xbot; 1: levitate xbot</param> 
            <param name="sLevel">speed level: 0: full speed; 1: 1/2; 2: 1/4; 3: 1/8; 4: 1/16</param> 
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.ForceModeMotion(System.Int32,System.Int32,System.Int32,PMCLIB.AM4AForceModeParams,System.Int32,System.Int32)">
            <summary>
            Force mode control
            </summary>
            <param name="wsID">region ID(not implemented)</param>
            <param name="carID">xbot ID</param>        
            <param name="signal">0: disable force mode; 1: Z force mode; 2: X force mode; 3: Y force mode; X/Y force mode</param>        
            <param name="FMParams">force mode parameters</param>
            <param name="mode">0--absolure force mode;1---relative force mode</param>
            <param name="bOption">0--execute immediately;1---add command to buffer</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.ForceModeMotionEx(System.Int32,System.Int32,System.Int32,PMCLIB.AM4AForceModeParams,System.Int32,System.Int32)">
            <summary>
            Force mode control
            </summary>
            <param name="wsID">region ID(not implemented)</param>
            <param name="carID">xbot ID</param>        
            <param name="cWord">force mode control word: bit0--Fx;bit1--Fy;bit2--Fz;bit3--Tx;bit4--Ty;bit5--Tz(0--position mode;1--force mode)</param>        
            <param name="FMParams">force mode parameters</param>
            <param name="mode">0--absolure force mode;1---relative force mode</param>
            <param name="bOption">0--execute immediately;1---add command to buffer</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.InjectNoise2Xbot(System.Int32,System.Int32,System.Int32,PMCLIB.AM4ANoiseParams[])">
            <summary>
            Inject noise to axes of xbot
            </summary>
            <param name="carID">xbot ID</param>        
            <param name="signal">0: turn off noise; turn on noise</param>        
            <param name="axisNum">number of axis</param>        
            <param name="NoiseParams">noise parameters</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.InjectDelayNoise2Xbot(System.Int32,System.Int32,System.Int32,PMCLIB.AM4ANoiseParams[])">
            <summary>
            Inject noise to axes of xbot
            </summary>
            <param name="carID">xbot ID</param>        
            <param name="signal">0: turn off noise; turn on noise</param>        
            <param name="axisNum">number of axis</param>        
            <param name="NoiseParams">noise parameters</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.CamControl(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,PMCLIB.AM4ACamParamsEx[])">
            <summary>
            Cam motion control
            </summary>
            <param name="cmdLabel">command label</param>
            <param name="wsID">region ID(not implemented)</param>
            <param name="slaveXID">slave xbot ID</param>        
            <param name="signal">0: deactivate cam; 1: activate cam</param>        
            <param name="axisNum">number of axis to activate cam</param>
            <param name="ainfo">cam configuration</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.CamControlBuffer(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,PMCLIB.AM4ACamParamsBuf[])">
            <summary>
            add cam motion to buffer with specific entry/exit mode
            mode=0: enter cam at the beginning of table and exit cam at the end of table (BIEO);
            mode=1: enter cam at the end of table and exit cam at the beginning of table(EIBO);
            mode=2: enter cam at the beginning of table and exit cam at the beginning of table(BIBO);
            mode=3: enter cam at the end of table and exit cam at the end of table(EIEO);
            </summary>
            <param name="cmdLabel">command label</param>
            <param name="wsID">region ID(not implemented)</param>
            <param name="slaveXID">slave xbot ID</param>        
            <param name="mode">cam entry/exit mode</param>        
            <param name="axisNum">number of axis to activate cam</param>
            <param name="ainfo">cam configuration</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.JoggingShortAxis(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Jogging Short Axis 
            </summary>
            <param name="wsID"></param>
            <param name="xbotID">XBot ID</param>
            <param name="axisID">Direction; Z = 2, Rx = 3, Ry = 4, Rz = 5</param>
            <param name="ctrl">0: Stop Jogging; 1: Start Jogging</param>
            <param name="speed">Jogging Speed; +Speed: Positive Direction; -Speed: Negative Direction</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.SynMotion(System.Int32,System.Int32,System.Int32[],PMCLIB.AM4ALinearParams[],System.Double@)">
            <summary>
            sync. linear P2P motion for up to 4 xbots
            </summary>
            <param name="wsID">reserved</param>
            <param name="xNum">number of xbots</param>
            <param name="xbotID">xbot ID list</param>
            <param name="minfo">motion parameters for each xbot</param>
            <param name="tTime">the longest travel time</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.Syn6DMotion(System.Int32,System.Int32,System.Int32[],PMCLIB.AM4A6DOFParams[],System.Double@)">
            <summary>
            sync. 6D motion for up to 4 xbots
            </summary>
            <param name="wsID">reserved</param>
            <param name="xNum">number of xbots</param>
            <param name="xbotID">xbot ID list</param>
            <param name="minfo">motion parameters for each xbot</param>
            <param name="tTime">the longest travel time</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.ASynMotion(System.Int32,System.Int32,System.Int32,System.Int32[],PMCLIB.PMCXYPos[],System.Boolean)">
            <summary>
            intelligent routing with default speed and acceleration
            </summary>
            <param name="wsID">zone ID (reserved)</param>
            <param name="xNum">number of xbots for routing</param>
            <param name="mode">0: all xbots get involved, 1: only defined xbots in routing</param>        
            <param name="xbotID">xbot ID list</param>
            <param name="minfo">X/Y target position for each xbot</param>
            <param name="isOverhangAllowed">Indicates whether to use max allowable system overhang for autodriving </param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.AutoDrive(System.Int32,System.Int32,System.Int32,System.Single,System.Single,System.Int32[],PMCLIB.PMCXYPos[],System.Boolean)">
            <summary>
            intelligent routing with user defined speed and acceleration
            </summary>
            <param name="zoneID">zone ID (reserved)</param>
            <param name="xNum">number of xbots for routing</param>
            <param name="mode">Auto Drive Option</param>
            <param name="mvel">maximum speed for routing</param>        
            <param name="macc">maximum acceleration for routing</param>        
            <param name="xbotID">xbot ID list</param>
            <param name="minfo">X/Y target position for each xbot</param>
            <param name="isOverhangAllowed">Indicates whether to use max allowable system overhang for autodriving </param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.XGroupCtrl(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32[],System.Int32@,System.Int32@,System.Int32[]@)">
            <summary>
            
            </summary>
            <param name="op">0:create group;1:delete group;2:connect group;3:disconnect group;4:block group;5:release group;6:query;7:add xbots;8:remove xbots</param>
            <param name="regID">region ID (reserved)</param>
            <param name="Bmode">group connecting mode:0--6DOF decoupled;1--6DOF coupled</param>
            <param name="gID">group ID(0: all groups; >0: single group)</param>
            <param name="xNum">number of xbots</param>
            <param name="xbotID">xbot IDs</param>
            <param name="gSta">groupl status</param>
            <param name="QXNum">total number of xbots in group</param>
            <param name="QXID">xbot IDs in group</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.RunMacroMotion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Run Macro at specific xbot
            </summary>
            <param name="cmdLB">command label</param>
            <param name="regID">not implemented</param>
            <param name="maID">macro ID(>=128)</param>
            <param name="xbotID">xbot ID(>0)</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.RunGCodeMotion(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Run GCode at specific xbot
            </summary>
            <param name="cmdLB">command label</param>
            <param name="regID">not implemented</param>
            <param name="gcodeID">gcode ID(>0)</param>
            <param name="xbotID">xbot ID(>0)</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.ReadExtDigitalInput(System.UInt32@)">
            <summary>
            read external digital input signal (only one channel available)
            </summary>
            <param name="signal"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.WriteExtDigitalOutput(System.UInt32)">
            <summary>
            write external digital output (one only channel available)
            </summary>
            <param name="signal"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.AssignStereotype2Xbot(System.Int32,System.Int32,System.Boolean)">
            <summary>
            assign stereotype to single or all xbots
            </summary>
            <param name="xbotID">0--all xbots;>0--single xbot</param>
            <param name="stID">[0-255]</param>
            <param name="isBuffer">true--add command to motion buffer;false--assign stereotype immediately</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetMoverPayload(System.Int32,System.Single@,System.Int32)">
            <summary>
            Get Xbot weighing result
            </summary>
            <param name="xbotID">xbot ID (>0)</param>
            <param name="payload">weighing result</param>
            <param name="mode">0:PMC weighing;1: Flyway weighing</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetMoverPayloadEx(System.Int32,System.Single,System.Single@)">
            <summary>
            Get Xbot weighing result with specified time duration
            </summary>
            <param name="xbotID">xbot ID (>0)</param>
            <param name="wTime">xbot weighing time duration (0-6s)</param>
            <param name="payload">weighing result</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.TareMover(System.Int32)">
            <summary>
            Tare Xbot weighing
            </summary>
            <param name="xbotID">xbot ID (>0)</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.MotionInterruptCtrl(System.Int32,System.Int32)">
            <summary>
            Pause or resume current motion (all commands are still in the buffer after pause the xbot)
            </summary>
            <param name="xbotID">xbot ID(>=0)</param>
            <param name="signal">0: resume paused motion;1: pause current motion</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.OverrideXbot(System.Int32,System.Single,System.Single)">
            <summary>
            override velocity and acceleration of active motions(linear/arc/6DOF)
            </summary>
            <param name="xbotID">xbot ID(>0)</param>
            <param name="vFactor">velocity factor[0.0-2.0]</param>
            <param name="aFactor">acceleration factor(0.0-2.0]</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.InjectTrackErr2Xbot(System.Int32,System.Int32,System.Int32)">
            <summary>
            inject tracking error to xbot
            </summary>
            <param name="xbotID">xbot ID(>0),xbot ID</param>
            <param name="mode">0: fatal error; 1: self-recover tracking error</param>
            <param name="nCycles">number of cycles</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.RecoverAccidentXbot(System.Int32,System.Int32,System.Boolean)">
            <summary>
            recover one or all accident xbots
            </summary>
            <param name="xbotID">xbot ID(>=0),0 means all accident xbots</param>
            <param name="mode">0: resume directly;1: pause xbot after recover;2: clear buffer</param>
            <param name="isResumeSA">false: levitate xbot to default position;true: resume short axis to previous position</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetAllAccidentXbots(System.Int32@,System.Int32[]@)">
            <summary>
            get all accident xbots
            </summary>
            <param name="nXbot">number of accident xbots</param>
            <param name="xbotID">accident xbot ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.SetXbotJerkLimit(System.Int32,System.Int32,System.Single)">
            <summary>
            set jerk limit
            </summary>
            <param name="xbotID">xbot ID(>=0),0 means all accident xbots</param>
            <param name="axisID">axis ID(>0),1 and 6 supported</param>
            <param name="jerk">user specified jerk limit</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.VirtualXbotCtrl(System.Int32,System.Int32,System.Single[])">
            <summary>
            Virtual xbot setting
            </summary>
            <param name="ctrl">control level,0--set virtual xbot position</param>
            <param name="xbotID">virtual xbot ID(>=100)</param>
            <param name="pos">6DOF positions</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.QueueBufferControl(System.Int32,System.Int32,PMCLIB.AM4AQueueBufferCtrl)">
            <summary>
            create or delete queue(s)
            </summary>
            <param name="ctrl">0: create queue;1: delete queue(s)</param>
            <param name="queueID">queue ID</param>
            <param name="qParams">queue parameters</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.SendXbotToQueue(System.Int32,System.Int32)">
            <summary>
            send an xbot to a queue
            </summary>
            <param name="xbotID">xbot ID (>0)</param>
            <param name="queueID">queue ID</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.ReleaseQueueExit(System.Int32)">
            <summary>
            release the exit of a queue for next xbot 
            </summary>
            <param name="queueID">queue ID</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetQueueStatus(System.Int32,PMCLIB.AM4AQueueStatus@)">
            <summary>
            get queue status: 
            1, status of entry and exit; 2, xbot ID in exit; 3, coordinates of entry
            </summary>
            <param name="queueID">queue ID</param>
            <param name="qSta">queue status</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.CreateAutoLoadingZone(System.Int32,PMCLIB.AM4AAutoLoadingZoneParams)">
            <summary>
            create auto-loading zone
            </summary>
            <param name="zoneID">zone ID</param>
            <param name="zParams">zone parameters</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.DeleteAutoLoadingZone(System.Int32)">
            <summary>
            delete auto-loading zone(s)
            </summary>
            <param name="zoneID">zone ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.ActivateAutoLoadingZone(System.Int32,System.Int32,System.Int32)">
            <summary>
            activate auto-loading zone
            </summary>
            <param name="zoneID">zone ID (> 0)</param>
            <param name="xbotID">user defined ID (> 0)</param>
            <param name="xOrit">user defined xbot orientation (>= 0)</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.DeactivateAutoLoadingZone(System.Int32)">
            <summary>
            deactivate auto-loading zone
            </summary>
            <param name="zoneID">zone ID (> 0)</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.SendXbotToAutoLZone(System.Int32,System.Int32)">
            <summary>
            send an xbot to a auto-loading zone
            </summary>
            <param name="xbotID">xbot ID (>0)</param>
            <param name="zoneID">zone ID</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.ReleaseAutoLZoneExit(System.Int32,System.Int32,System.Int32)">
            <summary>
            release the exit of a auto-loading zone for next xbot 
            </summary>
            <param name="zoneID">zone ID</param>  
            <param name="xbotID">user defined xbot ID</param>  
            <param name="xOrit">xbot orientation</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetAutoLZoneStatus(System.Int32,PMCLIB.AM4AAutoLoadingZoneStatus@)">
            <summary>
            get auto-loading zone status: 
            1, status of entry or exit; 2, xbot ID in exit; 3, coordinates of entry
            </summary>
            <param name="zoneID">zone ID</param>
            <param name="zSta">zone status</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.RoadTrafficControl(System.Int32,System.Int32,PMCLIB.AM4ARoadTrafficDef)">
            <summary>
            create or delete road traffic module
            </summary>
            <param name="ctrl">0: create road;1: delete road(s)</param>
            <param name="roadID">road ID</param>
            <param name="rParams">road parameters</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.ConfigRoadSpace(System.Int32,System.Int32,System.Int32)">
            <summary>
            configure road entrance or exit
            </summary>
            <param name="roadID">road ID (>0)</param>
            <param name="spaceIndex">space index</param>  
            <param name="spaceType">0: unused; 1: entrance; 2: exit; 3: Buffer</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.SendXbotToRoad(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Single,System.Single)">
            <summary>
            send an xbot to road
            </summary>
            <param name="xbotID">xbot ID (>0)</param>
            <param name="entranceRID">entrance road ID</param>  
            <param name="entranceSID">entrance road space index</param>  
            <param name="exitRID">exit road ID</param>  
            <param name="exitSID">exit road space index</param>  
            <param name="mvel">maximum speed limit</param>  
            <param name="macc">maximum acceleration limit</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.ReleaseRoadExit(System.Int32,System.Int32)">
            <summary>
            release the exit of road for next xbot 
            </summary>
            <param name="roadID">road ID</param>  
            <param name="exitSID">exit space index</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetRoadSpaceStatus(System.Int32,System.Int32,PMCLIB.AM4ARoadSpaceStatus@)">
            <summary>
            get road space status
            </summary>
            <param name="roadID">road ID</param>
            <param name="spaceIndex">space index</param>  
            <param name="rSpaceSta">road space status</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetRoadTrafficStatus(System.Int32,PMCLIB.AM4ARoadTrafficStatus@)">
            <summary>
            get road traffic detail information
            </summary>
            <param name="roadID">road ID</param>
            <param name="rStatus">road traffic status</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.CreateStarWheel(System.Int32,PMCLIB.AM4AStarWheelParams)">
            <summary>
            create Star wheel instance
            </summary>
            <param name="wheelID">wheel ID</param>
            <param name="swParams">star wheel parameters</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.DeleteStarWheel(System.Int32)">
            <summary>
            delete star wheel
            </summary>
            <param name="wheelID">wheel ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.SendXbotToStarWheel(System.Int32,System.Int32)">
            <summary>
            send an xbot to a star wheel
            </summary>
            <param name="xbotID">xbot ID (>0)</param>
            <param name="wheelID">wheel ID</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.ReleaseStarWheelExit(System.Int32)">
            <summary>
            release the exit of a star wheel for next xbot 
            </summary>
            <param name="wheelID">zone ID</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetStarWheelStatus(System.Int32,PMCLIB.AM4AStarWheelStatus@)">
            <summary>
            get Star wheel status: 
            1, status of star wheel; 2, xbot ID in exit; 3, locations of start/end;4, status of entrance and exit
            </summary>
            <param name="wheelID">wheel ID</param>
            <param name="swSta">star wheel status</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetStarWheelInfo(PMCLIB.AM4AStarWheelInfo@,PMCLIB.AM4AAllMoverPos@)">
            <summary>
            get Star wheel info: 
            1, status of star wheel; 2, vial info(# of vial and location); 3, wheel center;4,current wheel position;5,wheel radius
            </summary>        
            <param name="swInfo">star wheel info</param>  
            <param name="xInfo">all xbot info</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.StartFunction(System.Int32,System.Int32@)">
            <summary>
            setup a new function
            </summary>
            <param name="nXbot">number of xbot inside function</param>
            <param name="funcID">function ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.EndFunction">
            <summary>
            Finish the setup of new function
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.DeleteFunction(System.Int32)">
            <summary>
            delete a old function
            </summary>
            <param name="funcID">function ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.RunFunction(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Run a specific function
            </summary>
            <param name="mode">xbot sync mode: 0--synced;1--not synced</param>
            <param name="funcID">function ID (>0)</param>
            <param name="xbotID">actual xbot ID to run inside function</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.QueryFunction(System.Int32,PMCLIB.AM4AFunctionInfo@)">
            <summary>
            Query function info. if it's defined
            </summary>
            <param name="funcID">function ID(>0)</param>  
            <param name="funcInfo">function info</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.UndoFunctionCmds(System.Int32)">
            <summary>
            undo the latest commands being added to function
            </summary>
            <param name="nCmds">number of commands need to be undo</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.SaveDesignToPMC(System.Int32,System.Byte[],System.String@)">
            <summary>
            Send design file to PMC
            </summary>
            <param name="designID">design ID [1, MAX_DESIGNS]</param>
            <param name="fileData">design file data in json format</param>
            <param name="errMsg">error message, if any</param>
            <returns>PMCRTN</returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetDesignFromPMC(System.Int32,System.Byte[]@)">
            <summary>
            Get design file from PMC
            </summary>
            <param name="designID">design ID, [1, MAX_DESIGNS]</param>
            <param name="fileData">design file data in json format</param>
            <returns>PMCRTN</returns>
        </member>
        <member name="M:PMCLIB.AM4A.SelectDesign(System.Int32)">
            <summary>
            Select a design
            </summary>
            <param name="designID">design ID, [1, MAX_DESIGNS]</param>
            <returns>PMCRTN</returns>
        </member>
        <member name="M:PMCLIB.AM4A.SendXbotToStation(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Nullable{PMCLIB.AM4AMotionOverrideStruct})">
            <summary>
            Send a xbot to a station
            </summary>
            <param name="cmdLabel">command label</param>
            <param name="xbotID">xbot ID, [0, MAX_MOVER]</param>
            <param name="stationID">station ID, [1, MAX_STATIONS]</param>
            <param name="bayID">bay ID, [0, MAX_BAYS_PER_STATION]</param>
            <param name="waitForFreeBay">whether to wait for a bay to be free before moving</param>
            <param name="motionOverride">override speed and acceleration</param>
            <returns>PMCRTN</returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetXbotIdInBay(System.Int32,System.Int32,PMCLIB.XBOTSTATE[],System.Int32@)">
            <summary>
            Get the xbot ID currently in a bay that has any of the specified xbot states
            </summary>
            <param name="stationID">station ID, [1, MAX_STATIONS]</param>
            <param name="bayID">bay ID, [1, MAX_BAYS_PER_STATION]</param>
            <param name="filterStates">filter for xbot states the xbot can be in. If empty array, then any state is okay</param>
            <param name="xbotID">xbotID else -1 if no xbot in bay</param>
            <returns>PMCRTN</returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetAnyXbotIdInBay(System.Int32,System.Int32,System.Int32@)">
            <summary>
            Get the xbot ID currently in a bay (any xbot state)
            </summary>
            <param name="stationID">station ID, [1, MAX_STATIONS]</param>
            <param name="bayID">bay ID, [1, MAX_BAYS_PER_STATION]</param>
            <param name="xbotID">xbotID else -1 if no xbot in bay</param>
            <returns>PMCRTN</returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetXbotIdsInStation(System.Int32,PMCLIB.XBOTSTATE[],PMCLIB.AM4AStationXbotIds@)">
            <summary>
            Get the xbot IDs currently in the station that have any of the specified xbot states
            </summary>
            <param name="stationID">station ID, [1, MAX_STATIONS]</param>
            <param name="filterStates">filter for xbot states the xbots can be in. If empty array, then any state is okay</param>
            <param name="stationXbotIds">xbot IDs in the station</param>
            <returns>PMCRTN</returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetAnyXbotIdsInStation(System.Int32,PMCLIB.AM4AStationXbotIds@)">
            <summary>
            Get all xbot IDs currently in the station (any xbot state)
            </summary>
            <param name="stationID">station ID, [1, MAX_STATIONS]</param>
            <param name="stationXbotIds">struct containing bay-xbot mapping info</param>
            <returns>PMCRTN</returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetAllStationXbotIds(PMCLIB.XBOTSTATE[],PMCLIB.AM4AStationXbotIds[]@)">
            <summary>
            Get the xbot IDs currently in all stations that have any of the specified xbot states
            </summary>
            <param name="filterStates">filter for xbot states the xbots can be in. If null, then any state is okay</param>
            <param name="allStationXbotIds">xbot IDs in all stations</param>
            <returns>PMCRTN</returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetAllStationXbotIds(PMCLIB.AM4AStationXbotIds[]@)">
            <summary>
            Get xbot IDs currently in all stations (any xbot state)
            </summary>
            <param name="allStationXbotIds"></param>
            <returns>PMCRTN</returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetXbotTargetStation(System.Int32,System.Int32@,System.Int32@)">
            <summary>
            Get the xbot ID currently in a station
            </summary>
            <param name="xbotID">xbotID [1, MAX_MOVERS]</param>
            <param name="stationID">station ID the xbot is travelling to</param>
            <param name="bayID">bay ID the xbot is travelling to</param>
            <returns>PMCRTN</returns>
        </member>
        <member name="M:PMCLIB.AM4A.LoadPartsToXbots(System.Int32,System.Int32[],System.Int32[])">
            <summary>
            load parts to xbots
            </summary>
            <param name="nParts">number of parts</param>
            <param name="xbotID">xbot ID (>0)</param>
            <param name="partType">part type</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.UnLoadPartsFromXbots(System.Int32,System.Int32[])">
            <summary>
            unload all parts from xbots
            </summary>
            <param name="nXbots">number of xbots</param>
            <param name="xbotID">xbot ID (>0)</param> 
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.GetAllBoundaries(PMCLIB.AM4AAllBoundaryInfo@)">
            <summary>
            Get all inner and fenced boundaries
            </summary>
            <param name="allBdrInfo"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.AM4A.DownLoadMemory4Debug(System.Byte[]@,System.Int32)">
            <summary>
            download PMC memory for debug
            </summary>
            <param name="memData">memory data(2.5MB)</param>
            <param name="coreID">BM core ID</param>
            <returns></returns>
        </member>
        <member name="T:PMCLIB.BytesLoggger">
            <summary>
            stores bytes in a log file that you specify
            </summary>
        </member>
        <member name="M:PMCLIB.BytesLoggger.#ctor(System.String,System.Double,System.Int32)">
            <summary>
            make an instance of the command logger, you should create a new instance for each file you write to
            </summary>
            <param name="logFilePath">path of the log file</param>
            <param name="saveIntervalms">save interval (ms)</param>
            <param name="fileFormat">0 = .dat, 1 = .csv</param>
        </member>
        <member name="M:PMCLIB.BytesLoggger.SaveToLog(System.Byte[])">
            <summary>
            save byte array to log file declared in constructor
            </summary>
            <param name="inputBuffer">byte buffer</param>
        </member>
        <member name="M:PMCLIB.CompressionHelper.CompressWithOffset(System.Byte[],System.Int32)">
            <summary>
            compressed a byte array, except for the initial bytes before the offset
            </summary>
            <param name="data">data stream byte array, minimum size is 9 bytes</param>
            <param name="offset">first byte to compress from, 0 based</param>        
            <returns></returns>
        </member>
        <member name="M:PMCLIB.CompressionHelper.DecompressWithOffset(System.Byte[],System.Int32)">
            <summary>
            decompress byte array, starting from a certain offset
            </summary>
            <param name="data">input array</param>
            <param name="offset">first byte to uncompress from</param>        
            <returns>the final uncompressed byte array</returns>
        </member>
        <member name="T:PMCLIB.ISingleNetInfo">
            <summary>
            information about a single TCP connection
            </summary>
        </member>
        <member name="M:PMCLIB.NetworkDataList.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="P:PMCLIB.NetworkDataList.PrevTCPCmdStatus">
            <summary>
            If a command was previously executed, this parameter will store the return of that command
            </summary>
            <returns></returns>
        </member>
        <member name="T:PMCLIB.MotionRtn">
            <summary>
            return struct for motion commands, includes PMC return + travel time
            </summary>
        </member>
        <member name="F:PMCLIB.MotionRtn.PmcRtn">
            <summary>
            PMC return for the motion command
            </summary>
        </member>
        <member name="F:PMCLIB.MotionRtn.TravelTimeSecs">
            <summary>
            travelling time for the command, in seconds
            </summary>
        </member>
        <member name="T:PMCLIB.BorderStatusRtn">
            <summary>
            Return information for PMC border status
            </summary>
        </member>
        <member name="F:PMCLIB.BorderStatusRtn.PmcRtn">
            <summary>
            PMC command return for the border status query command
            </summary>
        </member>
        <member name="F:PMCLIB.BorderStatusRtn.BorderStatus">
            <summary>
            The status of the border
            </summary>
        </member>
        <member name="T:PMCLIB.GCodeIDRtn">
            <summary>
            Return information for G-code IDs
            </summary>
        </member>
        <member name="F:PMCLIB.GCodeIDRtn.PmcRtn">
            <summary>
            PMC command return for the command
            </summary>
        </member>
        <member name="F:PMCLIB.GCodeIDRtn.GCodeCount">
            <summary>
            The number of g-code IDs currently stored
            </summary>
        </member>
        <member name="F:PMCLIB.GCodeIDRtn.GCodeIDs">
            <summary>
            An array of all g-code IDs currently stored in the PMC
            </summary>
        </member>
        <member name="T:PMCLIB.GCodeRtn">
            <summary>
            Get G-Code command return
            </summary>
        </member>
        <member name="F:PMCLIB.GCodeRtn.PmcRtn">
            <summary>
            PMC command return for the command
            </summary>
        </member>
        <member name="F:PMCLIB.GCodeRtn.GCodeText">
            <summary>
            The g-code text obtained by the command
            </summary>
        </member>
        <member name="T:PMCLIB.BorderNewXbotRtn">
            <summary>
            Return information for getting new xbots at PMC borders
            </summary>
        </member>
        <member name="F:PMCLIB.BorderNewXbotRtn.PmcRtn">
            <summary>
            PMC command return for the border status query command
            </summary>
        </member>
        <member name="F:PMCLIB.BorderNewXbotRtn.XBotCount">
            <summary>
            Number of new received XBOTs
            </summary>
        </member>
        <member name="F:PMCLIB.BorderNewXbotRtn.XBotIDs">
            <summary>
            The current IDs of the received XBOTs
            </summary>
        </member>
        <member name="F:PMCLIB.BorderNewXbotRtn.BorderIDs">
            <summary>
            The border ID where each xbot was received from
            </summary>
        </member>
        <member name="T:PMCLIB.WaitUntilTriggerParams">
            <summary>
            public structure for WaitUntil command
            </summary>
        </member>
        <member name="F:PMCLIB.WaitUntilTriggerParams.delaySecs">
            <summary>
            When trigger source is set to time delay, this is the delay duration, in seconds
            </summary>
        </member>
        <member name="F:PMCLIB.WaitUntilTriggerParams.externalOrFBInputChannelID">
            <summary>
            When trigger source is set to Digital Input (external or fieldbus), this is digital input channel ID.
            </summary>
        </member>
        <member name="F:PMCLIB.WaitUntilTriggerParams.edgeType">
            <summary>
            When trigger source is set to Digital Input (external or fieldbus), the edge type or value that will trigger the event
            </summary>
        </member>
        <member name="F:PMCLIB.WaitUntilTriggerParams.triggerXbotID">
            <summary>
            When trigger source is set to Command Label or Displacement, this is the ID of the XBOT to act as the trigger source 
            </summary>
        </member>
        <member name="F:PMCLIB.WaitUntilTriggerParams.triggerCmdLabel">
            <summary>
            When trigger source is set to Command Label, this is Command Label to trigger the event
            </summary>
        </member>
        <member name="F:PMCLIB.WaitUntilTriggerParams.triggerCmdType">
            <summary>
            For specifying hte details of a command label trigger.
            0 = motion command label; 1 = Run Macro command label
            </summary>
        </member>
        <member name="F:PMCLIB.WaitUntilTriggerParams.CmdLabelTriggerType">
            <summary>
            When trigger source is set to Command Label,
            CMD_Start means the event will trigger when the command first starts executing, 
            CMD_FINISH = after command has finished executing, 
            CMD_EXECUTING = at any point during command execution
            </summary>
        </member>
        <member name="F:PMCLIB.WaitUntilTriggerParams.displacementTriggerType">
            <summary>
            When the trigger source is set to Displacement, the statement AX+BY vs Threshold is evaluated.
            GREATER_THAN means event triggers when AX+BY > Threshold, if is X_ONLY mode, then X > Threshold, in Y_ONLY mode, Y > Threshold. 
            LESS_THAN triggers when AX+BY less than Threshold. 
            POSITIVE_CROSS triggers when AX+BY is first less than Threshold, then later greater than Threshold. 
            NEGATIVE_CROSS triggers when AX+BY is first greater than Threshold, then later less than Threshold. 
            </summary>
        </member>
        <member name="F:PMCLIB.WaitUntilTriggerParams.displacementTriggerMode">
            <summary>
            When the trigger source is set to Displacement, this will determine if only the X position is evaluated,
            or if only the Y position is evaluated, or if the position is evaluated as AX+BY
            </summary>
        </member>
        <member name="F:PMCLIB.WaitUntilTriggerParams.lineParamAx">
            <summary>
            When the trigger source is set to Displacement, and the trigger mode is set to AX+BY, 
            this will specify the A parameter
            </summary>
        </member>
        <member name="F:PMCLIB.WaitUntilTriggerParams.lineParamBy">
            <summary>
            When the trigger source is set to Displacement, and the trigger mode is set to AX+BY, 
            this will specify the B parameter
            </summary>
        </member>
        <member name="F:PMCLIB.WaitUntilTriggerParams.displacementThresholdMeters">
            <summary>
            When the trigger source is set to Displacement, this will set the threshold to be compared to
            </summary>
        </member>
        <member name="T:PMCLIB.AllXBotInfo">
            <summary>
            A struct containing a list of basic information for all XBots in the system
            </summary>
        </member>
        <member name="F:PMCLIB.AllXBotInfo.PmcRtn">
            <summary>
            PMC Return code for the command
            </summary>
        </member>
        <member name="F:PMCLIB.AllXBotInfo.AllXbotInfoList">
            <summary>
            List of all XBot info
            </summary>
        </member>
        <member name="T:PMCLIB.XBotInfo">
            <summary>
            Basic XBot information
            </summary>
        </member>
        <member name="F:PMCLIB.XBotInfo.XPos">
            <summary>
            X Position in m
            </summary>
        </member>
        <member name="F:PMCLIB.XBotInfo.YPos">
            <summary>
            Y Position in m
            </summary>
        </member>
        <member name="F:PMCLIB.XBotInfo.ZPos">
            <summary>
            Z Position in m
            </summary>
        </member>
        <member name="F:PMCLIB.XBotInfo.RxPos">
            <summary>
            Rx pose in rad
            </summary>
        </member>
        <member name="F:PMCLIB.XBotInfo.RyPos">
            <summary>
            Ry pose in rad
            </summary>
        </member>
        <member name="F:PMCLIB.XBotInfo.RzPos">
            <summary>
            Rz pose in rad
            </summary>
        </member>
        <member name="F:PMCLIB.XBotInfo.XBotState">
            <summary>
            Xbot state
            </summary>
        </member>
        <member name="F:PMCLIB.XBotInfo.XbotID">
            <summary>
            Xbot ID
            </summary>
        </member>
        <member name="F:PMCLIB.XBotInfo.XbotType">
            <summary>
            The type of the XBot
            </summary>
        </member>
        <member name="T:PMCLIB.XBotStatus">
            <summary>
            full XBot status, including it's position and state
            </summary>
        </member>
        <member name="F:PMCLIB.XBotStatus.PmcRtn">
            <summary>
            return value for checking the xbot status, the validity of the remaining data in this struct in verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.XBotStatus.XBOTState">
            <summary>
            XBot state
            </summary>
        </member>
        <member name="F:PMCLIB.XBotStatus.cmdLabel">
            <summary>
            command label of the command the xbot is currently executing
            </summary>
        </member>
        <member name="F:PMCLIB.XBotStatus.inForceMode">
            <summary>
            true = xbot is operating in force mode; false = xbot is operating in position mode
            </summary>
        </member>
        <member name="F:PMCLIB.XBotStatus.FeedbackPositionSI">
            <summary>
            position feedback array for 6 DOF, x, y, z in meters, rx, ry, rz in rads
            </summary>
        </member>
        <member name="F:PMCLIB.XBotStatus.isConnectedToGroup">
            <summary>
            true = xbot is connected to a group; false = xbot is not connected to a group
            </summary>
        </member>
        <member name="F:PMCLIB.XBotStatus.connectedGroupID">
            <summary>
            if xbot is connected to a group, then it will provide the group ID. otherwise, will provide?
            </summary>
        </member>
        <member name="F:PMCLIB.XBotStatus.isMotionBufferBlocked">
            <summary>
            true = xbot's motion buffer is blocked; false = xbot's motion buffer is not blocked
            </summary>
        </member>
        <member name="F:PMCLIB.XBotStatus.bufferedMotionCount">
            <summary>
            number of motion commands stored in the xbot's buffer
            </summary>
        </member>
        <member name="F:PMCLIB.XBotStatus.stereotypeID">
            <summary>
            Assigned stereotype ID, 0-255. -1 means stereotype is not supported
            </summary>
        </member>
        <member name="F:PMCLIB.XBotStatus.moverType">
            <summary>
            The Type of the XBot
            </summary>
        </member>
        <member name="T:PMCLIB.FlywayPhysicalStatus">
            <summary>
            full return for the Get Flyway Status Command. Includes various temperature measurements and power consumption
            </summary>
        </member>
        <member name="F:PMCLIB.FlywayPhysicalStatus.PmcRtn">
            <summary>
            return value for checking the xbot status, the validity of the remaining data in this struct in verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.FlywayPhysicalStatus.powerConsumptionW">
            <summary>
            power consumption, in watts
            </summary>
        </member>
        <member name="F:PMCLIB.FlywayPhysicalStatus.cpuTempC">
            <summary>
            CPU temperature, in celsius
            </summary>
        </member>
        <member name="F:PMCLIB.FlywayPhysicalStatus.amplifierTempC">
            <summary>
            amplifier temperature, in celcius
            </summary>
        </member>
        <member name="F:PMCLIB.FlywayPhysicalStatus.motorTempC">
            <summary>
            motor temperature, in celsius
            </summary>
        </member>
        <member name="T:PMCLIB.XBotIDs">
            <summary>
            Xbot count and ID information
            </summary>
        </member>
        <member name="F:PMCLIB.XBotIDs.PmcRtn">
            <summary>
            return value for checking the XBOT IDs, the validity of the remaining data in this struct in verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.XBotIDs.XBotCount">
            <summary>
            Number of detected XBots
            </summary>
        </member>
        <member name="F:PMCLIB.XBotIDs.XBotIDsArray">
            <summary>
            Current IDs of the detected XBOTs
            </summary>
        </member>
        <member name="T:PMCLIB.XBotPayloadSettings">
            <summary>
            a single XBOT's payload options
            </summary>
        </member>
        <member name="F:PMCLIB.XBotPayloadSettings.payloadkg">
            <summary>
            The weight of the payload, in kg
            </summary>
        </member>
        <member name="F:PMCLIB.XBotPayloadSettings.payloadCGHeightm">
            <summary>
            the payload's center of gravity, in meters
            </summary>
        </member>
        <member name="F:PMCLIB.XBotPayloadSettings.payloadDimensionXm">
            <summary>
            Payload X Dimensions(meters)
            </summary>
        </member>
        <member name="F:PMCLIB.XBotPayloadSettings.payloadDimensionYm">
            <summary>
            Payload Y Dimensions(meters)
            </summary>
        </member>
        <member name="T:PMCLIB.MoverProperty">
            <summary>
            defines a single mover property
            </summary>
        </member>
        <member name="F:PMCLIB.MoverProperty.moverID">
            <summary>
            ID of the mover to set the property for
            </summary>
        </member>
        <member name="F:PMCLIB.MoverProperty.propertyID">
            <summary>
            the index of the mover property
            </summary>
        </member>
        <member name="F:PMCLIB.MoverProperty.propertyValue">
            <summary>
            the value of the mover property
            </summary>
        </member>
        <member name="T:PMCLIB.MoverPropertyReturn">
            <summary>
            full return for the Get Mover Property Command. Contains 8 mover properties
            </summary>
        </member>
        <member name="M:PMCLIB.MoverPropertyReturn.#ctor">
            <summary>
            Group Status Info Class
            </summary>
        </member>
        <member name="F:PMCLIB.MoverPropertyReturn.PmcRtn">
            <summary>
            return value for checking the xbot status, the validity of the remaining data in this struct in verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.MoverPropertyReturn.ValidPropertiesCount">
            <summary>
            A count of how many properties are valid. (sometimes less than 8 properties are available, depending on the specified starting property ID).
            </summary>
        </member>
        <member name="F:PMCLIB.MoverPropertyReturn.MoverProperties">
            <summary>
            group information, all 0 if group incorrect or operating on all groups
            </summary>
        </member>
        <member name="T:PMCLIB.XBotForceSetting">
            <summary>
            Settings for the Open-Loop Force Mode
            </summary>
        </member>
        <member name="F:PMCLIB.XBotForceSetting.Fx">
            <summary>
            Force in X (N)
            </summary>
        </member>
        <member name="F:PMCLIB.XBotForceSetting.Fy">
            <summary>
            Force in Y (N)
            </summary>
        </member>
        <member name="F:PMCLIB.XBotForceSetting.Fz">
            <summary>
            Force in Z (N)
            </summary>
        </member>
        <member name="F:PMCLIB.XBotForceSetting.Tx">
            <summary>
            Torque in Rx (Nm)
            </summary>
        </member>
        <member name="F:PMCLIB.XBotForceSetting.Ty">
            <summary>
            Torque in Ry (Nm)
            </summary>
        </member>
        <member name="F:PMCLIB.XBotForceSetting.Tz">
            <summary>
            Torque in Rz (Nm)
            </summary>
        </member>
        <member name="T:PMCLIB.ForceModeAxes">
            <summary>
            Defines which axes to enable force mode for
            </summary>
        </member>
        <member name="F:PMCLIB.ForceModeAxes.X">
            <summary>
            X-Axis
            </summary>
        </member>
        <member name="F:PMCLIB.ForceModeAxes.Y">
            <summary>
            Y-Axis
            </summary>
        </member>
        <member name="F:PMCLIB.ForceModeAxes.Z">
            <summary>
            Z-Axis
            </summary>
        </member>
        <member name="F:PMCLIB.ForceModeAxes.Rx">
            <summary>
            Rx-Axis
            </summary>
        </member>
        <member name="F:PMCLIB.ForceModeAxes.Ry">
            <summary>
            Ry-Axis
            </summary>
        </member>
        <member name="F:PMCLIB.ForceModeAxes.Rz">
            <summary>
            Rz-Axis
            </summary>
        </member>
        <member name="T:PMCLIB.ZoneStatusReturn">
            <summary>
            full return for the Get Zone Status Command. Contains Zone information
            </summary>
        </member>
        <member name="F:PMCLIB.ZoneStatusReturn.PmcRtn">
            <summary>
            return value for checking the zone status, the validity of the remaining data in this struct in verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.ZoneStatusReturn.ZoneState">
            <summary>
            A count of how many properties are valid. (sometimes less than 8 properties are available, depending on the specified starting property ID).
            </summary>
        </member>
        <member name="F:PMCLIB.ZoneStatusReturn.XBotCount">
            <summary>
            Number of XBots inside the zone
            </summary>
        </member>
        <member name="F:PMCLIB.ZoneStatusReturn.XBotIDs">
            <summary>
            list of XBot IDs of XBots inside the zone
            </summary>
        </member>
        <member name="F:PMCLIB.ZoneStatusReturn.XBotCountOnBorder">
            <summary>
            Number of XBots on the zone's border
            </summary>
        </member>
        <member name="F:PMCLIB.ZoneStatusReturn.XBotIDsOnBorder">
            <summary>
            list of XBot IDs of XBots on the zone's border
            </summary>
        </member>
        <member name="F:PMCLIB.ZoneStatusReturn.SpeedOverrideRatio">
            <summary>
            Speed Override Ratio of the Zone
            </summary>
        </member>
        <member name="F:PMCLIB.ZoneStatusReturn.AccelerationOverrideRatio">
            <summary>
            Acceleration Override Ratio of the Zone
            </summary>
        </member>
        <member name="T:PMCLIB.MoverStereotypeData">
            <summary>
            mover stereotype definition
            </summary>
        </member>
        <member name="F:PMCLIB.MoverStereotypeData.performanceLevel">
            <summary>
            The control performance level[0-3], 0 = most conservative level, 3 = most aggresive level
            </summary>
        </member>
        <member name="F:PMCLIB.MoverStereotypeData.payloadkg">
            <summary>
            The weight of the payload, in kg
            </summary>
        </member>
        <member name="F:PMCLIB.MoverStereotypeData.payloadPositiveXmFromXBOTCenter">
            <summary>
            Payload size from center of the XBOT, in +X direction (meters) 
            </summary>
        </member>
        <member name="F:PMCLIB.MoverStereotypeData.payloadNegativeXmFromXBOTCenter">
            <summary>
            Payload size from center of the XBOT, in -X direction (meters)
            </summary>
        </member>
        <member name="F:PMCLIB.MoverStereotypeData.payloadPositiveYmFromXBOTCenter">
            <summary>
            Payload size from center of the XBOT, in +Y direction (meters) 
            </summary>
        </member>
        <member name="F:PMCLIB.MoverStereotypeData.payloadNegativeYmFromXBOTCenter">
            <summary>
            Payload size from center of the XBOT, in -Y direction (meters) 
            </summary>
        </member>
        <member name="F:PMCLIB.MoverStereotypeData.payloadCGXm">
            <summary>
            the payload's center of gravity in the x direction, in meters
            </summary>
        </member>
        <member name="F:PMCLIB.MoverStereotypeData.payloadCGYm">
            <summary>
            the payload's center of gravity in the y direction, in meters
            </summary>
        </member>
        <member name="F:PMCLIB.MoverStereotypeData.payloadCGZm">
            <summary>
            the payload's center of gravity in the z direction, in meters
            </summary>
        </member>
        <member name="F:PMCLIB.MoverStereotypeData.emergencyDeceleration">
            <summary>
            the emergency deceleration in meters per second square
            </summary>
        </member>
        <member name="T:PMCLIB.StereotypeBoundaryData">
            <summary>
            mover stereotype definition
            </summary>
        </member>
        <member name="F:PMCLIB.StereotypeBoundaryData.payloadBoundaryMaximumX">
            <summary>
            Maximum payload size from center of XBOT in X direction (metres)
            </summary>
        </member>
        <member name="F:PMCLIB.StereotypeBoundaryData.payloadBoundaryMinimumX">
            <summary>
            Minimum payload size from center of XBOT in X direction (metres)
            </summary>
        </member>
        <member name="F:PMCLIB.StereotypeBoundaryData.payloadBoundaryMaximumY">
            <summary>
            Maximum payload size from center of XBOT in Y direction (metres) 
            </summary>
        </member>
        <member name="F:PMCLIB.StereotypeBoundaryData.payloadBoundaryMinimumY">
            <summary>
            Minimum payload size from center of XBOT in Y direction (metres)
            </summary>
        </member>
        <member name="F:PMCLIB.StereotypeBoundaryData.payloadBoundaryMaximumZ">
            <summary>
            Maximum payload size from center of XBOT in Z direction (metres)
            </summary>
        </member>
        <member name="F:PMCLIB.StereotypeBoundaryData.payloadBoundaryMinimumZ">
            <summary>
            Minimum payload size from center of XBOT in Z direction (metres) 
            </summary>
        </member>
        <member name="T:PMCLIB.MoverStereotypeDefinitionReturn">
            <summary>
            full return for the Get Mover Stereotype Command. 
            </summary>
        </member>
        <member name="F:PMCLIB.MoverStereotypeDefinitionReturn.PmcRtn">
            <summary>
            return value for checking the xbot status, the validity of the remaining data in this struct in verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.MoverStereotypeDefinitionReturn.StereotypeData">
            <summary>
            mover stereotype data
            </summary>
        </member>
        <member name="T:PMCLIB.MoverStereotypeBoundaryReturn">
            <summary>
            full return for the Read Mover Stereotype Boundary Command. 
            </summary>
        </member>
        <member name="F:PMCLIB.MoverStereotypeBoundaryReturn.PmcRtn">
            <summary>
            return value for checking the xbot status, the validity of the remaining data in this struct in verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.MoverStereotypeBoundaryReturn.NumberOfBoundaries">
            <summary>
            number of boundaries defined for stereotype
            </summary>
        </member>
        <member name="F:PMCLIB.MoverStereotypeBoundaryReturn.StereotypeData">
            <summary>
            mover stereotype data
            </summary>
        </member>
        <member name="T:PMCLIB.ReadAssignedStereotypeReturn">
            <summary>
            full return for the read assigned mover stereotype Command. 
            </summary>
        </member>
        <member name="F:PMCLIB.ReadAssignedStereotypeReturn.PmcRtn">
            <summary>
            return value for checking the xbot status, the validity of the remaining data in this struct in verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.ReadAssignedStereotypeReturn.AssignedStereotypeID">
            <summary>
            ID of the assigned mover stereotype
            </summary>
        </member>
        <member name="T:PMCLIB.PayloadWeighingReturn">
            <summary>
            full return for the Get Mover Property Command. Contains 8 mover properties
            </summary>
        </member>
        <member name="F:PMCLIB.PayloadWeighingReturn.PmcRtn">
            <summary>
            return value for checking the xbot status, the validity of the remaining data in this struct in verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.PayloadWeighingReturn.WeightKG">
            <summary>
            Measured weight, in kg
            </summary>
        </member>
        <member name="T:PMCLIB.PayloadRtn">
            <summary>
            return struct for get payload settings commands, includes PMC return + PayloadSettings
            </summary>
        </member>
        <member name="F:PMCLIB.PayloadRtn.PmcRtn">
            <summary>
            PMC return for the motion command
            </summary>
        </member>
        <member name="F:PMCLIB.PayloadRtn.PayloadSettings">
            <summary>
            an xbot's payload settings
            </summary>
        </member>
        <member name="T:PMCLIB.MotionBufferStatus">
            <summary>
            a single XBOT's motion buffer status
            </summary>
        </member>
        <member name="F:PMCLIB.MotionBufferStatus.isBufferBlocked">
            <summary>
            true is xbot buffer is currently blocked, false is buffer is unblocked
            </summary>
        </member>
        <member name="F:PMCLIB.MotionBufferStatus.bufferedMotionCount">
            <summary>
            number of motions commands stored in the xbot's buffer. If xbot ID = 0, the reply will be 0
            </summary>
        </member>
        <member name="F:PMCLIB.MotionBufferStatus.firstBufferedMotionCmdLabel">
            <summary>
            command label of the first command in the buffer, it is the next command that will be executed by the xbot.
            </summary>
        </member>
        <member name="F:PMCLIB.MotionBufferStatus.lastBufferedMotionCmdLabel">
            <summary>
            command label of the last command in the buffer, this is the command that is most recently added to the motion buffer.
            </summary>
        </member>
        <member name="F:PMCLIB.MotionBufferStatus.xbotID">
            <summary>
            the ID of the xbot that this return is describing
            </summary>
        </member>
        <member name="T:PMCLIB.MotionBufferReturn">
            <summary>
            full return of the motion buffer command
            </summary>
        </member>
        <member name="F:PMCLIB.MotionBufferReturn.PmcRtn">
            <summary>
            return value for checking the xbot status, the validity of the remaining data in this struct in verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.MotionBufferReturn.motionBufferStatus">
            <summary>
            the status of the xbot's motion buffer
            </summary>
        </member>
        <member name="T:PMCLIB.MotionMacroReturn">
            <summary>
            full return of the motion macro
            </summary>
        </member>
        <member name="F:PMCLIB.MotionMacroReturn.PmcRtn">
            <summary>
            return value of the motion macro command
            </summary>
        </member>
        <member name="F:PMCLIB.MotionMacroReturn.motionMacroStatus">
            <summary>
            the status of the motion macro
            </summary>
        </member>
        <member name="T:PMCLIB.MotionMacroStatus">
            <summary>
            a single XBOT's motion macro status
            </summary>
        </member>
        <member name="F:PMCLIB.MotionMacroStatus.macroID">
            <summary>
            the ID of the macro that this return is describing
            </summary>
        </member>
        <member name="F:PMCLIB.MotionMacroStatus.macroState">
            <summary>
            0 = macro is not saved (cannot be run); 2 = macro is saved (ready to run)
            </summary>
        </member>
        <member name="F:PMCLIB.MotionMacroStatus.storedCommandsCount">
            <summary>
            the number of commands stored in this macro
            </summary>
        </member>
        <member name="T:PMCLIB.GroupCtrlReturn">
            <summary>
            full return for the group control command
            </summary>
        </member>
        <member name="M:PMCLIB.GroupCtrlReturn.#ctor">
            <summary>
            Group Status Info Class
            </summary>
        </member>
        <member name="F:PMCLIB.GroupCtrlReturn.PmcRtn">
            <summary>
            return value for checking the xbot status, the validity of the remaining data in this struct in verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.GroupCtrlReturn.groupInfo">
            <summary>
            group information, all 0 if group incorrect or operating on all groups
            </summary>
        </member>
        <member name="T:PMCLIB.GroupInformation">
            <summary>
            group information
            </summary>
        </member>
        <member name="F:PMCLIB.GroupInformation.groupID">
            <summary>
            The ID of the group this return is describing
            </summary>
        </member>
        <member name="F:PMCLIB.GroupInformation.groupStatus">
            <summary>
            0 = group is disconnected, 1 = group is connected
            </summary>
        </member>
        <member name="F:PMCLIB.GroupInformation.groupMembersCount">
            <summary>
            number of xbots in this group
            </summary>
        </member>
        <member name="F:PMCLIB.GroupInformation.groupMembersIDs">
            <summary>
            the IDs of the xbots in this group
            </summary>
        </member>
        <member name="T:PMCLIB.CamAxisDataClass">
            <summary>
            information required to setup 1 axis of the slave xbot's cam trajectory. 
            </summary>
        </member>
        <member name="M:PMCLIB.CamAxisDataClass.#ctor">
            <summary>
            constructor with default values
            </summary>
        </member>
        <member name="P:PMCLIB.CamAxisDataClass.MasterXID">
            <summary>
            ID of the master XBOT
            </summary>
        </member>
        <member name="P:PMCLIB.CamAxisDataClass.MasterAxisID">
            <summary>
            Axis of the master XBOT to track
            </summary>
        </member>
        <member name="P:PMCLIB.CamAxisDataClass.SlaveAxisID">
            <summary>
            Axis of the slave XBOT used to follow the CAM
            </summary>
        </member>
        <member name="P:PMCLIB.CamAxisDataClass.CamID">
            <summary>
            ID of the Cam
            </summary>
        </member>
        <member name="T:PMCLIB.CamAxisDataClassExtended">
            <summary>
            information required to setup 1 axis of the slave xbot's cam trajectory. 
            </summary>
        </member>
        <member name="M:PMCLIB.CamAxisDataClassExtended.#ctor">
            <summary>
            constructor with default values
            </summary>
        </member>
        <member name="P:PMCLIB.CamAxisDataClassExtended.MasterXID">
            <summary>
            ID of the master XBOT
            </summary>
        </member>
        <member name="P:PMCLIB.CamAxisDataClassExtended.MasterAxisID">
            <summary>
            Axis of the master XBOT to track
            </summary>
        </member>
        <member name="P:PMCLIB.CamAxisDataClassExtended.SlaveAxisID">
            <summary>
            Axis of the slave XBOT used to follow the CAM
            </summary>
        </member>
        <member name="P:PMCLIB.CamAxisDataClassExtended.CamID">
            <summary>
            ID of the Cam
            </summary>
        </member>
        <member name="P:PMCLIB.CamAxisDataClassExtended.CamMode">
            <summary>
            operating mode of the cam, can set cam to automatically repeat
            </summary>
        </member>
        <member name="P:PMCLIB.CamAxisDataClassExtended.MasterAxisScaling">
            <summary>
            Scaling factor for master axis position interval
            </summary>
        </member>
        <member name="P:PMCLIB.CamAxisDataClassExtended.SlaveAxisScaling">
            <summary>
            Scaling factor for slave axis position values
            </summary>
        </member>
        <member name="P:PMCLIB.CamAxisDataClassExtended.MasterAxisOffsetM">
            <summary>
            The offset between the start of master axis and the specified origin point, in meters
            </summary>
        </member>
        <member name="P:PMCLIB.CamAxisDataClassExtended.MasterAxisOffsetMode">
            <summary>
            In absolute mode, the origin position of the cam master axis is the same as the system origin. In relative mode, the origin position of the cam master axis is the same as the current position of the master xbot when the cam was activated
            </summary>
        </member>
        <member name="P:PMCLIB.CamAxisDataClassExtended.SlaveAxisOffsetM">
            <summary>
            The offset between the start of slave axis and the specified origin point, in meters
            </summary>
        </member>
        <member name="P:PMCLIB.CamAxisDataClassExtended.SlaveAxisOffsetMode">
            <summary>
            In absolute mode, the origin position of the cam slave axis is the same as the system origin. In relative mode, the origin position of the cam slave axis is the same as the current position of the slave xbot when the cam was activated
            </summary>
        </member>
        <member name="P:PMCLIB.CamAxisDataClassExtended.MasterAxisRatchetDirection">
            <summary>
            ratchet direction of the cam master axis. choose whether cam is engage whether the master cam position is increasing or decreasing, only engaged when it's increasing, or only when it's decreasing
            </summary>
        </member>
        <member name="T:PMCLIB.QueueDefinition">
            <summary>
            Define the queue region
            </summary>
        </member>
        <member name="F:PMCLIB.QueueDefinition.AreaLeftXm">
            <summary>
            starting x coordinate of the queue area, in meters
            </summary>
        </member>
        <member name="F:PMCLIB.QueueDefinition.AreaBottomYm">
            <summary>
            starting y coordinate of the queue area, in meters
            </summary>
        </member>
        <member name="F:PMCLIB.QueueDefinition.AreaRightXm">
            <summary>
            ending x coordinate of the queue area, in meters
            </summary>
        </member>
        <member name="F:PMCLIB.QueueDefinition.AreaTopYm">
            <summary>
            ending y coordinate of the queue area, in meters
            </summary>
        </member>
        <member name="F:PMCLIB.QueueDefinition.EntryLocation">
            <summary>
            entry area of the queue region
            </summary>
        </member>
        <member name="F:PMCLIB.QueueDefinition.ExitLocation">
            <summary>
            exit area of the queue region
            </summary>
        </member>
        <member name="F:PMCLIB.QueueDefinition.MaxXbotXSizem">
            <summary>
            size of the largest Xbot allowed in the queue, x dimension, in meters
            </summary>
        </member>
        <member name="F:PMCLIB.QueueDefinition.MaxXbotYSizem">
            <summary>
            size of the largest xbot allowed in the queue, y dimension, in meters
            </summary>
        </member>
        <member name="F:PMCLIB.QueueDefinition.MaxSpeedInQueue">
            <summary>
            max speed used by the queue management to move the XBots
            </summary>
        </member>
        <member name="F:PMCLIB.QueueDefinition.MaxAccelInQueue">
            <summary>
            max acceleration used by the queue management to move the XBots
            </summary>
        </member>
        <member name="T:PMCLIB.AutoLoadZoneDefinition">
            <summary>
            Define the auto load region
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneDefinition.BoundaryCenterXm">
            <summary>
            center of the zone at the boundary of the flyway, x position, meters
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneDefinition.BoundaryCenterYm">
            <summary>
            center of the zone at the boundary of the flyway, y position, meters
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneDefinition.ZoneLengthm">
            <summary>
            Length of the zone, meters
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneDefinition.ZoneWidthm">
            <summary>
            Width of the zone, meters
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneDefinition.ZoneType">
            <summary>
            loading zone = adding XBot to Flyway. unloading zone = removing XBot from flyway
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneDefinition.UnloadingMode">
            <summary>
            stop before unloading, or unload without stopping
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneDefinition.MaxXbotXSizem">
            <summary>
            x size of the Xbot to load / unload, meters
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneDefinition.MaxXbotYSizem">
            <summary>
            y size of the Xbot to load / unload, meters
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneDefinition.MaxSpeed">
            <summary>
            max speed used to load or unload XBots
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneDefinition.MaxAccel">
            <summary>
            max acceleration used to load or unload XBots
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneDefinition.MaxHeightm">
            <summary>
            max detection height for manual loading, meters
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneDefinition.Direction">
            <summary>
            Direction of xbot loading/unloading
            </summary>
        </member>
        <member name="T:PMCLIB.QueueStatusReturn">
            <summary>
            the return value for the GetQueueStatus Command
            </summary>
        </member>
        <member name="F:PMCLIB.QueueStatusReturn.PmcRtn">
            <summary>
            return value for checking the queue status, the validity of the remaining data in this struct in verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.QueueStatusReturn.queueStatus">
            <summary>
            the status of the queue
            </summary>
        </member>
        <member name="T:PMCLIB.QueueStatus">
            <summary>
            Basic Queue Status information
            </summary>
        </member>
        <member name="F:PMCLIB.QueueStatus.EntryReadyToReceiveXBot">
            <summary>
            The entry area is empty and ready to receive an XBot
            </summary>
        </member>
        <member name="F:PMCLIB.QueueStatus.XBotAvailableAtExit">
            <summary>
            there is an XBot available at the exit location
            </summary>
        </member>
        <member name="F:PMCLIB.QueueStatus.XBotIDAtExit">
            <summary>
            ID of the XBot available at the exit location
            </summary>
        </member>
        <member name="F:PMCLIB.QueueStatus.QueueEntryXposm">
            <summary>
            center x position of the entry area of the queue
            </summary>
        </member>
        <member name="F:PMCLIB.QueueStatus.QueueEntryYposm">
            <summary>
            center y position of the entry area of the queue
            </summary>
        </member>
        <member name="T:PMCLIB.QueueInfoReturn">
            <summary>
            the return value for the GetQueueInfo Command
            </summary>
        </member>
        <member name="M:PMCLIB.QueueInfoReturn.#ctor">
            <summary>
            constructor and initializer
            </summary>
        </member>
        <member name="F:PMCLIB.QueueInfoReturn.PmcRtn">
            <summary>
            return value for checking the queue info, the validity of the remaining data in this struct in verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.QueueInfoReturn.queueInfo">
            <summary>
            detailed info of the queue
            </summary>
        </member>
        <member name="T:PMCLIB.QueueInfo">
            <summary>
            information about the queue
            </summary>
        </member>
        <member name="M:PMCLIB.QueueInfo.#ctor">
            <summary>
            constructor and initializer
            </summary>
        </member>
        <member name="F:PMCLIB.QueueInfo.EntryReadyToReceiveXBot">
            <summary>
            The entry area is empty and ready to receive an XBot
            </summary>
        </member>
        <member name="F:PMCLIB.QueueInfo.XBotAvailableAtExit">
            <summary>
            there is an XBot available at the exit location
            </summary>
        </member>
        <member name="F:PMCLIB.QueueInfo.XBotCount">
            <summary>
            number of XBots being managed by the Queue
            </summary>
        </member>
        <member name="F:PMCLIB.QueueInfo.QueuedXBotsIDs">
            <summary>
            Array of XBot IDs of the XBots being managed by the Queue
            </summary>
        </member>
        <member name="T:PMCLIB.NoiseDefinition">
            <summary>
            Define the noise parameters
            </summary>
        </member>
        <member name="F:PMCLIB.NoiseDefinition.AxisID">
            <summary>
            Axis ID
            </summary>
        </member>
        <member name="F:PMCLIB.NoiseDefinition.MagnitudeForce">
            <summary>
            Magnitude of noise force. N in x, y, z directions. Nm in Rx, Ry, Rz
            </summary>
        </member>
        <member name="F:PMCLIB.NoiseDefinition.FrequencyHz">
            <summary>
            Frequency of noise in Hz
            </summary>
        </member>
        <member name="F:PMCLIB.NoiseDefinition.PhaseRadians">
            <summary>
            Phase shift in radians
            </summary>
        </member>
        <member name="F:PMCLIB.NoiseDefinition.DurationSec">
            <summary>
            Duration in second
            </summary>
        </member>
        <member name="T:PMCLIB.NoiseWithDelayDefinition">
            <summary>
            Define the noise parameters with delay
            </summary>
        </member>
        <member name="F:PMCLIB.NoiseWithDelayDefinition.AxisID">
            <summary>
            Axis ID
            </summary>
        </member>
        <member name="F:PMCLIB.NoiseWithDelayDefinition.MagnitudeForce">
            <summary>
            Magnitude of noise force. N in x, y, z directions. Nm in Rx, Ry, Rz
            </summary>
        </member>
        <member name="F:PMCLIB.NoiseWithDelayDefinition.FrequencyHz">
            <summary>
            Frequency of noise in Hz
            </summary>
        </member>
        <member name="F:PMCLIB.NoiseWithDelayDefinition.PhaseRadians">
            <summary>
            Phase shift in radians
            </summary>
        </member>
        <member name="F:PMCLIB.NoiseWithDelayDefinition.DurationSec">
            <summary>
            Duration in second
            </summary>
        </member>
        <member name="F:PMCLIB.NoiseWithDelayDefinition.delaySec">
            <summary>
            Delay in seconds
            </summary>
        </member>
        <member name="T:PMCLIB.AutoLoadZoneStatusReturn">
            <summary>
            the return value for the GetQueueStatus Command
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneStatusReturn.PmcRtn">
            <summary>
            return value for checking the queue status, the validity of the remaining data in this struct in verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneStatusReturn.alZoneStatus">
            <summary>
            the status of the auto loading zone
            </summary>
        </member>
        <member name="T:PMCLIB.AutoLoadZoneStatus">
            <summary>
            auto-loading zone status information
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneStatus.ZoneState">
            <summary>
            whether the zone is undefined, unloading, or loading state
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneStatus.LoadedXBotID">
            <summary>
            ID of the XBot loaded at the loading zone
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneStatus.ReadyForNextXBot">
            <summary>
            unloading zone ready for next XBot means it is ready to receive another XBot to send to the external device
            loading zone ready for next XBot means it is ready to receive another XBot from the external device
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneStatus.XBotCount">
            <summary>
            number of XBots inside the zone
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneStatus.UnloadingEntryXposm">
            <summary>
            x position of the unloading point in an unloading zone
            </summary>
        </member>
        <member name="F:PMCLIB.AutoLoadZoneStatus.UnloadingEntryYposm">
            <summary>
            y position of the unloading point in an unloading zone
            </summary>
        </member>
        <member name="T:PMCLIB.StarWheelDefinition">
            <summary>
            Define the star wheel
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelDefinition.DiscRadius">
            <summary>
            Disc radius in meters
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelDefinition.MaxDiscSpeed">
            <summary>
            Max disc rotation speed in radians/sec (must be positive)
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelDefinition.MaxXbotAcc">
            <summary>
            Max xbot acceleration in meters/sec^2 (must be positive)
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelDefinition.SyncAngleBegin">
            <summary>
            Start of sync section in radians (if CCW must be less than end angle, if CW must be greater than end angle) 
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelDefinition.SyncAngleEnd">
            <summary>
            End of sync section in ratdians (if CCW must be greater than end angle, if CW must be less than end angle)
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelDefinition.DiscCenterX">
            <summary>
            X coordinate of disc center in meters
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelDefinition.DiscCenterY">
            <summary>
            Y coordinate of disc center in meters
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelDefinition.StartLocationX">
            <summary>
            X coordinate of starting location in meters
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelDefinition.StartLocationY">
            <summary>
            Y coordinate of starting location in meters
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelDefinition.EndLocationX">
            <summary>
            X coordinate of ending location in meters
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelDefinition.EndLocationY">
            <summary>
            Y coordinate of ending location in meters
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelDefinition.VialLocations">
            <summary>
            locations of vials on the disc in radians (must be 0-2PI);
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelDefinition.NumVials">
            <summary>
            number of vials on the disc (less than or equal to 100)
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelDefinition.Direction">
            <summary>
            Direction of disc rotation (0 = clockwise,1 = counterclockwise)
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelDefinition.MasterXID">
            <summary>
            ID of master xbot (must be virtual 100-127)
            </summary>
        </member>
        <member name="T:PMCLIB.StarWheelStatus">
            <summary>
            Status of star wheel
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelStatus.State">
            <summary>
            Star wheel state: 0 = unassigned, 1 = assigned
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelStatus.StartLocationX">
            <summary>
            Start location X coordinate in meters
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelStatus.StartLocationY">
            <summary>
            Start location Y coordinate in meters
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelStatus.EndLocationX">
            <summary>
            End location X coordinate in meters
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelStatus.EndLocationY">
            <summary>
            End location Y coordinate in meters
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelStatus.EntranceStatus">
            <summary>
            Entrance status: 0 - not ready to receive new xbot, 1 - ready to receive new xbot
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelStatus.ExitStatus">
            <summary>
            Exit status: 0 - xbot is not ready to fetch, 1 - xbot is ready to fetch
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelStatus.ExitXID">
            <summary>
            Xbot ID to fetch 
            </summary>
        </member>
        <member name="T:PMCLIB.StarWheelStatusRtn">
            <summary>
            Star wheel status return wrapper
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelStatusRtn.PmcRtn">
            <summary>
            Return code
            </summary>
        </member>
        <member name="F:PMCLIB.StarWheelStatusRtn.WheelStatus">
            <summary>
            Star wheel status
            </summary>
        </member>
        <member name="T:PMCLIB.SixDOFInfo">
            <summary>
            6DOF information struct
            </summary>
        </member>
        <member name="F:PMCLIB.SixDOFInfo.X">
            <summary>
            X axis data
            </summary>
        </member>
        <member name="F:PMCLIB.SixDOFInfo.Y">
            <summary>
            Y axis data
            </summary>
        </member>
        <member name="F:PMCLIB.SixDOFInfo.Z">
            <summary>
            Z axis data
            </summary>
        </member>
        <member name="F:PMCLIB.SixDOFInfo.Rx">
            <summary>
            X Rotation axis data
            </summary>
        </member>
        <member name="F:PMCLIB.SixDOFInfo.Ry">
            <summary>
            Y Rotation axis data
            </summary>
        </member>
        <member name="F:PMCLIB.SixDOFInfo.Rz">
            <summary>
            Z Rotation axis data
            </summary>
        </member>
        <member name="T:PMCLIB.SectorStatusReturn">
            <summary>
            full return for the Get Sector Status Command. Contains Sone information
            </summary>
        </member>
        <member name="F:PMCLIB.SectorStatusReturn.PmcRtn">
            <summary>
            return value for checking the sector status, the validity of the remaining data in this struct is verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.SectorStatusReturn.SectorState">
            <summary>
            The state of the sector
            </summary>
        </member>
        <member name="F:PMCLIB.SectorStatusReturn.XBotCount">
            <summary>
            Number of XBots inside the sector
            </summary>
        </member>
        <member name="F:PMCLIB.SectorStatusReturn.XBotIDs">
            <summary>
            list of XBot IDs of XBots inside the sector
            </summary>
        </member>
        <member name="F:PMCLIB.SectorStatusReturn.XBotCountOnBorder">
            <summary>
            Number of XBots on the sector's border
            </summary>
        </member>
        <member name="F:PMCLIB.SectorStatusReturn.XBotIDsOnBorder">
            <summary>
            list of XBot IDs of XBots on the sector's border
            </summary>
        </member>
        <member name="T:PMCLIB.ReadExternalSignalRtn">
            <summary>
            Read Externl Signal Command's Return
            </summary>
        </member>
        <member name="F:PMCLIB.ReadExternalSignalRtn.PmcRtn">
            <summary>
            return value the Read External Signal command, the validity of the remaining data in this struct is verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.ReadExternalSignalRtn.Signal">
            <summary>
            Signal
            </summary>
        </member>
        <member name="T:PMCLIB.GetPMCTimeRtn">
            <summary>
            Read Get PMC Time Command's Return
            </summary>
        </member>
        <member name="F:PMCLIB.GetPMCTimeRtn.PmcRtn">
            <summary>
            return value the Read External Signal command, the validity of the remaining data in this struct is verified by this field
            </summary>
        </member>
        <member name="F:PMCLIB.GetPMCTimeRtn.PmcTime">
            <summary>
            PMC Time
            </summary>
        </member>
        <member name="T:PMCLIB.BayXbotId">
            <summary>
            A struct containing the xbot ID currently in a bay
            </summary>
        </member>
        <member name="F:PMCLIB.BayXbotId.PmcRtn">
            <summary>
            PMC Return code for the command
            </summary>
        </member>
        <member name="F:PMCLIB.BayXbotId.BayId">
            <summary>
            Bay ID
            </summary>
        </member>
        <member name="F:PMCLIB.BayXbotId.XbotId">
            <summary>
            Xbot ID currently in the bay
            </summary>
        </member>
        <member name="T:PMCLIB.TargetStation">
            <summary>
            A struct target station info
            </summary>
        </member>
        <member name="F:PMCLIB.TargetStation.PmcRtn">
            <summary>
            PMC Return code for the command
            </summary>
        </member>
        <member name="F:PMCLIB.TargetStation.StationId">
            <summary>
            Target station
            </summary>
        </member>
        <member name="F:PMCLIB.TargetStation.BayId">
            <summary>
            Target bay
            </summary>
        </member>
        <member name="T:PMCLIB.StationXbotIds">
            <summary>
            A struct containing xbot IDs currently in a station
            </summary>
        </member>
        <member name="F:PMCLIB.StationXbotIds.PmcRtn">
            <summary>
            PMC Return code for the command
            </summary>
        </member>
        <member name="F:PMCLIB.StationXbotIds.StationId">
            <summary>
            Station ID
            </summary>
        </member>
        <member name="F:PMCLIB.StationXbotIds.BayXbotIds">
            <summary>
            Array specifying which xbot is inside which bay
            </summary>
        </member>
        <member name="P:PMCLIB.StationXbotIds.XbotIds">
            <summary>
            Unique xbot IDs > 0 currently in the station
            </summary>
        </member>
        <member name="M:PMCLIB.StationXbotIds.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PMCLIB.StationXbotIds.#ctor(PMCLIB.StationXbotIds)">
            <summary>
            Copy constructor
            </summary>
            <param name="stationXbotIds">StationXbotIds object to copy</param>
        </member>
        <member name="T:PMCLIB.AllStationXbotIds">
            <summary>
            A struct containing xbot IDs currently in all stations
            </summary>
        </member>
        <member name="F:PMCLIB.AllStationXbotIds.PmcRtn">
            <summary>
            PMC Return code for the command
            </summary>
        </member>
        <member name="F:PMCLIB.AllStationXbotIds.StationXbotIds">
            <summary>
            XbotIDs inside all stations
            </summary>
        </member>
        <member name="M:PMCLIB.AllStationXbotIds.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:PMCLIB.AllStationXbotIds.#ctor(PMCLIB.AllStationXbotIds)">
            <summary>
            Copy constructor
            </summary>
            <param name="allStationXbotIds">AllStationXbotIds object to copy</param>
        </member>
        <member name="T:PMCLIB.TrajectoryAxesDefinition">
            <summary>
            Represents the axes defined for the SetTrajectory command.
            </summary>
        </member>
        <member name="F:PMCLIB.TrajectoryAxesDefinition.XAxis">
            <summary>
            Indicates whether the X-axis is defined for the trajectory.
            </summary>
        </member>
        <member name="F:PMCLIB.TrajectoryAxesDefinition.YAxis">
            <summary>
            Indicates whether the Y-axis is defined for the trajectory.
            </summary>
        </member>
        <member name="F:PMCLIB.TrajectoryAxesDefinition.ZAxis">
            <summary>
            Indicates whether the Z-axis is defined for the trajectory.
            </summary>
        </member>
        <member name="F:PMCLIB.TrajectoryAxesDefinition.RxAxis">
            <summary>
            Indicates whether the X rotation axis is defined for the trajectory.
            </summary>
        </member>
        <member name="F:PMCLIB.TrajectoryAxesDefinition.RyAxis">
            <summary>
            Indicates whether the Y rotation axis is defined for the trajectory.
            </summary>
        </member>
        <member name="F:PMCLIB.TrajectoryAxesDefinition.RzAxis">
            <summary>
            Indicates whether the Z rotation axis is defined for the trajectory.
            </summary>
        </member>
        <member name="F:PMCLIB.TrajectoryAxesDefinition.DigitalInput">
            <summary>
            Indicates whether the digital input is defined for the trajectory.
            </summary>
        </member>
        <member name="M:PMCLIB.DiagnosticsHelper.ConvertCmdIDToDescription(System.UInt32)">
            <summary>
            convert a command id to the readable enum description
            </summary>
            <param name="ucmdID"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.DiagnosticsHelper.ConvertCmdIDToDescription(System.Int32)">
            <summary>
            convert a command id to the readable enum description
            </summary>
            <param name="cmdID"></param>
            <returns></returns>
        </member>
        <member name="T:PMCLIB.DynamicPerfEval">
            <summary>
            Provides information about a mover's performance based on logged data
            </summary>
        </member>
        <member name="M:PMCLIB.DynamicPerfEval.SixChannelBasedEval(System.Collections.Generic.List{System.Double[]},System.Collections.Generic.List{PMCLIB.LOGGEDMOTIONTYPES},PMCLIB.DynamicMotionSettings,System.String,PMCLIB.DynamicTestType,PMCLIB.DynamicMotionDirection)">
            <summary>
            Provide 6 channels of data to evaluate performance. 0 indicates failed. 1000 indicates amazing performance, with 0% of the available forces used to complete the motion.
            the performance breakdown is as follows:
            50% is motion accuracy --> criterias: no deviation = max score. Failure level (causes motion tracking error) deviation = 0 score.
            50% is force requirement --> 0 force = max score. Max available force = 0 score
            </summary>
            <returns></returns>
        </member>
        <member name="T:PMCLIB.TRIGGERSOURCE">
            <summary>
            Enum for the source of the trigger for WaitUntil command
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERSOURCE.TIME_DELAY">
            <summary>
            Time delay trigger mode
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERSOURCE.EXTERNAL_DI">
            <summary>
            external digital input trigger mode
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERSOURCE.FIELDBUS_DI">
            <summary>
            fieldbus digital input trigger mode
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERSOURCE.CMD_LABEL">
            <summary>
            command label trigger mode
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERSOURCE.DISPLACEMENT">
            <summary>
            displacement trigger mode
            </summary>
        </member>
        <member name="T:PMCLIB.WAITUNTILSTARTOPTION">
            <summary>
            Enum for when the WaitUntil command should start monitoring
            </summary>
        </member>
        <member name="F:PMCLIB.WAITUNTILSTARTOPTION.STARTATEXECUTION">
            <summary>
            Starts monitoring when the command is executed (removed from the buffer)
            </summary>
        </member>
        <member name="F:PMCLIB.WAITUNTILSTARTOPTION.STARTATRECEIVED">
            <summary>
            Starts monitoring when the command is received (added in the buffer)
            </summary>
        </member>
        <member name="F:PMCLIB.WAITUNTILSTARTOPTION.SPECIFYSTARTCONDITION">
            <summary>
            Starts monitoring for the finish condition only after the specified start condition has been met
            </summary>
        </member>
        <member name="T:PMCLIB.TRIGGEREDGETYPE">
            <summary>
            enum for possible trigger edge types for digital inputs
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGEREDGETYPE.RISING_EDGE">
            <summary>
            triggers on the rising edge
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGEREDGETYPE.FALLING_EDGE">
            <summary>
            triggers on the falling edge
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGEREDGETYPE.IS_ONE">
            <summary>
            triggers when source value is 1
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGEREDGETYPE.IS_ZERO">
            <summary>
            triggers when source value is 0
            </summary>
        </member>
        <member name="T:PMCLIB.TRIGGERCMDLABELTYPE">
            <summary>
            enum for when to trigger during command label delay method
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERCMDLABELTYPE.CMD_START">
            <summary>
            triggers at the start of command
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERCMDLABELTYPE.CMD_FINISH">
            <summary>
            triggers when the command has finished
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERCMDLABELTYPE.CMD_EXECUTING">
            <summary>
            triggers during command execution
            </summary>
        </member>
        <member name="T:PMCLIB.TRIGGERCMDTYPE">
            <summary>
            enum for defining trigger command label's command type
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERCMDTYPE.MOTION_COMMAND">
            <summary>
            The command is a standard motion command such as linear motion, arc motion, etc.
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERCMDTYPE.RUNMACRO_COMMAND">
            <summary>
            The command is a run macro motion command
            </summary>
        </member>
        <member name="T:PMCLIB.TRIGGERDISPLACEMENTTYPE">
            <summary>
            enum for trigger type during displacement trigger method
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERDISPLACEMENTTYPE.GREATER_THAN">
            <summary>
            triggers when displacement (ax+by, or only x, or only y) is greater than threshold
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERDISPLACEMENTTYPE.LESS_THAN">
            <summary>
            triggers when displacement (ax+by, or only x, or only y) is less than threshold
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERDISPLACEMENTTYPE.POSITIVE_CROSS">
            <summary>
            triggers when going from less than threshold to greater than threshold
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERDISPLACEMENTTYPE.NEGATIVE_CROSS">
            <summary>
            triggers when going from greater than threshold to less than threshold
            </summary>
        </member>
        <member name="T:PMCLIB.TRIGGERDISPLACEMENTMODE">
            <summary>
            enum for trigger mode during displacement trigger method
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERDISPLACEMENTMODE.X_ONLY">
            <summary>
            monitoring X position only
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERDISPLACEMENTMODE.Y_ONLY">
            <summary>
            monitoring Y position only
            </summary>
        </member>
        <member name="F:PMCLIB.TRIGGERDISPLACEMENTMODE.AX_BY">
            <summary>
            monitoring by an arbitrary line
            </summary>
        </member>
        <member name="T:PMCLIB.FEEDBACKOPTION">
            <summary>
            Choose what the FeedbackPositionSI contains in GetXBotStatus
            </summary>
        </member>
        <member name="F:PMCLIB.FEEDBACKOPTION.POSITION">
            <summary>
            provides position data in the command reply
            </summary>
        </member>
        <member name="F:PMCLIB.FEEDBACKOPTION.FORCE">
            <summary>
            provides force data in the command reply
            </summary>
        </member>
        <member name="F:PMCLIB.FEEDBACKOPTION.REFERENCE">
            <summary>
            provides the current reference position data in the command reply
            </summary>
        </member>
        <member name="F:PMCLIB.FEEDBACKOPTION.TARGET">
            <summary>
            provides the current target position data in the command reply
            </summary>
        </member>
        <member name="F:PMCLIB.FEEDBACKOPTION.REF_VELOCITY">
            <summary>
            provides the reference velocity data in the command reply
            </summary>
        </member>
        <member name="T:PMCLIB.ALLXBOTSFEEDBACKOPTION">
            <summary>
            Choose what the GetAllXbotInfo command returns 
            </summary>
        </member>
        <member name="F:PMCLIB.ALLXBOTSFEEDBACKOPTION.POSITION">
            <summary>
            provides position data in the command reply
            </summary>
        </member>
        <member name="F:PMCLIB.ALLXBOTSFEEDBACKOPTION.REFERENCE">
            <summary>
            provides the current reference position data in the command reply
            </summary>
        </member>
        <member name="T:PMCLIB.FORCEMODEOPTION">
            <summary>
            Enum for which axis to enable open-loop force mode
            </summary>
        </member>
        <member name="F:PMCLIB.FORCEMODEOPTION.ZFORCE">
            <summary>
            Open loop force mode in Z
            </summary>
        </member>
        <member name="F:PMCLIB.FORCEMODEOPTION.XFORCE">
            <summary>
            Open loop force mode in X Axis
            </summary>
        </member>
        <member name="F:PMCLIB.FORCEMODEOPTION.YFORCE">
            <summary>
            Open loop force mode in Y Axis
            </summary>
        </member>
        <member name="F:PMCLIB.FORCEMODEOPTION.XANDYFORCE">
            <summary>
            Open loop force mode in X and Y Axis
            </summary>
        </member>
        <member name="F:PMCLIB.FORCEMODEOPTION.RZFORCE">
            <summary>
            Open loop torque mode in Rz rotation Axis
            </summary>
        </member>
        <member name="F:PMCLIB.FORCEMODEOPTION.RXFORCE">
            <summary>
            Open loop torque mode in Rx rotation Axis
            </summary>
        </member>
        <member name="F:PMCLIB.FORCEMODEOPTION.RYFORCE">
            <summary>
            Open loop torque mode in Ry rotation Axis
            </summary>
        </member>
        <member name="F:PMCLIB.FORCEMODEOPTION.XANDRZFORCE">
            <summary>
            Open loop torque mode in Rz and force mode in X
            </summary>
        </member>
        <member name="F:PMCLIB.FORCEMODEOPTION.YANDRZFORCE">
            <summary>
            Open loop torque mode in Rz and force mode in Y
            </summary>
        </member>
        <member name="F:PMCLIB.FORCEMODEOPTION.RXRYANDZFORCE">
            <summary>
            Open loop torque mode in Rx, Ry and force mode in Z
            </summary>
        </member>
        <member name="F:PMCLIB.FORCEMODEOPTION.XYANDRZFORCE">
            <summary>
            Open loop torque mode in Rz and force mode in X and Y
            </summary>
        </member>
        <member name="T:PMCLIB.FORCEMODETYPE">
            <summary>
            Enum for the Force Mode Type (Relative or Absolute)
            </summary>
        </member>
        <member name="F:PMCLIB.FORCEMODETYPE.ABSOLUTE">
            <summary>
            Absolute Force Mode
            </summary>
        </member>
        <member name="F:PMCLIB.FORCEMODETYPE.RELATIVE">
            <summary>
            Relative Force Mode
            </summary>
        </member>
        <member name="T:PMCLIB.PMCRTN">
            <summary>
            reply from the PMC for a given command
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.SAVE_FILE_FAILED">
            <summary>
            An exception occurred while saving a file
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.EXCEPTION">
            <summary>
            An exception occurred, failed to send command
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.NONETWORK">
            <summary>
            No connection to PMC
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.ALLOK">
            <summary>
            Command accepted
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.SYSTEMERROR">
            <summary>
            PMC failed to reply, please resend command
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.WRONGPMCSTATE">
            <summary>
            PMC is in an incorrect state for this command. (For example, not activated)
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.NOMASTERSHIP">
            <summary>
            Do not have the required mastership for this command
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.MASTERSHIP_TIMEOUT">
            <summary>
            Mastership did not provide a response
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.WRONG_GROUP_STATE">
            <summary>
            Group command rejected due to wrong group state
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.WRONG_MACRO_STATE">
            <summary>
            Macro command rejected due to wrong macro state
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.WRONG_DIGITAL_IO_STATE">
            <summary>
            Wrong digital input / output state
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.WRONG_FLYWAY_STATE">
            <summary>
            wrong flyway state
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.NO_ROUTING_SOLUTION">
            <summary>
            Failed to find a routing solution for auto driving
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.COMMUNICATION_TIMEOUT">
            <summary>
            Internal communication timeout
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.NO_LICENSE">
            <summary>
            Missing license
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.UNDEFINED_STEREOTYPE">
            <summary>
            Mover stereotype is not defined
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.EVENT_ID_BUSY">
            <summary>
            Command event ID is busy
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.EVENT_BUFFER_FULL">
            <summary>
            Command event buffer is full
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.CONFIG_BACKUP_FAILURE">
            <summary>
            User configuration backup failure
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.CONFIG_READING_FAILURE">
            <summary>
            User configuration reading failure
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.FILE_OPEN_FAILURE">
            <summary>
            File open failure
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.GCODE_SAVE_FAILURE">
            <summary>
            Save G-code failure
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.INVALID_GCODE">
            <summary>
            Invalid G-code
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.NO_SCANNING_SOLUTION">
            <summary>
            No auto XID scanning solution found
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.INTERNAL_COMMAND_ERROR">
            <summary>
            Internal command error
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.WRONGXBOTSTATE">
            <summary>
            Xbot state incorrect for this command. (For example, not levitated)
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.WRONGXBOTPOSITION">
            <summary>
            XBot position is incorrect for this command. (For Rz Rotation)
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.XBOT_WEIGHING_TIMEOUT">
            <summary>
            XBot weighing timeout
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.WRONG_XBOT_TYPE">
            <summary>
            Wrong xbot type for full rotation
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.INVALIDPARAMS">
            <summary>
            Parameters for this command are invalid
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.INVALID_XML">
            <summary>
            Invalid XML file
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.INVALID_WIRING">
            <summary>
            Invalid PMNet wiring
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.WRONG_QUEUE_STATE">
            <summary>
            Wrong queue state
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.WRONG_ZONE_STATE">
            <summary>
            The zone is in the wrong state to perform this operation
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.ZONE_NOT_AVAILABLE">
            <summary>
            An XBot is located on the zone boundary
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.WRONG_AL_ZONE_STATE">
            <summary>
            Wrong auto-loading/unloading zone state
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.WRONG_TRAFFICROAD_STATE">
            <summary>
            Wrong traffic road state
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.WRONG_STARWHEEL_STATE">
            <summary>
            Wrong star wheel state
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.FUNCTION_BUFFER_FULL">
            <summary>
            Function buffer is full
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.RUN_FUNCTION_FAILURE">
            <summary>
            Run function failure
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.WRONG_SECTOR_STATE">
            <summary>
            Wrong sector state
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.SECTOR_NOT_AVALIABLE">
            <summary>
            Sector not available
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.TRACE_NOT_DEFINED">
            <summary>
            Trace not defined
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.INVALID_TRACE">
            <summary>
            Invalid trace
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.TRACE_NOT_READY">
            <summary>
            Trace is not ready
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.CODE_GENERATION_ONLY">
            <summary>
            Only used for code generation, not an actual command for the PMC
            </summary>
        </member>
        <member name="F:PMCLIB.PMCRTN.INVALIDCOMMAND">
            <summary>
            The command ID is invalid
            </summary>
        </member>
        <member name="T:PMCLIB.XBOTSTATE">
            <summary>
            XBot state enum
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_PREVIEW">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_UNKNOWN">
            <summary>
            unable to determine XBOT state
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_UNDETECTED">
            <summary>
            XBot not detected by the PMC
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_DISCOVERING">
            <summary>
            XBOT is landed
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_LANDED">
            <summary>
            XBOT is landed
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_IDLE">
            <summary>
            XBOT is idling (levitated)
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_DISABLED">
            <summary>
            XBOT is disabled
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_MOTION">
            <summary>
            XBOT is in motion
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_WAIT">
            <summary>
            XBOT is waiting for a trigger
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_STOPPING">
            <summary>
            XBOT is attempting to stop
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_OBSTACLE_DETECTED">
            <summary>
            XBOT detected an obstacle and is waiting for obstacle to clear
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_HOLDPOSITION">
            <summary>
            XBOT is hold position due excessive error during motion
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_STOPPED">
            <summary>
            XBOT stopped and will not automatically resume
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_RESERVED">
            <summary>
            XBOT is in stream motion
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_RESERVED1">
            <summary>
            XBOT is in asynchronous motion (automatically driven to target)
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_RESERVED2">
            <summary>
            reserved
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_ERROR">
            <summary>
            XBOT has an error
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTSTATE.XBOT_UNINSTALLED">
            <summary>
            XBOT is not installed
            </summary>
        </member>
        <member name="T:PMCLIB.PMCSTATUS">
            <summary>
            PMC Status Enum
            </summary>
        </member>
        <member name="F:PMCLIB.PMCSTATUS.PMC_UNKNOWN">
            <summary>
            Unable to determine PMC Status
            </summary>
        </member>
        <member name="F:PMCLIB.PMCSTATUS.PMC_BOOTING">
            <summary>
            PMC is booting up
            </summary>
        </member>
        <member name="F:PMCLIB.PMCSTATUS.PMC_INACTIVE">
            <summary>
            PMC is inactive (XBOTs deactivated)
            </summary>
        </member>
        <member name="F:PMCLIB.PMCSTATUS.PMC_ACTIVATING">
            <summary>
            PMC is starting to activate
            </summary>
        </member>
        <member name="F:PMCLIB.PMCSTATUS.PMC_DISCOVERY">
            <summary>
            Movers are scanning for Absolute ID
            </summary>
        </member>
        <member name="F:PMCLIB.PMCSTATUS.PMC_SERVICE">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:PMCLIB.PMCSTATUS.PMC_FULLCTRL">
            <summary>
            PMC in fully controlled mode
            </summary>
        </member>
        <member name="F:PMCLIB.PMCSTATUS.PMC_INTELLIGENTCTRL">
            <summary>
            PMC in intelligent control mode
            </summary>
        </member>
        <member name="F:PMCLIB.PMCSTATUS.PMC_DEACTIVATING">
            <summary>
            PMC is deactivating
            </summary>
        </member>
        <member name="F:PMCLIB.PMCSTATUS.PMC_ERRORHANDLING">
            <summary>
            PMC is handling an error and recording snapshots
            </summary>
        </member>
        <member name="F:PMCLIB.PMCSTATUS.PMC_ERROR">
            <summary>
            PMC is in the error state
            </summary>
        </member>
        <member name="T:PMCLIB.BORDERSTATUS">
            <summary>
            Multi-PMC Border Status Enum
            </summary>
        </member>
        <member name="F:PMCLIB.BORDERSTATUS.DISCONNECTED">
            <summary>
            The flyway link between this border is not connected
            </summary>
        </member>
        <member name="F:PMCLIB.BORDERSTATUS.NOTREADY">
            <summary>
            The flyway link between this border is connected, but it is not yet ready to receive xbots
            </summary>
        </member>
        <member name="F:PMCLIB.BORDERSTATUS.READY">
            <summary>
            The flyway link at this border is connected and it is ready to receive xbots
            </summary>
        </member>
        <member name="T:PMCLIB.POSITIONMODE">
            <summary>
            Motion position mode Enum
            </summary>
        </member>
        <member name="F:PMCLIB.POSITIONMODE.ABSOLUTE">
            <summary>
            Absolute positioning
            </summary>
        </member>
        <member name="F:PMCLIB.POSITIONMODE.RELATIVE">
            <summary>
            Relative positioning
            </summary>
        </member>
        <member name="T:PMCLIB.CAMMODE">
            <summary>
            Can choose between
            </summary>
        </member>
        <member name="F:PMCLIB.CAMMODE.AutoStart">
            <summary>
            automatically trigger the cam motion when the master xbot is inside the cam region
            </summary>
        </member>
        <member name="F:PMCLIB.CAMMODE.Cyclic">
            <summary>
            the profile is unwound and repeats cyclicly, such that the cam profile covers the range from -infinity to + infinity for the master axis
            </summary>
        </member>
        <member name="F:PMCLIB.CAMMODE.SingleStart">
            <summary>
            the cam stops automatically if the master axis exits the defined cam region, and does not start again if the master axis re-enters the cam region
            </summary>
        </member>
        <member name="T:PMCLIB.CAMRATCHETDIRECTION">
            <summary>
            Select the cam engagement direction
            </summary>
        </member>
        <member name="F:PMCLIB.CAMRATCHETDIRECTION.BOTH_DIRECTIONS">
            <summary>
            The cam is engaged whether the master axis value is changing in the forward (positive) or backward (negative) direction
            </summary>
        </member>
        <member name="T:PMCLIB.LINEARPATHTYPE">
            <summary>
            Linear path type Enum
            </summary>
        </member>
        <member name="F:PMCLIB.LINEARPATHTYPE.DIRECT">
            <summary>
            Direct motion
            </summary>
        </member>
        <member name="F:PMCLIB.LINEARPATHTYPE.XTHENY">
            <summary>
            X motion first, then Y motion
            </summary>
        </member>
        <member name="F:PMCLIB.LINEARPATHTYPE.YTHENX">
            <summary>
            Y motion first, then X motion
            </summary>
        </member>
        <member name="T:PMCLIB.ARCDIRECTION">
            <summary>
            Arc direction Enum
            </summary>
        </member>
        <member name="F:PMCLIB.ARCDIRECTION.CLOCKWISE">
            <summary>
            Clockwise motion
            </summary>
        </member>
        <member name="F:PMCLIB.ARCDIRECTION.COUNTERCLOCKWISE">
            <summary>
            Counter-clockwise motion
            </summary>
        </member>
        <member name="T:PMCLIB.ARCTYPE">
            <summary>
            Arc type Enum
            </summary>
        </member>
        <member name="F:PMCLIB.ARCTYPE.MINORARC">
            <summary>
            Minor arc
            </summary>
        </member>
        <member name="F:PMCLIB.ARCTYPE.MAJORARC">
            <summary>
            Major arc
            </summary>
        </member>
        <member name="T:PMCLIB.ARCMODE">
            <summary>
            Arc motion mode Enum
            </summary>
        </member>
        <member name="F:PMCLIB.ARCMODE.TARGETRADIUS">
            <summary>
            Target + radius mode
            </summary>
        </member>
        <member name="F:PMCLIB.ARCMODE.CENTERANGLE">
            <summary>
            Center + angle mode
            </summary>
        </member>
        <member name="T:PMCLIB.MOTIONBUFFEROPTIONS">
            <summary>
            Motion buffer options Enum
            </summary>
        </member>
        <member name="F:PMCLIB.MOTIONBUFFEROPTIONS.BLOCKBUFFER">
            <summary>
            Block motion buffer
            </summary>
        </member>
        <member name="F:PMCLIB.MOTIONBUFFEROPTIONS.RELEASEBUFFER">
            <summary>
            Release motion buffer
            </summary>
        </member>
        <member name="F:PMCLIB.MOTIONBUFFEROPTIONS.CLEARBUFFER">
            <summary>
            Clear motion buffer
            </summary>
        </member>
        <member name="T:PMCLIB.MOTIONMACROOPTIONS">
            <summary>
            Motion macro options Enum
            </summary>
        </member>
        <member name="F:PMCLIB.MOTIONMACROOPTIONS.CLEARMACRO">
            <summary>
            Clear motion macro
            </summary>
        </member>
        <member name="F:PMCLIB.MOTIONMACROOPTIONS.SAVEMACRO">
            <summary>
            Finish motion macro editing
            </summary>
        </member>
        <member name="F:PMCLIB.MOTIONMACROOPTIONS.QUERYSTATUS">
            <summary>
            Query status of macro
            </summary>
        </member>
        <member name="T:PMCLIB.GROUPOPTIONS">
            <summary>
            Group options Enum
            </summary>
        </member>
        <member name="F:PMCLIB.GROUPOPTIONS.CREATEGROUP">
            <summary>
            Create group
            </summary>
        </member>
        <member name="F:PMCLIB.GROUPOPTIONS.DELETEGROUP">
            <summary>
            Delete group
            </summary>
        </member>
        <member name="F:PMCLIB.GROUPOPTIONS.BONDGROUP">
            <summary>
            Connect group
            </summary>
        </member>
        <member name="F:PMCLIB.GROUPOPTIONS.UNBONDGROUP">
            <summary>
            Disconnect group
            </summary>
        </member>
        <member name="F:PMCLIB.GROUPOPTIONS.BLOCKMEMBERSBUFFER">
            <summary>
            Block motion buffer for group
            </summary>
        </member>
        <member name="F:PMCLIB.GROUPOPTIONS.RELEASEMEMBERSBUFFER">
            <summary>
            Unblock motion buffer for group
            </summary>
        </member>
        <member name="F:PMCLIB.GROUPOPTIONS.QUERYSTATUS">
            <summary>
            Query group status
            </summary>
        </member>
        <member name="T:PMCLIB.LEVITATEOPTIONS">
            <summary>
            Levitation options Enum
            </summary>
        </member>
        <member name="F:PMCLIB.LEVITATEOPTIONS.LAND">
            <summary>
            Land XBOT
            </summary>
        </member>
        <member name="F:PMCLIB.LEVITATEOPTIONS.LEVITATE">
            <summary>
            Levitate XBOT
            </summary>
        </member>
        <member name="T:PMCLIB.LEVITATIONSPEED">
            <summary>
            Levitation speed options enum
            </summary>
        </member>
        <member name="F:PMCLIB.LEVITATIONSPEED.APPROX_1600MS">
            <summary>
            Levitate/Land the xbot(s) in roughly 1.6s
            </summary>
        </member>
        <member name="F:PMCLIB.LEVITATIONSPEED.APPROX_800MS">
            <summary>
            Levitate/Land the xbot(s) in roughly 0.8s
            </summary>
        </member>
        <member name="F:PMCLIB.LEVITATIONSPEED.APPROX_400MS">
            <summary>
            Levitate/Land the xbot(s) in roughly 0.4s
            </summary>
        </member>
        <member name="F:PMCLIB.LEVITATIONSPEED.APPROX_200MS">
            <summary>
            Levitate/Land the xbot(s) in roughly 0.2s
            </summary>
        </member>
        <member name="F:PMCLIB.LEVITATIONSPEED.APPROX_100MS">
            <summary>
            Levitate/Land the xbot(s) in roughly 0.1s
            </summary>
        </member>
        <member name="F:PMCLIB.LEVITATIONSPEED.APPROX_50MS">
            <summary>
            Levitate/Land the xbot(s) in roughly 0.05s
            </summary>
        </member>
        <member name="T:PMCLIB.MOBILITYOPTIONS">
            <summary>
            Mobility options enums
            </summary>
        </member>
        <member name="F:PMCLIB.MOBILITYOPTIONS.DISABLE">
            <summary>
            Disable XBOT
            </summary>
        </member>
        <member name="F:PMCLIB.MOBILITYOPTIONS.LAND">
            <summary>
            Land XBOT
            </summary>
        </member>
        <member name="F:PMCLIB.MOBILITYOPTIONS.LEVITATE">
            <summary>
            Levitate XBOT
            </summary>
        </member>
        <member name="T:PMCLIB.MOTIONINTERRUPTOPTIONS">
            <summary>
            motion interrupt options Enum
            </summary>
        </member>
        <member name="F:PMCLIB.MOTIONINTERRUPTOPTIONS.RESUME">
            <summary>
            Resume the xbot motion
            </summary>
        </member>
        <member name="F:PMCLIB.MOTIONINTERRUPTOPTIONS.PAUSE">
            <summary>
            pause the xbot motion
            </summary>
        </member>
        <member name="T:PMCLIB.ASYNCOPTIONS">
            <summary>
            Async motion options Enum
            </summary>
        </member>
        <member name="F:PMCLIB.ASYNCOPTIONS.MOVEALL">
            <summary>
            All XBOTs on flyways can be moved
            </summary>
        </member>
        <member name="F:PMCLIB.ASYNCOPTIONS.MOVEALL_UNLABELED">
            <summary>
             Any mover can go to any of the specified target positions
            </summary>
        </member>
        <member name="T:PMCLIB.PLANETOPTIONS">
            <summary>
            Planet Motion Enum
            </summary>
        </member>
        <member name="F:PMCLIB.PLANETOPTIONS.REMOVEPLANETS">
            <summary>
            Remove the planet XBOTs listed in this command from the sun XBOT's planet list
            </summary>
        </member>
        <member name="F:PMCLIB.PLANETOPTIONS.ADDPLANETS">
            <summary>
            add the planet XBOTs listed in this command to the sun XBOT's planet list
            </summary>
        </member>
        <member name="T:PMCLIB.MOVERTYPE">
            <summary>
            Mover type enumeration
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.M3_06">
            <summary>
            M3-06 120mm x 120mm
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.RESERVED1">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.M3_08X">
            <summary>
            M3-08 180mm x 120mm
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.M3_08Y">
            <summary>
            M3-08 120mm x 180mm
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.M3_09X">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.M3_09Y">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.M3_10">
            <summary>
            M3-10 180mm x 180mm
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.RESERVED7">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.M3_11X">
            <summary>
            M3-11 210mm x 180mm
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.M3_11Y">
            <summary>
            M3-11 180mm x 210mm
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.RESERVED10">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.RESERVED11">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.M3_12">
            <summary>
            M3-12 210mm x 210mm
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.RESERVED13">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.M3_13">
            <summary>
            M3-13 240mm x 240mm
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.RESERVED15">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.M3_15X">
            <summary>
            M3-15 330mm x 210mm
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.M3_15Y">
            <summary>
            M3-15 210mm x 330mm
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.M3_17">
            <summary>
            M3-17 300mm x 300mm
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.RESERVED19">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.M3_18">
            <summary>
            M3-18 330mm x 330mm
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.RESERVED21">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.M3_25">
            <summary>
            M325 XBot 450x450x16 mm
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERTYPE.RESERVED23">
            <summary>
            Reserved
            </summary>
        </member>
        <member name="T:PMCLIB.MOVERPROPERTY">
            <summary>
            Enum containing the index of mover properties
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERPROPERTY.INVALIDPROPERTY">
            <summary>
            invalid mover property
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERPROPERTY.MOVERTYPE_0">
            <summary>
            Mover type 
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERPROPERTY.PAYLOADKG_1">
            <summary>
            Configure payload on the mover, in kg
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERPROPERTY.CGHEIGHTM_2">
            <summary>
            the height of the center of gravity of the payload, in meters
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERPROPERTY.XDIMENSIONM_3">
            <summary>
            The max size of the payload or the mover, in the X direction, whichever is larger
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERPROPERTY.RESERVED_4">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERPROPERTY.YDIMENSIONM_5">
            <summary>
            The max size of the payload or the mover, in the Y direction, whichever is larger
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERPROPERTY.RESERVED2_6">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="F:PMCLIB.MOVERPROPERTY.MAXACCELERATION_7">
            <summary>
            The maximum acceleration achievable by the mover, with the currently configured payload
            </summary>
        </member>
        <member name="T:PMCLIB.AXISNAMES">
            <summary>
            Axis enum, base 1
            </summary>
        </member>
        <member name="F:PMCLIB.AXISNAMES.NoAxis_0">
            <summary>
            No axis selected
            </summary>
        </member>
        <member name="F:PMCLIB.AXISNAMES.X_1">
            <summary>
            X Axis = 1
            </summary>
        </member>
        <member name="F:PMCLIB.AXISNAMES.Y_2">
            <summary>
            Y Axis = 2
            </summary>
        </member>
        <member name="F:PMCLIB.AXISNAMES.Z_3">
            <summary>
            Z Axis = 3
            </summary>
        </member>
        <member name="F:PMCLIB.AXISNAMES.RX_4">
            <summary>
            RX Axis = 4
            </summary>
        </member>
        <member name="F:PMCLIB.AXISNAMES.RY_5">
            <summary>
            RY Axis = 5
            </summary>
        </member>
        <member name="F:PMCLIB.AXISNAMES.RZ_6">
            <summary>
            RZ Axis = 6
            </summary>
        </member>
        <member name="T:PMCLIB.CAMOPTIONS">
            <summary>
            cam motion enum
            </summary>
        </member>
        <member name="F:PMCLIB.CAMOPTIONS.STOP_CAM">
            <summary>
            Stop cam motion
            </summary>
        </member>
        <member name="F:PMCLIB.CAMOPTIONS.START_CAM">
            <summary>
            Start cam motion
            </summary>
        </member>
        <member name="T:PMCLIB.GROUPBONDOPTIONS">
            <summary>
            Group Bond Option Enum
            </summary>
        </member>
        <member name="F:PMCLIB.GROUPBONDOPTIONS.SIXDOF_DECOUPLED">
            <summary>
            6D bonded, but xy is decoupled from RZ
            </summary>
        </member>
        <member name="F:PMCLIB.GROUPBONDOPTIONS.SIXDOF_COUPLED">
            <summary>
            6D bonded, but xy is coupled with RZ
            </summary>
        </member>
        <member name="T:PMCLIB.SHORTAXESCENTERMODE">
            <summary>
            short axes center mode Enum
            </summary>
        </member>
        <member name="F:PMCLIB.SHORTAXESCENTERMODE.XBOT_CENTER">
            <summary>
            XBOT center is used for rotation or tilt calculations
            </summary>
        </member>
        <member name="F:PMCLIB.SHORTAXESCENTERMODE.USER_DEFINED_CENTER_XY">
            <summary>
            User defines the center (x,y coordinates) that the XBOT rotates around
            </summary>
        </member>
        <member name="T:PMCLIB.ZONESTATE">
            <summary>
            Zone state
            </summary>
        </member>
        <member name="F:PMCLIB.ZONESTATE.UNKNOWN">
            <summary>
            Unknown zone state
            </summary>
        </member>
        <member name="F:PMCLIB.ZONESTATE.UNDEFINED">
            <summary>
            The zone has not been defined and cannot be used
            </summary>
        </member>
        <member name="F:PMCLIB.ZONESTATE.ACTIVATED_UNFENCED">
            <summary>
            The zone is activated, XBots can move freely inside the zone and may move across the zone boundary
            </summary>
        </member>
        <member name="F:PMCLIB.ZONESTATE.DEACTIVATING">
            <summary>
            The zone is deactivating. Any XBots inside the zone are in the process of being deactivated
            </summary>
        </member>
        <member name="F:PMCLIB.ZONESTATE.LOADING_FENCED">
            <summary>
            The zone is a loading / unloading zone, a user may add or remove XBots from the zone manually. The XBots inside the zone are deactivated. XBots may not move across the zone boundary
            </summary>
        </member>
        <member name="F:PMCLIB.ZONESTATE.ACTIVATING">
            <summary>
            The zone is activating. Any XBots inside the zone are in the process of being discovered / levitated
            </summary>
        </member>
        <member name="F:PMCLIB.ZONESTATE.ACTIVATED_FENCED">
            <summary>
            The zone is activated, XBots can move freely inside the zone, but may not move across the zone boundary
            </summary>
        </member>
        <member name="F:PMCLIB.ZONESTATE.ERROR">
            <summary>
            The zone is in error, XBots are not able to be detected in the zone
            </summary>
        </member>
        <member name="F:PMCLIB.ZONESTATE.LANDED">
            <summary>
            The zone is activating, movers are being controlled in 3DOF
            </summary>
        </member>
        <member name="F:PMCLIB.ZONESTATE.LEVITATED">
            <summary>
            The zone is activating, movers are being controlled in 6DOF weakly
            </summary>
        </member>
        <member name="F:PMCLIB.ZONESTATE.DISCOVER">
            <summary>
            The zone is activating, movers are currently scanning for absolute ID
            </summary>
        </member>
        <member name="T:PMCLIB.ZONEOPERATION">
            <summary>
            zone operation performed by the Zone Control command. 0 = Deactivate Zone, 1= Activate Zone
            </summary>
        </member>
        <member name="F:PMCLIB.ZONEOPERATION.DEACTIVATE_ZONE">
            <summary>
            Deactivate the zone, if successful, the zone is converted into a loading/unloading zone. Any XBots inside the zone will become deactivated
            </summary>
        </member>
        <member name="F:PMCLIB.ZONEOPERATION.ACTIVATE_ZONE">
            <summary>
            Activated the zone, if successful, the zone is converted into a fenced active zone. Any XBots inside the zone will be levitated
            </summary>
        </member>
        <member name="T:PMCLIB.FENCEOPERATION">
            <summary>
            fence operation performed by the Zone Fence Control command. 0 = remove fence around the zone, 1= build fence around the zone
            </summary>
        </member>
        <member name="F:PMCLIB.FENCEOPERATION.REMOVE_FENCE">
            <summary>
            remove the fence around the zone, XBots can freely move across the zone boundary
            </summary>
        </member>
        <member name="F:PMCLIB.FENCEOPERATION.BUILD_FENCE">
            <summary>
            build the fence around the zone, XBots cannot move across the zone boundary
            </summary>
        </member>
        <member name="T:PMCLIB.QUEUEOPERATION">
            <summary>
            queue operation performed by the Queue Control Command. 0=create queue, 1=delete queue
            </summary>
        </member>
        <member name="F:PMCLIB.QUEUEOPERATION.CREATE_QUEUE">
            <summary>
            Create a queue, queue definitions are required
            </summary>
        </member>
        <member name="F:PMCLIB.QUEUEOPERATION.DELETE_QUEUE">
            <summary>
            Delete the queueing area
            </summary>
        </member>
        <member name="T:PMCLIB.AREASELECTION">
            <summary>
            select an area of the region to use
            </summary>
        </member>
        <member name="F:PMCLIB.AREASELECTION.BOTTOM_LEFT">
            <summary>
            An area located at the bottom left corner of the queue, with the same size as the largest allowable XBot inside the area
            </summary>
        </member>
        <member name="F:PMCLIB.AREASELECTION.TOP_LEFT">
            <summary>
            An area located at the top left corner of the queue, with the same size as the largest allowable XBot inside the area
            </summary>
        </member>
        <member name="F:PMCLIB.AREASELECTION.TOP_RIGHT">
            <summary>
            An area located at the top right corner of the queue, with the same size as the largest allowable XBot inside the area
            </summary>
        </member>
        <member name="F:PMCLIB.AREASELECTION.BOTTOM_RIGHT">
            <summary>
            An area located at the bottom right corner of the queue, with the same size as the largest allowable XBot inside the area
            </summary>
        </member>
        <member name="T:PMCLIB.ALZONEOPERATION">
            <summary>
            operation performed by the auto loading zone control command
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONEOPERATION.CREATE_AUTOLOAD_ZONE">
            <summary>
            Create a autoload zone
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONEOPERATION.DELETE_AUTOLOAD_ZONE">
            <summary>
            Delete the auto load zone
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONEOPERATION.ACTIVATE_AUTOLOAD_ZONE">
            <summary>
            Activate the auto load zone
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONEOPERATION.DEACTIVATE_AUTOLOAD_ZONE">
            <summary>
            Deactivate the auto load zone
            </summary>
        </member>
        <member name="T:PMCLIB.ALZONETYPE">
            <summary>
            define the auto loading zone as either loading or unloading
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONETYPE.UNLOAD_ZONE">
            <summary>
            unload from flyway zone, send XBot to external device
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONETYPE.LOAD_ZONE">
            <summary>
            load to flyway zone, receive XBot from external device
            </summary>
        </member>
        <member name="T:PMCLIB.ALZONESTATE">
            <summary>
            configured auto loading zone state
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONESTATE.UNDEFINED">
            <summary>
            auto loading zone has not been defined
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONESTATE.DEFINED">
            <summary>
            auto loading zone has been defined
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONESTATE.UNLOADING_ZONE">
            <summary>
            defined as auto unloading zone (removing XBot from flyway)
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONESTATE.LOADING_ZONE">
            <summary>
            defined as auto loading zone (adding XBot to flyway)
            </summary>
        </member>
        <member name="T:PMCLIB.ALZONEUNLOADMODE">
            <summary>
            loading and unloading behaviour
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONEUNLOADMODE.STOP_BEFORE_UNLOAD">
            <summary>
            XBot will come to a stop at the boundary before the unload operation, for loading it will load the mover automatically
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONEUNLOADMODE.NONSTOP_UNLOAD">
            <summary>
            XBot will not stop but smoothly transition its motion into an unload operation
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONEUNLOADMODE.MANUAL_UNLOAD">
            <summary>
            XBot will be disabled allowing operator to unload manually, for loading it allows operator to load manually
            </summary>
        </member>
        <member name="T:PMCLIB.ALZONEDIRECTION">
            <summary>
            loading/unloading direction
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONEDIRECTION.POSITIVE_X">
            <summary>
            XBot will load in positive x direction
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONEDIRECTION.NEGATIVE_X">
            <summary>
            XBot will load in negative x direction
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONEDIRECTION.POSITIVE_Y">
            <summary>
            XBot will load in positive y direction
            </summary>
        </member>
        <member name="F:PMCLIB.ALZONEDIRECTION.NEGATIVE_Y">
            <summary>
            XBot will load in negative y direction
            </summary>
        </member>
        <member name="T:PMCLIB.MOTIONDIRECTION">
            <summary>
            XBot motion direction
            </summary>
        </member>
        <member name="F:PMCLIB.MOTIONDIRECTION.POSITIVE_X">
            <summary>
            XBot will move in the +X direction
            </summary>
        </member>
        <member name="F:PMCLIB.MOTIONDIRECTION.NEGATIVE_X">
            <summary>
            XBot will move in the -X direction
            </summary>
        </member>
        <member name="F:PMCLIB.MOTIONDIRECTION.POSITIVE_Y">
            <summary>
            XBot will move in the +Y direction
            </summary>
        </member>
        <member name="F:PMCLIB.MOTIONDIRECTION.NEGATIVE_Y">
            <summary>
            XBot will move in the -Y direction
            </summary>
        </member>
        <member name="T:PMCLIB.TRACKINGFAILURETYPE">
            <summary>
            Type of tracking error
            </summary>
        </member>
        <member name="F:PMCLIB.TRACKINGFAILURETYPE.FATAL_TRACKING_ERR">
            <summary>
            Fatal Tracking error
            </summary>
        </member>
        <member name="F:PMCLIB.TRACKINGFAILURETYPE.SELF_RECOVERABLE_ERR">
            <summary>
            Self-recovering tracking error
            </summary>
        </member>
        <member name="T:PMCLIB.NOISEOPERATION">
            <summary>
            Noise operation performed by the Noise Control Command. 0=turn off, 1=turn on
            </summary>
        </member>
        <member name="F:PMCLIB.NOISEOPERATION.NOISE_OFF">
            <summary>
            Turn off noise
            </summary>
        </member>
        <member name="F:PMCLIB.NOISEOPERATION.NOISE_ON">
            <summary>
            Turn on noise, noise definition are required
            </summary>
        </member>
        <member name="T:PMCLIB.NOISEMODE">
            <summary>
            Noise activation mode. 0=no delay, 1=with delay
            </summary>
        </member>
        <member name="F:PMCLIB.NOISEMODE.NO_DELAY_NOISE">
            <summary>
            Send noise with no delay
            </summary>
        </member>
        <member name="F:PMCLIB.NOISEMODE.DELAY_NOISE">
            <summary>
            Send noise with speficied delay
            </summary>
        </member>
        <member name="T:PMCLIB.NOISETYPE">
            <summary>
            Noise type used as one of noise parameters. 0=sinusoidal wave, 1=white
            </summary>
        </member>
        <member name="F:PMCLIB.NOISETYPE.SINUSOIDAL_WAVE">
            <summary>
            Sinusoidal wave
            </summary>
        </member>
        <member name="F:PMCLIB.NOISETYPE.WHITE_NOISE">
            <summary>
            White noise
            </summary>
        </member>
        <member name="T:PMCLIB.TriState">
            <summary>
            failure (false), success (true), or unknown
            </summary>
        </member>
        <member name="F:PMCLIB.TriState.FALSE">
            <summary>
            false, or failure
            </summary>
        </member>
        <member name="F:PMCLIB.TriState.TRUE">
            <summary>
            true, or success
            </summary>
        </member>
        <member name="F:PMCLIB.TriState.Unknown">
            <summary>
            unknown status
            </summary>
        </member>
        <member name="T:PMCLIB.XBOTTYPE">
            <summary>
            Current supported XBot Types
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M306">
            <summary>
            M306 XBot 120x120x10 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M308X">
            <summary>
            M308X XBot 180x120x10 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M308Y">
            <summary>
            M308Y XBot 120x180x10 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M309X">
            <summary>
            M309X XBot 240x120x10 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M309Y">
            <summary>
            M309Y XBot 120x240x10 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M310">
            <summary>
            M310 XBot 180x180x10 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M311X">
            <summary>
            M311X XBot 210x180x10 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M311Y">
            <summary>
            M311Y XBot 180x210x10 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M312">
            <summary>
            M312 XBot 210x210x10 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M313">
            <summary>
            M313 XBot 240x240x10 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M315X">
            <summary>
            M315X XBot 330x210x12 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M315Y">
            <summary>
            M315Y XBot 210x330x12 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M317">
            <summary>
            M317 XBot 300x300x12 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M318">
            <summary>
            M318 XBot 330x330x12 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M325">
            <summary>
            M325 XBot 450x450x16 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M409">
            <summary>
            M409 XBot 160x160x12 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M411X">
            <summary>
            M411X XBot 240x160x12 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M411Y">
            <summary>
            M411Y XBot 160x240x12 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M412X">
            <summary>
            M412X XBot 320x160x12 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M412Y">
            <summary>
            M412Y XBot 160x320x12 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M413">
            <summary>
            M413 XBot 240x240x12 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M416">
            <summary>
            M416 XBot 280x280x12 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M418">
            <summary>
            M418 XBot 320x320x12 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M420X">
            <summary>
            M418 XBot 440x280x14 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M420Y">
            <summary>
            M418 XBot 280x440x14 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M422">
            <summary>
            M422 XBot 400x400x14 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M424">
            <summary>
            M424 XBot 440x440x14 mm
            </summary>
        </member>
        <member name="F:PMCLIB.XBOTTYPE.M433">
            <summary>
            M433 XBot 600x600x18 mm
            </summary>
        </member>
        <member name="T:PMCLIB.ROTATIONMODE">
            <summary>
            Rotary motion P2P mode
            </summary>
        </member>
        <member name="F:PMCLIB.ROTATIONMODE.NO_ANGLE_WRAP">
            <summary>
            No angle wrap, directly rotate to target Rz
            </summary>
        </member>
        <member name="F:PMCLIB.ROTATIONMODE.WRAP_TO_2PI_CCW">
            <summary>
            Wrap angle from [0, 2PI], rotate in the Counter Clockwise direction 
            </summary>
        </member>
        <member name="F:PMCLIB.ROTATIONMODE.WRAP_TO_2PI_CW">
            <summary>
            Wrap angle from [0, 2PI], rotate in the Clockwise Direction
            </summary>
        </member>
        <member name="T:PMCLIB.JERKLIMAXIS">
            <summary>
            Enum for selecting which axis to set the new jerk limit
            </summary>
        </member>
        <member name="F:PMCLIB.JERKLIMAXIS.X">
            <summary>
            X Axis Jerk Limit
            </summary>
        </member>
        <member name="F:PMCLIB.JERKLIMAXIS.Z">
            <summary>
            Z Axis Jerk Limit
            </summary>
        </member>
        <member name="F:PMCLIB.JERKLIMAXIS.Rx">
            <summary>
            Rx Axis Jerk Limit
            </summary>
        </member>
        <member name="F:PMCLIB.JERKLIMAXIS.Ry">
            <summary>
            Ry Axis Jerk Limit
            </summary>
        </member>
        <member name="F:PMCLIB.JERKLIMAXIS.Rz">
            <summary>
            RZ Axis Jerk Limit
            </summary>
        </member>
        <member name="T:PMCLIB.ACTIVATIONMODE">
            <summary>
            Enum for selecting the activation mode when PMC is configured to be in Absolute ID mode
            </summary>
        </member>
        <member name="F:PMCLIB.ACTIVATIONMODE.AUTO_SCAN">
            <summary>
            After Activation, all Xbots will move and scan for Absolute ID
            </summary>
        </member>
        <member name="F:PMCLIB.ACTIVATIONMODE.MANUAL_SCAN">
            <summary>
            After Activation, all Xbots will levitate and user can manually trigger the Absolute ID scanning
            </summary>
        </member>
        <member name="T:PMCLIB.RECOVERXBOTMODE">
            <summary>
            Enum for selecting Xbot behaviour after recovering accident Xbot
            </summary>
        </member>
        <member name="F:PMCLIB.RECOVERXBOTMODE.RESUME">
            <summary>
            Resumes the previous motion after recovering the Xbot
            </summary>
        </member>
        <member name="F:PMCLIB.RECOVERXBOTMODE.PAUSE">
            <summary>
            Pauses the previous motion after recovering the Xbot
            </summary>
        </member>
        <member name="F:PMCLIB.RECOVERXBOTMODE.STOP">
            <summary>
            Clears the buffer after recovering the Xbot
            </summary>
        </member>
        <member name="T:PMCLIB.SECTORSTATE">
            <summary>
            Sector State
            </summary>
        </member>
        <member name="F:PMCLIB.SECTORSTATE.UNKNOWN">
            <summary>
            Unknown Sector State
            </summary>
        </member>
        <member name="F:PMCLIB.SECTORSTATE.NOT_DEFINED">
            <summary>
            Sector is Not Defined
            </summary>
        </member>
        <member name="F:PMCLIB.SECTORSTATE.DISCONNECTED">
            <summary>
            Sector Disconnected
            </summary>
        </member>
        <member name="F:PMCLIB.SECTORSTATE.INACTIVE_FENCED">
            <summary>
            Sector is Inactive and Fenced
            </summary>
        </member>
        <member name="F:PMCLIB.SECTORSTATE.DEACTIVATING">
            <summary>
            Sector Deactivating
            </summary>
        </member>
        <member name="F:PMCLIB.SECTORSTATE.STOPPING">
            <summary>
            Sector Stopping
            </summary>
        </member>
        <member name="F:PMCLIB.SECTORSTATE.ACTIVATING">
            <summary>
            Sector Activating
            </summary>
        </member>
        <member name="F:PMCLIB.SECTORSTATE.ACTIVATED_FENCED">
            <summary>
            Sector is Activated and Fenced
            </summary>
        </member>
        <member name="F:PMCLIB.SECTORSTATE.OPERATION">
            <summary>
            Sector in Operaation
            </summary>
        </member>
        <member name="T:PMCLIB.ZONEDEFINITION">
            <summary>
            Zone Definition
            </summary>
        </member>
        <member name="F:PMCLIB.ZONEDEFINITION.UNFENCED">
            <summary>
            Unfenced and Inner Boundary
            </summary>
        </member>
        <member name="F:PMCLIB.ZONEDEFINITION.USER_ZONE">
            <summary>
            User Defined Zone
            </summary>
        </member>
        <member name="F:PMCLIB.ZONEDEFINITION.AUTO_LOADING_ZONE">
            <summary>
            Auto Loading Zone
            </summary>
        </member>
        <member name="F:PMCLIB.ZONEDEFINITION.SECTOR_ZONE">
            <summary>
            Sector Zone
            </summary>
        </member>
        <member name="F:PMCLIB.ZONEDEFINITION.XBOT_ACCIDENT_ZONE">
            <summary>
            XBot Accident Zone
            </summary>
        </member>
        <member name="F:PMCLIB.ZONEDEFINITION.FLYWAY_ACCIDENT_ZONE">
            <summary>
            Flyway Accident Zone
            </summary>
        </member>
        <member name="F:PMCLIB.ZONEDEFINITION.DYNAMIC_FENCE">
            <summary>
            Dynamic Fence (Border/Routing/Rotation/XID Scan)
            </summary>
        </member>
        <member name="T:PMCLIB.SECTOROPERATION">
            <summary>
            sector operation performed by the sector Control command. 0 = Deactivate Sector, 1= Activate Sector
            </summary>
        </member>
        <member name="F:PMCLIB.SECTOROPERATION.DEACTIVATE_SECTOR">
            <summary>
            Deactivate the sector
            </summary>
        </member>
        <member name="F:PMCLIB.SECTOROPERATION.ACTIVATE_SECTOR">
            <summary>
            Activated the sector
            </summary>
        </member>
        <member name="T:PMCLIB.RECOVERXBOTOPTIONS">
            <summary>
            Options for the short axes position after recovering XBot
            </summary>
        </member>
        <member name="F:PMCLIB.RECOVERXBOTOPTIONS.DEFAULT">
            <summary>
            Levitates XBot to Default Short Axes Position
            </summary>
        </member>
        <member name="F:PMCLIB.RECOVERXBOTOPTIONS.RESUME_PREV_SHORT_AXES">
            <summary>
            Levitates XBot to Previous Short Axes Position 
            </summary>
        </member>
        <member name="T:PMCLIB.ASSIGNSTEREOTYPEOPTION">
            <summary>
            Options for the assign stereotype command
            </summary>
        </member>
        <member name="F:PMCLIB.ASSIGNSTEREOTYPEOPTION.IMMEDIATE">
            <summary>
            Assign stereotype immediately
            </summary>
        </member>
        <member name="F:PMCLIB.ASSIGNSTEREOTYPEOPTION.SENDTOBUFFER">
            <summary>
            Send assign stereotype command to the buffer
            </summary>
        </member>
        <member name="T:PMCLIB.JOGGINGOPERATION">
            <summary>
            Jogging operation performed by the Jogging Control Command. 0 = Turn Off, 1 = Turn On
            </summary>
        </member>
        <member name="F:PMCLIB.JOGGINGOPERATION.JOGGING_OFF">
            <summary>
            Turn off jogging
            </summary>
        </member>
        <member name="F:PMCLIB.JOGGINGOPERATION.JOGGING_ON">
            <summary>
            Turn on jogging
            </summary>
        </member>
        <member name="T:PMCLIB.SHORTAXIS">
            <summary>
            Short Axis
            </summary>
        </member>
        <member name="F:PMCLIB.SHORTAXIS.Z">
            <summary>
            Z Axis
            </summary>
        </member>
        <member name="F:PMCLIB.SHORTAXIS.RX">
            <summary>
            RX Axis
            </summary>
        </member>
        <member name="F:PMCLIB.SHORTAXIS.RY">
            <summary>
            RY Axis
            </summary>
        </member>
        <member name="F:PMCLIB.SHORTAXIS.RZ">
            <summary>
            RZ Axis
            </summary>
        </member>
        <member name="T:PMCLIB.LOGTYPE">
            <summary>
            Log Type (Warning or Error Log)
            </summary>
        </member>
        <member name="F:PMCLIB.LOGTYPE.ALL_LOG">
            <summary>
            Both warning and error logs
            </summary>
        </member>
        <member name="F:PMCLIB.LOGTYPE.WARNING_LOG">
            <summary>
            Warning log
            </summary>
        </member>
        <member name="F:PMCLIB.LOGTYPE.ERROR_LOG">
            <summary>
            Error log
            </summary>
        </member>
        <member name="T:PMCLIB.CLUSTERSEARCHMETHOD">
            <summary>
            Enum for HDMI connection path method
            </summary>
        </member>
        <member name="T:PMCLIB.COMPENSATIONTYPE">
            <summary>
            Enum for compensation type
            </summary>
        </member>
        <member name="F:PMCLIB.COMPENSATIONTYPE.SENSING_COMP">
            <summary>
            Sensor compensation
            </summary>
        </member>
        <member name="F:PMCLIB.COMPENSATIONTYPE.FORCE_COMP">
            <summary>
            Force compensation
            </summary>
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_RESET_TC">
            0: get simulation mode
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_REBOOT_PMC">
            1: reset tile controller error info.
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_RESET_SW">
            2(P): reboot PMC
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_PMC_STATUS">
            3: reset TMS software
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_TMS_STATUS">
            4: get current PMC status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_MACHINE_CONSTANT">
            5(P): get TMS status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_MACHINE_CONSTANT">
            6: set machine constant
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_INITIALIZE_TMS">
            7: set machine constant
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_PMC_2_SERVICE">
            8(P): initialize TMS 
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_TERMINATE_TMS">
            9: change PMC to state for firmware or AD updating
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_MASTERSHIP_CTRL">
            10(P): terminate TMS
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_PMC_VER">
            11: mastership control
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_ERR_CODE">
            12: get PMC version number
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_CONFIG_ABSOLUTE_ID">
            13(P): get PMC error code
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_ABSOLUTE_ID">
            14: configure absolute ID for each xbot
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_INI_XBOT_ORI">
            15: get absolute ID configuration
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_FLW_STANDBY_CTRL">
            16: Initialize xbot orientation before activation
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_RESET_CMD_EVENT">
            17(P): flyway standby control    
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_PMC_DYN_INFO">
            18: reset command event(s)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_FACTORY_PARAMS">
            19: get PMC dynamic info.(temperature/cpu usage)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_FACTORY_PARAMS">
            20: set factory parameters
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_FLW_TEMP">
            21: get factory parameters
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_USER_CALIB">
            22(P): get flyway power consumption and temperatures
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_USER_CALIB">
            23: set user calibration table
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_WARNING_CODE">
            24: get user calibration table
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_FLYWAY_ERR_CODE">
            25: get warning code
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_PMC_CTRL_SN">
            33: get flyway error code
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_FLW_SN">
            27(P): Get PMC controller Serial No.
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_ALL_MOVERS_POS_EX">
            28(P): Get individual flyway serial No.
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_ALL_MOVERS_POS">
            29: get 7DOF positions of all movers with XID scanning state
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_ALL_FLW_CONFIG">
            30: get 7DOF positions of all movers
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ZONE_DEFINE">
            31: get all flyway configurations
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ZONE_CONTROL">
            32: define zone dynamically
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_FENCE_CONTROL">
            33: zone control
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_ZONE_STATUS">
            34: zone fence control
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_OVERRIDE_ZONE">
            35: get zone status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ADD_DYN_FENCE">
            36(P): override zone speed and acceleration
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ZONE_SIM_CTRL">
            37: add dynamic fence
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ZONE_COL_CTRL">
            38: zone simulation control(0--add xbots;1--remove xbots)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_RESET_DYN_FENCE">
            39(P): zone collision control(0--enable collision check;1--disable collision check)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ZONE_RESERVED5">
            40: reset dynamic fence
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ZONE_RESERVED6">
            41: define 3D zone
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_PMC_BD_STATUS">
            42: command reserved for zone
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_NEW_XBOT_INFO">
            43(P): get PMC border status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_BORDER_CTRL">
            44(P): get incoming xbot info
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_XBOT_LABEL">
            45: turn on/off border
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_XBOT_LABEL">
            46: get xbot label
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_LOCAL_ID">
            47: set xbot label
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_BORDER_RESERVED5">
            48: get xbot local ID (realtime or absolute) from xbot label
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_BORDER_RESERVED6">
            49: command reserved for border
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_PROVINCE_CTRL">
            50: command reserved for border
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_PROVINCE_RECOVER">
            51: province control: 0---deactivate province; 1---activate province
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_PROVINCE_STATUS">
            52: remove all fences from province flyways
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_PROVINCE_RESERVED3">
            53: get province status	
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_PROVINCE_RESERVED4">
            54: command reserved for province
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_PROVINCE_RESERVED5">
            55: command reserved for province
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_PROVINCE_RESERVED6">
            56: command reserved for province
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_DIAG_FLW_LINK">
            57: command reserved for province
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_DIAG_HARDWARE">
            58: Check Flyway connections
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_DIAG_HARDWARE_INFO">
            59: Check Hardware
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_DIAG_FLW_LINK_INFO">
            60: command reserved for diagnosis
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_XID_RESET_XIDS">
            61: command reserved for diagnosis
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_XID_START_AUTO_SCAN">
            62: Reset stored RFID to XID table
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_XID_CREATE_STATION">
            63: start automated xid scanning
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_XID_STATION_CTRL">
            64: create xid scanning station
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_XID_GET_STATION_STATUS">
            65: control xid scanning station (start, stop, delete)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_XID_GET_SCAN_LOC">
            66: get xid station s tatus
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_XID_MAN_SINGLE_SCAN">
            67: get closest scanning location
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_XID_SET_FROM_KEY">
            68: manually scan this mover
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_XID_GET_XBOT_SCAN_STATUS">
            69: set RFID for movers
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_XID_GET_XBOT_RIFD">
            70: get the scan status for mover(s)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_SYS_TIME">
            71: get mover RFID tags
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_SYS_TIME">
            72: Get system time	
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_TIME_RESERVED">
            73(P): Set system time (RESERVED NOT IMPLEMENTED)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_XID_RECOVER_AFTER_ERROR">
            76: Get auto xid scan status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_XID_RESERVED2">
            77: Recover xbot ID after flyway error
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_COMP_RESERVED1">
            82: Check mover compensation status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_COMP_RESERVED2">
            83
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_COMP_RESERVED3">
            84
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_MAX_EXTERNAL_COMMAND_ID">
            85
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ZONE_DETECTION">
            0: get zone state
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ACTIVATE_ZONE">
            1: turn on/off zone detection
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_ZONE_INFO">
            2: enable movers inside the zone with current array mode
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_ZONE_STATUS_EX">
            3: get actual boundary of zone
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_MG_STATUS">
            4: get zone status extend
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_RESET_FATAL_ERR_CNT">
            5: get mover group status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_READ_FATAL_ERR_CNT">
            6: reset fatal error counter
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_ZONE_DETECT_ID">
            7: read fatal error counter
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_START_MOTION">
            8: set the xbot ID to be assigned to the new detected mover in zone
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_START_JOGGING">
            9: start single mover motion
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_RESET_MOVER">
            10: start single mover jogging
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_LOOP_CONTROL">
            11: reset mover to IDLE
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ACTIVATE_SELFTRACK">
            12: individually control the loop 
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_MOVER_STATUS">
            13: activate self-tracking
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_ARRAY_POS">
            14: get mover status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_DEFINE_TRACE">
            15: get array position of xbot
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GENERATE_SW_TRIGGER">
            16: define trace
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_STOP_TRACE">
            17: generate software trigger
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_DEALLOCATE_TRACE">
            18: stop trace
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_STOP_AND_DEALLOCATE_ALL_TRACES">
            19: deallocate trace
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_NBR_FREE_TRACE">
            20: deallocate all traces
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_TRACE">
            21: get free number of trace
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_CHECK_TRACE_STATE">
            22: get trace data
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_START_READ_ALL_HES">
            23: check trace state
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_HES_BUF_STATUS">
            24: start reading all hall sensors from tiles (obsolete)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_HES_FROM_TILE">
            25: get hall sensor buffer status (obsolete)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ACTIVATE_EXT_HES">
            26: get hall sensor from one tile (obsolete)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_TRIGGER_TEST_FIFO">
            27: activate tile monitor
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_DCTM_STATUS">
            28: trigger test fifo reading
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_FLYWAY_INFO">
            29: get tile monitor status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_EXT_HES">
            30: get info. of single flyway or all flyways
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_FLYWAY_VER">
            31: get extended hall effect sensor
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_FLYWAY_STATUS">
            32: get flyway version: serial number/firmware version/data version
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_CONFIG_TILE_INPUT">
            33: get tile controller status (error info.)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_READ_TILE_INPUT">
            34: Configure tile input address
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_WRITE_TILE_OUTPUT">
            35: Read tile input
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_CUR_MODE_CTRL">
            36: Write tile input	
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_OUTPUT_CURRENT">
            37: current mode control
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_START_CSC">
            38: output current to specific coil group of one tile
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_CSC_STATUS">
            39: start current sensitivity calibration
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_CSC_RESULT">
            40: Get CSC status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ACTIVATE_WFLASH">
            41: get hall sensor values of single flyway
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ACTIVATE_RFLASH">
            42: activate flash writing operation
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_FLASH_DATA">
            43: activate flash reading operation    
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_TRIGGER_AUTO_CALIB">
            44: get flash data   
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_AITC_STATUS">
            45: trigger HES or Current auto-calibration
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_REBOOT_FLYWAY">
            46: Get tile control module status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ACTIVATE_WFIRMW">
            47: reboot flyway
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ACTIVATE_RFIRMW">
            48: activate firmware writing operation
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ACTIVATE_TCINFO">
            49: activate firmware reading operation
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_TCINFO_STATUS">
            50: activate TC snapshot FIFO reading operation
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_TCINFO_DATA">
            51: get TC snapshot FIFO reading status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ACTIVATE_XIDRD">
            52: get TC snapshot FIFO data    
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_XIDRD_STATUS">
            53: activate XID reading operation
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_XID_RESULT">
            54: get XID reading status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_START_DSA">
            55: get XID result
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_STOP_DSA">
            56: start dynamic signal analysis
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_DSA_STATUS">
            57: stop dynamic signal analysis
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_DSA_RESULTS">
            58: Get DSA status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_TRIGGER_FLWSCAN">
            59: Get DSA outputs
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_FLW_COM_CNT">
            60: manally trigger snapshot
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_RESET_FLW_COM_CNT">
            61: get all flyway communication counters
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_FIELD_BUS_SETTINGS">
            62: reset all flyway communication counters
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_READ_CMD_LOG">
            63: Get field bus settings  
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_FIELDBUS_SIM_MODE">
            64: manally trigger command log
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_FIELDBUS_SNAPSHOT_CTRL">
            65: fieldbus simulation mode(0--OFF;1--ON) control
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ROTATION_MODE_SWITCH">
            66: fieldbus snapshot control(0--disable;1---enable)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_PMNET_COM_CNT">
            67: switch between rotation and regular modes (internal test only)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_FDEBUG_INFO">
            68: get PMNet communication counters
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_MAGNETID_DIAG_START">
            69: get flyway debug info
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_MAGNETID_DIAG_STATUS">
            128: Begin Magnet ID diagnostic discovery
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_MAGNETID_DIAG_RESULT">
            129: Query Magnet ID diagnostics status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_LICENSE_CONTROL">
            130: Obtain Magnet ID Diagnostic discovery result
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_DNA_CODE">
            0: activate/deactivate license 
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_BLOCK_FIELD_BUS">
            1: get DNA code from TMS
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_CHECK_FB_STATUS">
            2: block field bus command
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_TMS_ZSTATE">
            3: check field bus master status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_ALL_MOVERS_INFO">
            4: get TMS global zone state
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_CONFIG_CMD_EVENT">
            5: get all mover info. including XID and associated pre-defined XID zone
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_XBOT_ROT_OL">
            6: configure command event from PM
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_XBOT_FORCE_OL">
            7: xbot full rotation in open loop mode
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_PMC_PROG_CTRL">
            8: xbot open loop force control
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_ABSOLUTE_ID">
            9: PMC program mode control
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_LOCK_XBOT_FEEDBACK">
            10: set absolute IDs of xbots to BM 
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_NC_MACHINE_CONSTANT">
            11: lock xbot feedback during XID scan
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_XBOT_EDOCUMENT">
            12: set non-configurable machine constant during bootup
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_HIGH_PERF_COMP">
            13: set XBOT Edocument during bootup
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_UPDATE_HIGH_PERF_COMP">
            14: set high performance compensation table during bootup
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_CMD_EVENT">
            15: update single high performance compensation table during calibration
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_SIGNATURE">
            16: Set command event from PM
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_ERR_INFO">
            17: Get signature from BM to sync. PM and TMS
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_FB_SNAPSHOT">
            18: Get internal error/warning info
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_HES_FROM_ALL_FLW">
            19: Get fieldbus snapshot	
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_HES_FROM_ZONE">
            20: Get hall effect sensors from all flyways
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_CONFIG_DFT_LVT_POS">
            21: Get hall effect sensors from specific zone
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_UNKNOWN_XBOT_CTRL">
            22: Configure xbot default levitation height for accident recovery
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_MOVER_COMP">
            23: unknown xbot control
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_UPDATE_MOVER_COMP">
            24: set mover compensation coeficients during bootup
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_MOVER_COMP">
            25: update single mover compensation coeficient after calibration
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_RESERVED">
            26: get single mover compensation coeficients if required
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_XBOT_MLINK">
            27: reset command event(s)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_GAP_COMP">
            28: Set xbot machanical link map
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_XBOT_ID_SNAPSHOT">
            29: Set all gap compensation tables
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_GRID_COMP">
            30: get xbot ID snapshot	
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_GRID_COMP">
            31: Set 2D Grid compensation table
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_LICENSE_INFO">
            32: Get 2D Grid compensation table
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_PMC_IP_ADDR">
            0: get license info from PM
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_READ_ERR_LOG">
            1: set PMC IP Address
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_CLEAR_ERR_LOG">
            2: read error log file from PMC
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_UPDATE_LICENSE_FILE">
            3: clear error log file
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_BLOCK_APP_GATEWAY">
            4: update license file
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_READ_WARNING_LOG">
            5: block/unblock APP gateway
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_ACTIVATE_TM4A_AM4A_PARAMETERS">
            6:read warning log file
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_READ_UCMCS_DES_FILE">
            7:???
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_READ_FCMCS_DES_FILE">
            8:read user configuration description file
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_CONFIG_PMC_IP">
            9:read factory configuration description file
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_READ_PMC_IP_INFO">
            10: config PMC IP : Address/netmask/gateway
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_UCMCS_XML">
            11: read PMC IP info: Address/netmask/gateway
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_UCMCS_XML">
            12: Set user configurable MCS description file
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_EDIT_TRAJ">
            13: Get user configurable MCS description file
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_READ_TRAJ">
            14: save/delete user configurable trajectory file 
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_EDIT_CAM">
            15: read user configurable trajectory file 
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_READ_CAM">
            16: save/delete user configurable cam file 
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_EDIT_GCODE">
            17: read user configurable cam file 
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_READ_GCODE">
            18: save/delete user configurable gcode file 
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_GCODE_INFO">
            19: read user configurable gcode file
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_WRITE_HIGH_PERF_COMP">
            20: read gcode info
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_DELETE_HIGH_PERF_COMP">
            21: write high performance compensation(update table after calibration)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_READ_HIGH_PERF_COMP">
            22: delete high performance compensation(update table before calibration)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_FIELDBUS_FRAME_UPDATE">
            23: read high performance compensation(query info before calibration)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_FIELDBUS_SNAPSHOT_STA">
            24: fieldbus frame update via TCP/IP
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_WIRING_INFORMATION">
            25: get fieldbus snapshot status
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_DELETE_SNAPSHOTS_ALL">
            26: get wiring information (flyway connection)
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_HDMI_CONN_PATH">
            27: delete all snapshots
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_HDMI_CONN_PATH">
            28: set hdmi connection path
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_GET_CTRL_WORD">
            29: get hdmi connection path
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_FC_TM4A_SET_CTRL_WORD">
            30: get flyway control word
        </member>
        <member name="F:PMCLIB.TM4ACmdID.TMXI_MAX_FUNCTION_COMMAND_ID">
            31: set flyway control word
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_MACHINE_CONSTANT">
            1: set machine constant (abandoned)
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_CARRIER_INPUT_REQ">
            2: upload machine constant(abandoned)
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_CARRIER_OUTPUT_REQ">
            3: send request to PMC for loading carrier
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_RELEASE_WS">
            4: send request to PMC for unloading carrier
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_WS_STATUS">
            5: release specific station
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_ACTIVATE_TRAJECTORY">
            6: get work station status
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_LINEAR_MOTION">
            7(P): Start all pre-defined master axes or activate master axes stream
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SHORT_AXIS_MOTION">
            8(P): Move one carrier from current location to new location in plane
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_CIRCLE_MOVE">
            9(P): Move all short axes(Z/Rx/RY/RZ) of one carrier from current location to new location independently
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_STOP_CARRIER">
            10(P): Move one carrier from current location to new location along circular curve
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_FB_STREAM_CONTROL">
            11(P): Stop carrier inside specific work station
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_LANDING_CONTROL">
            12(P): feedback stream control 
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_REF_STREAM_CONTROL">
            13(P): activate landing or launching of  carriers
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_CARRIER_STATUS">
            14(P): reference stream control
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_6DOF_MOTION">
            15(P): get carrier status
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_FORCE_MODE_CONTROL">
            16(P): 6DOF motion incoordinated
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_CAM_CONTROL">
            17(P): force mode control in arbitory direction 
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SYN_MOTION">
            18(P): enable or disable cam motion   
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_ASYN_MOTION">
            19(P): multiple XBOT synchronized motion
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_MOTION_BUFFER_CTRL">
            20(P): multiple XBOT asynchronized motion
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_XBOT_GROUP_CTRL">
            21(P): motion buffer control
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_MOTION_MACRO_CTRL">
            22(P): xbot group control
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_RUN_MACRO_MOTION">
            23(P): motion macro control
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_WAIT_UNTIL">
            24(P): run motion macro motion
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_JOGGING_CONTROL">
            25(P): xbot wait until
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_CONFIG_DIGITAL_OUTPUT">
            26(P): activate jogging motion of  carriers
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_CONFIG_DIGITAL_INPUT">
            27(P): configure digital output
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_WRITE_XBOT_SETTINGS">
            28(P): configure digital input
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_READ_XBOT_SETTINGS">
            29(P): write xbot settings
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_PLANET_MOTION_CTRL">
            30(P)  read xbot settings
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_XBOT_PAYLOAD">
            31(P)  planet motion control
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_MOTION_INTERRUPT_CTRL">
            32(P)  weighning function
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_MOBILITY_CONTROL">
            33(P)  pause/resume motion
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_6DOF_MOTION_VEL">
            34(P)  control mobility level of mover(s)
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_DEFINE_STEREOTYPE">
            35(P): 6DOF motion with acc and vel definition
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_READ_STEREOTYPE">
            36(P): define stereotype
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_ASSIGN_STEREOTYPE_2_XBOT">
            37(P): read stereotype
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_CAM_CONTROL_EX">
            38(P): assign a stereotype to a xbot
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_AUTO_DRIVING">
            39(P): enable or disable cam motion with master offset definition
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_INJECT_NOISE_2_XBOT">
            40(P): intelligent routing with speed and acc. inputs
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SET_MT_OVERRIDE">
            41: inject noise to specific axes of xbot
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_LINEAR_MOTION_CALIB">
            42: override velocity and acceleration of active motion
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_LINEAR_MOTION_AXIS">
            43(P): linear motion with user position compensation
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_RUN_GCODE_MOTION">
            44: single axis linear motion
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_REMOVE_ACCIDENT_XBOT">
            45: run gcode motion(linked to configurable macro)
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_ALL_ACCIDENT_XBOTS">
            46: remove one or all accident xbots
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_ACCIDENT_SITE">
            47: get all accident xbots
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_ELLIPTICAL_MOTION">
            48: get accident site info
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_FB_STREAM_CONTROL_EX">
            49: elliptical motion
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_ROTARY_MOTION_P2P">
            50(P): feedback stream control extended
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_ROTARY_MOTION_SPIN">
            51: P2P rotary motion 
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_XBOT_PAYLOAD_EX">
            52: spin rotary motion
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SYNC_MOTION_BUFFER">
            53(P): extended xbot weighing command
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SET_JERK_LIMIT">
            54: synchronize buffer
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_LINEAR_MOTION_HPERF">
            55: set jerk limit for specific xbot and axis
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_VIRTUAL_XBOT_CTRL">
            56: linear motion with both sensing and force compensation
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_TARE_XBOT_PAYLOAD">
            57: Initialize virtual xbot position or add/remove to/from fieldbus
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SYN_6D_MOTION">
            58(P): tare xbot weighing to 0
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_READ_EXT_DI">
            59: multiple XBOT synchronized 6D motion
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_WRITE_EXT_DO">
            60: read external digital input
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_6DOF_MOTION_COMP">
            61: write external digital output
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_LINEAR_MOTION_AXIS_COMP">
            62: compensated 6DOF motion
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_FORCE_MODE_CONTROL_EX">
            63: compensated single axes motion
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_CONFIG_DIGITAL_INPUT_EX">
            64: customized force mode
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_CAM_CONTROL_BF">
            65: configure digital input extended
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_INJECT_DELAY_NOISE_2_XBOT">
            66: add cam motion to buffer or macro
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GROUP_SINGLE_MOTION">
            67: inject noise with delay
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_AUTO_DRIVING_W_OVRHNG">
            68: group xbots, send linear motion, and ungroup xbots
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_STAR_STATUS">
            69: intelligent routing with speed, acc, and overhang inputs
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_STAR_ID">
            70: get all planet xbots of given star xbot 
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_STEREOTYPE_ADD_BOUNDARY">
            71: get an xbots paired star ID
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_STEREOTYPE_DELETE_BOUNDARY">
            72: add z-defined part to stereotype
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_STEREOTYPE_READ_BOUNDARY">
            73: remove all z-defined parts from stereotype
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_QUEUE_BUFFER_CTRL">
            74: get all boundaries/parts from stereotype
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SEND_XBOT_TO_QUEUE">
            0: Queue Buffer control
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_RELEASE_QUEUE_EXIT">
            1: Add xbot to queue
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_QUEUE_STATUS">
            2: release queue exit
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_QUEUE_INFO">
            3: Get Queue status
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_QUEUE_RESERVED1">
            4: Get Queue info
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_AUTO_LZONE_CTRL">
            5: reserved for queue
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SEND_XBOT_TO_ALZONE">
            6: Auto-loading zone control
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_RELEASE_ALZONE_EXIT">
            7: Add xbot to auto-loading zone
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_ALZONE_STATUS">
            8: release auto-loading zone exit
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_ALZONE_INFO">
            9: Get Auto-loading zone status
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_ALZONE_RESERVED1">
            10: Get Auto-loading zone info
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_ROAD_TRAFFIC_CTRL">
            11: reserved for auto-loading zone
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_CONFIG_ROAD_SPACE">
            12: Auto-loading zone control
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SEND_XBOT_TO_ROAD">
            13: configure road entrances or exits
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_RELEASE_ROAD_EXIT">
            14: Send xbot to road
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_ROAD_SPACE_STATUS">
            15: release road exit
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_ROAD_INFO">
            15: Get road space status
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_ROAD_RESERVED1">
            17: Get road traffic info
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_STAR_WHEEL_CTRL">
            18: reserved for road traffic
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_WHEEL_STATUS">
            19: star wheel control
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_RELEASE_WHEEL_EXIT">
            20: Get star wheel status
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SEND_XBOT_TO_WHEEL">
            21: release star wheel exit	
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_WHEEL_INFO">
            22: send xbot to star wheel	
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_WHEEL_RESERVED1">
            23: Get start wheel info
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_PMC_FUNC_CTRL">
            24: reserved for star wheel
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_RUN_PMC_FUNC">
            25: setup/save/delete a PMC function
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_QUERY_FUNC_INFO">
            26: run PMC function
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_UNDO_FUNC_CMDS">
            27: query PMC function status
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_PMC_FUNC_RESERVED1">
            28: undo commands added to function(from the end of list)
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_PMC_FUNC_RESERVED2">
            29: reserved for function
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_IR_STATUS">
            30: reserved for function
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_IR_RESERVED1">
            31: Get Intelligent routing status
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_IR_RESERVED2">
            32: reserved for IR
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_IR_RESERVED3">
            33: reserved for IR
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SAVE_DESIGN_TO_PMC">
            34: reserved for IR
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_DESIGN_FROM_PMC">
            35: save configuration to PMC
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_ACTIVATE_DESIGN">
            36: get configuration from PMC
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_ACTIVE_DESIGN_ID">
            37: activate design
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SEND_XBOT_TO_STATION">
            38: reserved, may be changed
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SEND_XBOTS_TO_STATION">
            39: send xbot to station
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_IS_BAY_OCCUPIED">
            40: reserved, need to decide buffer format first
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_IS_BAY_AVAILABLE">
            41: reserved, may be changed
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_IS_STATION_FULL">
            42: reserved, may be changed
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_IS_STATION_AVAILABLE">
            43: reserved, may be changed
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_BAY_XBOT_ID">
            44: reserved, may be changed
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_BAY_ARRIVED_XBOT_ID">
            45: get bay xbot ID
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_XBOT_TARGET_STATION">
            46: reserved, may be changed
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_STATION_XBOT_IDS">
            47: get xbot target station
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_ALL_STATION_XBOT_IDS">
            48: get station xbot IDs
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_AMTS_RESERVED1">
            49: get all station xbot IDs
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_AMTS_RESERVED2">
            50: reserved for Application Designer
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_AMTS_RESERVED3">
            51: reserved for Application Designer
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_AMTS_RESERVED4">
            52: reserved for Application Designer
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_AMTS_RESERVED5">
            53: reserved for Application Designer
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_AMTS_RESERVED6">
            54: reserved for Application Designer
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_LOAD_PART_TO_XBOT">
            55: reserved for Application Designer
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_UNLOAD_PART_FROM_XBOT">
            0: load part to Xbot
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_LOAD_PART_TO_WS">
            1: unload part from Xbot
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_UNLOAD_PART_FROM_WS">
            2: load part to WS
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_PART_RESERVED1">
            3: unload part from WS
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_PART_RESERVED2">
            4: reserved for part
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_PART_RESERVED3">
            5: reserved for part
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_PART_RESERVED4">
            6: reserved for part
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_PART_RESERVED5">
            7: reserved for part
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_PART_RESERVED6">
            8: add xbots to zone
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_LINKED_MOVER_DEFINE">
            9: remove xbots from zone
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_LINKED_MOVER_CAM_EDIT">
            10: Define linked mover
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_LINKED_MOVER_ASSIGN">
            11: Edit linked mover CAM information
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_LINKED_MOVER_GET_ALL_INST">
            12: Assign linked mover status to movers
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_MAX_EXTERNAL_COMMAND_ID">
            18: Get spaced apart mover position
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_READ_XBOT_EDOC">
            0: update xbot E-Document
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_ACTIVATE_DEMO">
            1  read xbot E-Document	
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_DEMO_INFO">
            2: activate demo trajectory
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_DB_STATUS">
            3: get demo trajectory info.
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_DOWNLOAD_TRAJ">
            4: get double buffer status
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_START_TRAJ">
            5: download trajectory
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_STOP_TRAJ">
            6: start pre-compiled trajectory
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_PAUSE_TRAJ">
            7: stop pre-compiled trajectory
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_RESUME_TRAJ">
            8: pause pre-compiled trajectory
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_DEFINE_TRACE">
            9: resume pre-compiled trajectory	
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GENERATE_SW_TRIGGER">
            10: define trace
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_STOP_TRACE">
            11: generate software trigger
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_DEALLOCATE_TRACE">
            12: stop trace
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_STOP_AND_DEALLOCATE_ALL_TRACES">
            13: deallocate trace
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_NBR_FREE_TRACE">
            14: deallocate all traces
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_TRACE">
            15: get free number of trace
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_CHECK_TRACE_STATE">
            16: get trace data
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_INTERRUPT_MOTION">
            17: check trace state
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_XBOT_LOCK_CTRL">
            18: Move one carrier from current location to new location in plane
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_XBOT_LOCK">
            19: xbot lock control for PM aplications
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_XBOT_STATUS">
            20: Get xbot lock 
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_NBUF_LINEAR_P2P">
            21: Get internal xbot status
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_NBUF_SHORT_MOTION">
            22: non-bufferable linear P2P motion command
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SET_ASYNC_INFO">
            23: non-bufferable short axis motion command
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_RESET_ASYNC_STATE">
            24: synchronize intelligent routing state with TMS for buffer management
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_ARRAY_MODE_CONTROL">
            25: reset async. routing
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_BOUNDARY_CONTROL">
            26: 	array mode control
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_IR_VARS">
            27: boundary control
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_ABORT_MOTION">
            28: get intelligent routing variables
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SET_CONFIG_MACRO">
            29: abort current motion(linear P2P and arc P2P only)
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_ADD_CAM_TRAJ">
            30: update configurable macro
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_ALL_XBOT_STATUS">
            31: add volatile cam trajectory
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_INJECT_TRACK_ERR_2_XBOT">
            32: get all xbot status
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_ADD_USER_INFO_2_XBOT">
            33: inject tracking error to specific xbot
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_READ_XBOT_MOTION_BUF">
            34: add user info to xbot
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_ALL_BOUNDARIES">
            35: read xbot motion in real time buffer (after macro decoding)
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SET_XBOT_MLINK">
            36: get all boundaries including inner boundaries and fenced boundaries
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_GET_XBOT_ACCIDENT_INFO">
            37: Set xbot machanical link map	
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_DOWNLOAD_MEM_4_DEBUG">
            38: Get accident xbot info
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_ZONE_ACTIVATION_STEP">
            39: download local memory for debugging
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_FC_AM4A_SECTOR_ACTIVATION_STEP">
            40: zone activaiton step by step
        </member>
        <member name="F:PMCLIB.AM4ACmdID.AMXI_MAX_FUNCTION_COMMAND_ID">
            41: sector activaiton step by step
        </member>
        <member name="T:PMCLIB.ISystemCommands">
            <summary>
            interface for system commands
            </summary>
        </member>
        <member name="M:PMCLIB.ISystemCommands.AutoSearchAndConnectToPMC">
            <summary>
            automatically searches for and connects to an available PMC
            </summary>
            <returns>true if connection successful, false if connection failed</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.CheckTCPConnection">
            <summary>
            Check if the TCP connection to the PMC is up
            </summary>
            <returns>true if connection is available, false if PMC is disconnected</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.DisconnectFromPMC">
            <summary>
            Disconnect the computer from the PMC
            </summary>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GainMastership">
            <summary>
            Attempts to gain mastership of the PMC
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.ReleaseMastership">
            <summary>
            Release mastership of the PMC
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.IsMaster">
            <summary>
            check whether current host is the master of the PMC
            </summary>
            <returns>true if is master, false if is not master</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetPMCStatus">
            <summary>
            Gets the status of the PMC
            </summary>
            <returns>current PMC state</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetPMNetStatus">
            <summary>
            Gets the status of PMNet
            </summary>
            <returns>true if PMNet is ok, false if PMNet disconnected</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.RebootPMC(System.Int32)">
            <summary>
            Reboot the PMC
            </summary>
            <param name="mode">
            Reboot mode:
            - 0 (Cold Reboot): Reboots both PMC and Fieldbus Communication.
            - 1 (Warm Reboot): Reboots only the PMC, without affecting Fieldbus Communication.
            </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetFlywayPhysicalStatus(System.Int32)">
            <summary>
            get the flyway physical status including power consumption, and various temperature measurements
            </summary>
            <param name="flywayID">flyway id</param>
            <returns>the full physical status of the flyway</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetNewXbotsFromBorder">
            <summary>
            get a list of xbots that were received at PMC flyway border
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetBorderStatus(System.Int32)">
            <summary>
            get the status of the border between PMC systems
            </summary>
            <param name="borderID"> the border ID</param>
            <returns> A struct containing the status of the border</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetAllGCodeIDs">
            <summary>
            Gets the ID of all g-code files stored in the PMC
            </summary>
            <returns> A struct containing all g-code ID information </returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.ReadGCode(System.Int32)">
            <summary>
            Read the g-code text for the specified g-code ID
            </summary>
            <param name="gcodeID"> The g-code ID to read from </param>
            <returns> A struct containing the g-code text </returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.SaveGCode(System.Int32,System.String)">
            <summary>
            Saves the g-code to the PMC with the associated g-code ID
            </summary>
            <param name="gcodeID"> The ID to save the g-code at </param>
            <param name="gcodeText"> The g-code text to save </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.DeleteGCode(System.Int32)">
            <summary>
            Deletes the g-code with the associated g-code ID
            </summary>
            <param name="gcodeID"> The ID of the g-code to delete </param>
            <returns> PMC return indicating whether command is successful </returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.ZoneControl(System.Int32,PMCLIB.ZONEOPERATION)">
            <summary>
            control the zone
            </summary>
            <param name="zoneID">Zone ID</param>
            <param name="zoneOp">Zone Operation, 0 = deactivate zone, 1 = activate zone</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.AddXBotsToZone(System.Int32,PMCLIB.XBOTTYPE[],System.Double[],System.Double[])">
            <summary>
            Adds XBots to the zone in emulation mode
            </summary>
            <param name="zoneID"> The ID of the zone to add XBots to </param>
            <param name="xbotTypes"> An array containing the types of the XBot to add </param>
            <param name="xPositionM"> An array containing the X starting position of the XBots in m </param>
            <param name="yPositionM"> An array containing the Y starting position of the XBots in m </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.RemoveXBotsFromZone(System.Int32)">
            <summary>
            Removes all the XBots inside a zone in emulation mode
            </summary>
            <param name="zoneID"> The ID of the zone to remove XBots from</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.DefineZone(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Defines a custom zone region
            </summary>
            <param name="zoneID"> The ID of the zone to be defined </param>
            <param name="minXM"> The X co-ordinate lower bounds of the zone in m </param>
            <param name="minYM"> The Y co-ordinate lower bounds of the zone in m </param>
            <param name="maxXM"> The X co-ordinate upper bounds of the zone in m </param>
            <param name="maxYM"> The Y co-ordinate upper bounds of the zone in m </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.DefineIntersectionZone(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Defines an intersection zone region
            </summary>
            <param name="zoneID"> The ID of the zone to be defined </param>
            <param name="minXM"> The X co-ordinate lower bounds of the zone in m </param>
            <param name="minYM"> The Y co-ordinate lower bounds of the zone in m </param>
            <param name="maxXM"> The X co-ordinate upper bounds of the zone in m </param>
            <param name="maxYM"> The Y co-ordinate upper bounds of the zone in m </param>
            <param name="maxNumberOfXBot">Specifies maximum number of XBots allowed inside the zone</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.DefineZLimitedIntersectionZone(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Define a specialize zone, where only the user specified number of mover with Z height less than the Z Limit are allowed to move inside the zone at a time.
            </summary>
            <param name="zoneID"> The ID of the zone to be defined </param>
            <param name="minXM"> The X co-ordinate lower bounds of the zone in m </param>
            <param name="minYM"> The Y co-ordinate lower bounds of the zone in m </param>
            <param name="maxXM"> The X co-ordinate upper bounds of the zone in m </param>
            <param name="maxYM"> The Y co-ordinate upper bounds of the zone in m </param>
            <param name="zLimitM"> The Z limit for the zone in m. Xbots with or higher Z Height of the limit cannot enter the zone.</param>
            <param name="maxNumberOfXBot">Specifies maximum number of XBots allowed inside the zone</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.OverrideZone(System.Int32,System.Double,System.Double)">
            <summary>
            Override the velocity and acceleration inside of a zone
            </summary>
            <param name="zoneID"> The ID of the zone to override </param>
            <param name="velocityFactor"> The factor that will be multiplied to XBot velocity inside the zone </param>
            <param name="accelFactor"> The factor that will be multiplied to the XBot acceleration inside the zone </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.ZoneFenceControl(System.Int32,PMCLIB.FENCEOPERATION)">
            <summary>
            control the zone fence
            </summary>
            <param name="zoneID">Zone ID</param>
            <param name="fenceOp">Zone Operation, 0 = remove the fence, 1 = build the fence</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetZoneStatus(System.Int32)">
            <summary>
            returns the zone state and the list of XBots inside the zone
            </summary>
            <param name="zoneID">zone id</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.SavePMCConfigXMLFile(System.String)">
            <summary>
            saves the current PMC configuration to a xml file at the specified path
            </summary>
            <param name="path">the path to save the configuration file to</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.EnterServiceMode">
            <summary>
            Enters PMC Service Mode
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.ExitServiceMode">
            <summary>
            Exits PMC Service Mode
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.SectorControl(System.Int32,PMCLIB.SECTOROPERATION)">
            <summary>
            activate/deactivate specific sector
            </summary>
            <param name="sectorID"> sector ID(>0) </param>
            <param name="sectorOperation"> sector control level, 0 = deactivate sector, 1 = activate sector </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.SectorRecover(System.Int32)">
            <summary>
            remove sector fences after it's activated
            </summary>
            <param name="sectorID"> sector ID(>0) </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetSectorStatus(System.Int32)">
            <summary>
            returns the sector state and the list of XBots inside the sector
            </summary>
            <param name="sectorID">sector ID</param>
            <returns>Object that has the sector status information</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.ReadExternalDigitalInput">
            <summary>
            Reads the external signal from the PMC
            </summary>
            <returns>Signal and command's return. Signal: HIGH = true, LOW = false</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.WriteExternalDigitalOutput(System.Boolean)">
            <summary>
            Writes the external signal to the PMC
            </summary>
            <param name="signal">Digital Signal HIGH = true, LOW = false)</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetPMCTime">
            <summary>
            Gets the current PMC time
            </summary>
            <returns>PMC Time as a DateTime object and command's return</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.SetPMCTime(System.DateTime)">
            <summary>
            Sets the current PMC Time
            </summary>
            <param name="time">Desired PMC Time as a Date Time Object. Year, Month, Day, Hour, Minute and Second</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.ResetXbotIDs">
            <summary>
            Resets scanned Xbot IDs
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.DeleteLogInfo(PMCLIB.LOGTYPE)">
            <summary>
            Deletes the content of log files (Warning log and error log)
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.SaveDesignFileToPC(System.Int32,System.String)">
            <summary>
            Save a design file to PC
            </summary>
            <param name="designID">design ID stored on the PMC, currently only designID == 1 supported</param>
            <param name="filePath">path to file including file name and format (.json)</param>
            <returns>PMCRTN</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.SendXbotToStation(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Send a xbot to a station
            </summary>
            <param name="cmdLabel">command label</param>
            <param name="xbotID">xbot ID</param>
            <param name="stationID">station ID</param>
            <param name="bayID">bay ID, if 0 then the PMC will pick the bay</param>
            <param name="waitForFreeBay">whether to wait for a free bay before moving</param>
            <returns>PMCRTN</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.SendXbotToStation(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Send a xbot to a station
            </summary>
            <param name="cmdLabel">command label</param>
            <param name="xbotID">xbot ID</param>
            <param name="stationID">station ID</param>
            <param name="bayID">bay ID, if 0 then the PMC will pick the bay</param>
            <param name="finalSpeedMetersPs">Final speed, in m/s</param>
            <param name="maxSpeedMetersPs">Max speed, in m/s</param>
            <param name="maxAccelerationMetersPs2">Max acceleration, in m/s^2</param>
            <param name="waitForFreeBay">whether to wait for a free bay before moving</param>
            <returns>PMCRTN</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetIdleXbotIdInBay(System.Int32,System.Int32)">
            <summary>
            Get the xbot ID currently in a bay, if it is idle
            </summary>
            <param name="stationID">station ID</param>
            <param name="bayID">bay ID</param>
            <returns>BayXbotId struct</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetAnyXbotIdInBay(System.Int32,System.Int32)">
            <summary>
            Get the xbot ID currently in a station (any xbot state)
            </summary>
            <param name="stationID">station ID</param>
            <param name="bayID">bay ID</param>
            <returns>BayXbotId struct</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetXbotIdInBay(System.Int32,System.Int32,PMCLIB.XBOTSTATE[])">
            <summary>
            Get the xbot ID currently in a station that has any of the specified xbot states
            </summary>
            <param name="stationID">station ID</param>
            <param name="bayID">bay ID</param>
            <param name="filterStates">filter for xbot states the xbot can be in</param>
            <returns>BayXbotId struct</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetIdleXbotIdsInStation(System.Int32)">
            <summary>
            Get all idle xbot IDs currently in the station
            </summary>
            <param name="stationID">station ID</param>
            <returns>StationXbotIds struct</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetAnyXbotIdsInStation(System.Int32)">
            <summary>
            Get xbot IDs currently in the station (any xbot state)
            </summary>
            <param name="stationID">station ID</param>
            <returns>StationXbotIds struct</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetXbotIdsInStation(System.Int32,PMCLIB.XBOTSTATE[])">
            <summary>
            Get the xbot IDs currently in the station that have any of the specified xbot states
            </summary>
            <param name="stationID">stationID</param>
            <param name="filterStates">filter for xbot states the xbots can be in</param>
            <returns>StationXbotIds struct</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetAnyXbotIdsInAllStations">
            <summary>
            Get all xbot IDs currently in all stations (any xbot state)
            </summary>
            <returns>AllStationXbotIds struct</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetXbotIdsInAllStations(PMCLIB.XBOTSTATE[])">
            <summary>
            Get the xbot IDs currently in all stations that have any of the specified xbot states
            </summary>
            <param name="filterStates">filter for xbot states the xbots can be in</param>
            <returns>AllStationXbotIds struct</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.GetXbotTargetStation(System.Int32)">
            <summary>
            Get the target station for a xbot
            </summary>
            <param name="xbotID">xbot ID</param>
            <returns>TargetStation struct</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.SetTrajectory(System.Int32,System.Double,PMCLIB.TrajectoryAxesDefinition,System.String)">
            <summary>
            Sets new trajectory to PMC
            </summary>
            <param name="trajectoryID">ID of the new trajectory</param>
            <param name="timeInterval">Trajectory's time interval in second</param>
            <param name="axesDefinition">Represents which axes are defined.</param>
            <param name="trajectory">Trajectory as string</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.ISystemCommands.SetGridTable(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,PMCLIB.COMPENSATIONTYPE,System.Double[0:,0:,0:])">
            <summary>
            Saves a position-based compensation table to PMC
            </summary>
            <param name="xBottomLeft">Bottom left corner position X</param>
            <param name="yBottomLeft">Bottom left corner position Y</param>
            <param name="xStep">Step size in X direction</param>
            <param name="yStep">Step size in Y direction</param>
            <param name="xLen">Number of X direction points, maximum 450</param>
            <param name="yLen">Number of Y direction points, maximum 450</param>
            <param name="type">Sensor compensation or Force compensation</param>
            <param name="data">Maximum data size: 6x400x400</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="T:PMCLIB.SystemCommands">
            <summary>
            class for sending system commands
            </summary>
        </member>
        <member name="M:PMCLIB.SystemCommands.AutoSearchAndConnectToPMC">
            <summary>
            automatically searches for and connects to an available PMC
            </summary>
            <returns>true if connection successful, false if connection failed</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.ConnectToSpecificPMC(System.String)">
            <summary>
            connect to a specific PMC at the provided IP address
            </summary>
            <param name="ipAddress">IP Address of the PMC</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.CheckTCPConnection">
            <summary>
            Check if the TCP connection to the PMC is up
            </summary>
            <returns>true if connection is available, false if PMC is disconnected</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.DisconnectFromPMC">
            <summary>
            Disconnect the computer from the PMC
            </summary>
        </member>
        <member name="M:PMCLIB.SystemCommands.GainMastership">
            <summary>
            Attempts to gain mastership of the PMC
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.ReleaseMastership">
            <summary>
            Release mastership of the PMC
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.IsMaster">
            <summary>
            check whether current host is the master of the PMC
            </summary>
            <returns>true if is master, false if is not master</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetPMCStatus">
            <summary>
            Gets the status of the PMC
            </summary>
            <returns>current PMC state</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetPMNetStatus">
            <summary>
            Gets the status of PMNet
            </summary>
            <returns>true if PMNet is ok, false if PMNet disconnected</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.RebootPMC(System.Int32)">
            <summary>
            Reboot the PMC
            </summary>
            <param name="mode">
            Reboot mode:
            - 0 (Cold Reboot): Reboots both PMC and Fieldbus Communication.
            - 1 (Warm Reboot): Reboots only the PMC, without affecting Fieldbus Communication.
            </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetFlywayPhysicalStatus(System.Int32)">
            <summary>
            get the flyway physical status including power consumption, and various temperature measurements
            </summary>
            <param name="flywayID">flyway id</param>
            <returns>the full physical status of the flyway</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetNewXbotsFromBorder">
            <summary>
            get a list of xbots that were received at PMC flyway border
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetBorderStatus(System.Int32)">
            <summary>
            get the status of the border between PMC systems
            </summary>
            <param name="borderID"> the border ID</param>
            <returns> A struct containing the status of the border</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetAllGCodeIDs">
            <summary>
            Gets the ID of all g-code files stored in the PMC
            </summary>
            <returns> A struct containing all g-code ID information </returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.ReadGCode(System.Int32)">
            <summary>
            Read the g-code text for the specified g-code ID
            </summary>
            <param name="gCodeID"> The g-code ID to read from </param>
            <returns> A struct containing the g-code text </returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.SaveGCode(System.Int32,System.String)">
            <summary>
            Saves the g-code to the PMC with the associated g-code ID
            </summary>
            <param name="gCodeID"> The ID to save the g-code at </param>
            <param name="gCodeText"> The g-code text to save </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.DeleteGCode(System.Int32)">
            <summary>
            Deletes the g-code with the associated g-code ID
            </summary>
            <param name="gcodeID"> The ID of the g-code to delete </param>
            <returns> PMC return indicating whether command is successful </returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.ZoneControl(System.Int32,PMCLIB.ZONEOPERATION)">
            <summary>
            control the zone
            </summary>
            <param name="zoneID">Zone ID</param>
            <param name="zoneOp">Zone Operation, 0 = deactivate zone, 1 = activate zone</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.AddXBotsToZone(System.Int32,PMCLIB.XBOTTYPE[],System.Double[],System.Double[])">
            <summary>
            Adds XBots to the zone in emulation mode
            </summary>
            <param name="zoneID"> The ID of the zone to add XBots to </param>
            <param name="xbotTypes"> An array containing the types of the XBot to add </param>
            <param name="xPositionM"> An array containing the X starting position of the XBots in m </param>
            <param name="yPositionM"> An array containing the Y starting position of the XBots in m </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.RemoveXBotsFromZone(System.Int32)">
            <summary>
            Removes all the XBots inside a zone in emulation mode
            </summary>
            <param name="zoneID"> The ID of the zone to remove XBots from</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.DefineZone(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Defines a custom zone region
            </summary>
            <param name="zoneID"> The ID of the zone to be defined </param>
            <param name="minXM"> The X co-ordinate lower bounds of the zone in m </param>
            <param name="minYM"> The Y co-ordinate lower bounds of the zone in m </param>
            <param name="maxXM"> The X co-ordinate upper bounds of the zone in m </param>
            <param name="maxYM"> The Y co-ordinate upper bounds of the zone in m </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.DefineIntersectionZone(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Define a specialize zone, where only the user specified number of mover are allowed to move inside the zone at a time.
            </summary>
            <param name="zoneID"> The ID of the zone to be defined </param>
            <param name="minXM"> The X co-ordinate lower bounds of the zone in m </param>
            <param name="minYM"> The Y co-ordinate lower bounds of the zone in m </param>
            <param name="maxXM"> The X co-ordinate upper bounds of the zone in m </param>
            <param name="maxYM"> The Y co-ordinate upper bounds of the zone in m </param>
            <param name="maxNumberOfXBot">Specifies maximum number of XBots allowed inside the zone</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.DefineZLimitedIntersectionZone(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Define a specialize zone, where only the user specified number of mover with Z height less than the Z Limit are allowed to move inside the zone at a time.
            </summary>
            <param name="zoneID"> The ID of the zone to be defined </param>
            <param name="minXM"> The X co-ordinate lower bounds of the zone in m </param>
            <param name="minYM"> The Y co-ordinate lower bounds of the zone in m </param>
            <param name="maxXM"> The X co-ordinate upper bounds of the zone in m </param>
            <param name="maxYM"> The Y co-ordinate upper bounds of the zone in m </param>
            <param name="zLimitM"> The Z limit for the zone in m. Xbots with or higher Z Height of the limit cannot enter the zone.</param>
            <param name="maxNumberOfXBot">Specifies maximum number of XBots allowed inside the zone</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.OverrideZone(System.Int32,System.Double,System.Double)">
            <summary>
            Override the velocity and acceleration inside of a zone
            </summary>
            <param name="zoneID"> The ID of the zone to override </param>
            <param name="velocityFactor"> The factor that will be multiplied to XBot velocity inside the zone </param>
            <param name="accelFactor"> The factor that will be multiplied to the XBot acceleration inside the zone </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.ZoneFenceControl(System.Int32,PMCLIB.FENCEOPERATION)">
            <summary>
            control the zone fence
            </summary>
            <param name="zoneID">Zone ID</param>
            <param name="fenceOp">Zone Operation, 0 = remove the fence, 1 = build the fence</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetZoneStatus(System.Int32)">
            <summary>
            returns the zone state and the list of XBots inside the zone
            </summary>
            <param name="zoneID">zone id</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.SavePMCConfigXMLFile(System.String)">
            <summary>
            saves the current PMC configuration to a xml file at the specified path
            </summary>
            <param name="path">the path to save the configuration file to</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.EnterServiceMode">
            <summary>
            Enters PMC Service Mode
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.ExitServiceMode">
            <summary>
            Exits PMC Service Mode
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.SectorControl(System.Int32,PMCLIB.SECTOROPERATION)">
            <summary>
            activate/deactivate specific sector
            </summary>
            <param name="sectorID"> sector ID(>0) </param>
            <param name="sectorOperation"> sector control level, 0 = deactivate sector, 1 = activate sector </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.SectorRecover(System.Int32)">
            <summary>
            remove sector fences after it's activated
            </summary>
            <param name="sectorID"> sector ID(>0) </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetSectorStatus(System.Int32)">
            <summary>
            returns the sector state and the list of XBots inside the sector
            </summary>
            <param name="sectorID">sector ID</param>
            <returns>Object that has the sector status information</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.ReadExternalDigitalInput">
            <summary>
            Reads the external signal from the PMC
            </summary>
            <returns>Signal and command's return. Signal: HIGH = true, LOW = false</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.WriteExternalDigitalOutput(System.Boolean)">
            <summary>
            Writes the external signal to the PMC
            </summary>
            <param name="signal">Digital Signal HIGH = true, LOW = false)</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetPMCTime">
            <summary>
            Gets the current PMC time
            </summary>
            <returns>PMC Time as a DateTime object and command's return</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.SetPMCTime(System.DateTime)">
            <summary>
            Sets the current PMC Time
            </summary>
            <param name="time">Desired PMC Time as a Date Time Object. Year, Month, Day, Hour, Minute and Second</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.ResetXbotIDs">
            <summary>
            Resets scanned Xbot IDs
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.DeleteLogInfo(PMCLIB.LOGTYPE)">
            <summary>
            Deletes the content of log files (Warning log and error log)
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.SetTrajectory(System.Int32,System.Double,PMCLIB.TrajectoryAxesDefinition,System.String)">
            <summary>
            Sets new trajectory to PMC
            </summary>
            <param name="trajectoryID">ID of the new trajectory</param>
            <param name="timeInterval">Trajectory's time interval in second</param>
            <param name="axesDefinition">Represents which axes are defined. Default is false for al axis, set to true if the axis is defined.</param>
            <param name="trajectory">Trajectory as string</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.SetGridTable(System.Double,System.Double,System.Double,System.Double,System.Int32,System.Int32,PMCLIB.COMPENSATIONTYPE,System.Double[0:,0:,0:])">
            <summary>
            Saves a position-based compensation table to PMC
            </summary>
            <param name="xBottomLeft">Bottom left corner position X</param>
            <param name="yBottomLeft">Bottom left corner position Y</param>
            <param name="xStep">Step size in X direction</param>
            <param name="yStep">Step size in Y direction</param>
            <param name="xLen">Number of X direction points, maximum 400</param>
            <param name="yLen">Number of Y direction points, maximum 400</param>
            <param name="type">Sensor compensation or Force compensation</param>
            <param name="data">Maximum data size: 6x400x400</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.SystemCommands.SaveDesignFileToPC(System.Int32,System.String)">
            <inheritdoc/>
        </member>
        <member name="M:PMCLIB.SystemCommands.SendXbotToStation(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:PMCLIB.SystemCommands.SendXbotToStation(System.Int32,System.Int32,System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetIdleXbotIdInBay(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetAnyXbotIdInBay(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetXbotIdInBay(System.Int32,System.Int32,PMCLIB.XBOTSTATE[])">
            <inheritdoc/>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetIdleXbotIdsInStation(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetAnyXbotIdsInStation(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetXbotIdsInStation(System.Int32,PMCLIB.XBOTSTATE[])">
            <inheritdoc/>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetAnyXbotIdsInAllStations">
            <inheritdoc/>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetXbotIdsInAllStations(PMCLIB.XBOTSTATE[])">
            <inheritdoc/>
        </member>
        <member name="M:PMCLIB.SystemCommands.GetXbotTargetStation(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="T:PMCLIB.IXBotCommands">
            <summary>
            XBOT Commands interface
            </summary>
        </member>
        <member name="M:PMCLIB.IXBotCommands.ActivateXBOTS">
            <summary>
            Activate all Xbots
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.DeactivateXBOTS">
            <summary>
            Deactivate all Xbots
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.GetXbotStatus(System.Int32)">
            <summary>
            get the full xbot status, including the xbot state amd position data
            </summary>
            <param name="xbotID">xbot id</param>
            <returns>the full status of the xbot</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.GetAllXbotInfo(PMCLIB.ALLXBOTSFEEDBACKOPTION)">
            <summary>
            Gets basic information about all XBots in the system
            </summary>
            <returns>A struct containing basic information for every xbot in the system</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.LevitationCommand(System.Int32,PMCLIB.LEVITATEOPTIONS)">
            <summary>
            Levitate or land Xbot(s)
            </summary>
            <param name="xbotID">0 = all XBots, otherwise, XBot ID of a single XBot</param>
            <param name="levMode">0 = land, 1 = levitate,</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.LevitationCommand(System.Int32,PMCLIB.LEVITATEOPTIONS,PMCLIB.LEVITATIONSPEED)">
            <summary>
            Levitate or land Xbot(s)
            </summary>
            <param name="xbotID">0 = all XBots, otherwise, XBot ID of a single XBot</param>
            <param name="levMode">0 = land, 1 = levitate,</param>
            <param name="levSpeed">specifies the speed at which the xbot(s) levitate/land</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.LevitationCommand(System.Int32,PMCLIB.LEVITATEOPTIONS,PMCLIB.LEVITATIONSPEED,System.Double)">
            <summary>
            Levitate or land Xbot(s)
            </summary>
            <param name="xbotID">0 = all XBots, otherwise, XBot ID of a single XBot</param>
            <param name="levMode">0 = land, 1 = levitate,</param>
            <param name="levSpeed">specifies the speed at which the xbot levitate/land</param>
            <param name="force">z force after landing [N]</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.LinearMotionSI(System.UInt16,System.Int32,PMCLIB.POSITIONMODE,PMCLIB.LINEARPATHTYPE,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            linear motion command using SI units (meters, radians)
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">xbot ID</param>
            <param name="positionMode">0 = absolute position mode; 1 = relative position mode</param>
            <param name="pathType">0 = direct; 1 = X then Y; 2 = Y then X</param>
            <param name="targetXmeters">Target Position X, in meters</param>
            <param name="targetYmeters">Target Position Y, in meters</param>
            <param name="finalSpeedMetersPs">Final speed, in m/s</param>
            <param name="maxSpeedMetersPs">Max speed, in m/s</param>
            <param name="maxAccelerationMetersPs2">Max acceleration, in m/s^2</param>
            <param name="cornerRadius">Corner radius for X then Y or Y then X motion in m</param>
            <returns>PMC return value + travel time</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.LinearSingleAxisMotionSI(System.UInt32,System.Int32,PMCLIB.POSITIONMODE,PMCLIB.AXISNAMES,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Single axis linear point to point motion
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">xbot ID</param>
            <param name="positionMode">0 = absolute position mode; 1 = relative position mode</param>
            <param name="axis">Which axis to move</param>
            <param name="targetPos">Target position of the axis (in m or rad)</param>
            <param name="finalSpeed">Final speed, in m/s or rad/s</param>
            <param name="maxSpeed">Max speed, in m/s or rad/s</param>
            <param name="maxAcceleration">Max acceleration, in m/s^2 or rad/s^2</param>
            <param name="hasPriority">If "true" the command will have priority for the obtacle handling. A fence will be created around the motion path.</param>
            <returns>PMC return value + travel time</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.ArcMotionMetersRadians(System.UInt16,System.Int32,PMCLIB.ARCMODE,PMCLIB.ARCTYPE,PMCLIB.ARCDIRECTION,PMCLIB.POSITIONMODE,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Arc motion command, in microns and millidegrees
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">xbot ID</param>
            <param name="arcMode">0 = target + radius; 1 = center + angle</param>
            <param name="arcType">0 = minor arc; 1 = major arc</param>
            <param name="arcDir">0 = clockwise, 1 = counterclockwise</param>
            <param name="positionMode">0 = absolute position mode; 1 = relative position mode; for specifying the arc center</param>
            <param name="XMeters">target or center x position, meters</param>
            <param name="YMeters">target or center y position, meters</param>
            <param name="finalSpeedMetersPs">final speed on exiting arc motion, m/s</param>
            <param name="maxSpeedMetersPs">max tangential speed during arc motion, m/s</param>        
            <param name="maxAccelerationMetersPs2">Max acceleration, in m/s^2</param>
            <param name="radiusMeters">radius of arc in target + radius mode, meters</param>
            <param name="angleRadians">angle of rotation in center + angle mode, radians</param>
            <returns>PMC return value + travel time</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.SyncMotionSI(System.Int32,System.Int32[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            synchronous motion command
            </summary>
            <param name="xbotCount">number of xbots specified in this command. valid range is 1 to 4</param>
            <param name="xbotIDs">an array containing the xbot IDs of the xbots specified in this command.</param>
            <param name="targetsXMeters">An array containing the target x positions. (m)</param>
            <param name="targetsYMeters">An array containing the target y positions. (m)</param>
            <param name="finalSpeedsMetersPs">An array containing the final speed (m/s)</param>
            <param name="maxSpeedsMetersPs">An array containing the max speed (m/s)</param>
            <param name="maxAccelerationMetersPs2">An array containing the max acceleration (m/s^2)</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.AsyncMotionSI(System.Int32,PMCLIB.ASYNCOPTIONS,System.Int32[],System.Double[],System.Double[])">
            <summary>
            deprecated, please use AutoDrivingMotionSI command, automatically route xbots to their target positions
            </summary>
            <param name="xbotCount">number of xbots specified in this command, up to 10</param>
            <param name="mode"> 0 = all xbots are involved in the move</param>
            <param name="xbotIDs">an array containing the xbot IDs of the xbots specified in this command.</param>
            <param name="targetsXMeters">An array containing the target x positions. (m)</param>
            <param name="targetsYMeters">An array containing the target y positions. (m)</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.AutoDrivingMotionSI(System.Int32,PMCLIB.ASYNCOPTIONS,System.Int32[],System.Double[],System.Double[],System.Boolean)">
            <summary>
            auto driving motion command, automatically route xbots to their target positions
            </summary>
            <param name="xbotCount">number of xbots specified in this command</param>
            <param name="mode"> 0 = all xbots are involved in the move</param>
            <param name="xbotIDs">an array containing the xbot IDs of the xbots specified in this command.</param>
            <param name="targetsXMeters">An array containing the target x positions. (m)</param>
            <param name="targetsYMeters">An array containing the target y positions. (m)</param>
            <param name="isOverhangAllowed">Max overhang for autodriving outside the layout. Must be less than the maximum mover overhang. (m)</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.AutoDrivingMotionSIWithSpeed(System.Int32,PMCLIB.ASYNCOPTIONS,System.Double,System.Double,System.Int32[],System.Double[],System.Double[],System.Int32,System.Boolean)">
            <summary>
            auto driving motion command, automatically route xbots to their target positions, with speed and acceleration
            </summary>
            <param name="xbotCount">number of xbots specified in this command</param>
            <param name="mode"> 0 = all xbots are involved in the move</param>
            <param name="xbotIDs">an array containing the xbot IDs of the xbots specified in this command.</param>
            <param name="targetsXMeters">An array containing the target x positions. (m)</param>
            <param name="targetsYMeters">An array containing the target y positions. (m)</param>
            <param name="maxSpeed">max speed used during motion</param>
            <param name="maxAccel">max acceleration used during motion</param>
            <param name="zoneID">pre-defined fenced zone for movers to be routing in. All movers to be routed must already be inside the fenced zone. zone ID = 0 means no zone</param>
            <param name="isOverhangAllowed">Max overhang for autodriving outside the layout. Must be less than the maximum mover overhang. (m)</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.EditMotionMacro(PMCLIB.MOTIONMACROOPTIONS,System.Int32)">
            <summary>
            motion macro control command
            </summary>
            <param name="motionMacroOption">0 = clear macro; 1 = save macro; 2 = copy macro</param>
            <param name="motionMacroID">macro ID</param>             
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.RunMotionMacro(System.UInt16,System.Int32,System.Int32)">
            <summary>
            copies the motion commands stored in the macro into the specified xbot
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="motionMacroID">motion macro ID</param>
            <param name="xbotID">target xbot ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.ShortAxesMotionSI(System.UInt16,System.Int32,PMCLIB.POSITIONMODE,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Short axes motion command
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">xbot ID</param>
            <param name="positionMode">0 = absolute position mode; 1 = relative position mode</param>        
            <param name="targetZmeters">target z position, in meters</param>
            <param name="targetRXrads">target rx position, in radians</param>
            <param name="targetRYrads">target ry position, in radians</param>
            <param name="targetRZrads">target rz position, in radians</param>
            <param name="speedZmetersPs">max z speed, in m/s</param>
            <param name="speedRXradsPs">max rx speed, in rad/s</param>
            <param name="speedRYradsPs">max ry speed, in rad/s</param>
            <param name="speedRZradsPs">max rz speed, in rad/s</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.ShortAxesMotionSI(System.UInt16,System.Int32,PMCLIB.POSITIONMODE,PMCLIB.SHORTAXESCENTERMODE,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Short axes motion command
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">xbot ID</param>
            <param name="positionMode">0 = absolute position mode; 1 = relative position mode</param>        
            <param name="centerMode">rotation center is: 0 = xbot center, 1 = user defined center</param>
            <param name="centerX">user defined rotation center X</param>
            <param name="centerY">user defined rotation center Y</param>
            <param name="targetZmeters">target z position, in meters</param>
            <param name="targetRXrads">target rx position, in radians</param>
            <param name="targetRYrads">target ry position, in radians</param>
            <param name="targetRZrads">target rz position, in radians</param>
            <param name="speedZmetersPs">max z speed, in m/s</param>
            <param name="speedRXradsPs">max rx speed, in rad/s</param>
            <param name="speedRYradsPs">max ry speed, in rad/s</param>
            <param name="speedRZradsPs">max rz speed, in rad/s</param>                       
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.SixDofMotionSI(System.UInt16,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            6DOF motion command
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">xbot ID</param>       
            <param name="targetXmeters">target x position, in meters</param>
            <param name="targetYmeters">target y position, in meters</param>
            <param name="targetZmeters">target z position, in meters</param>
            <param name="targetRXrads">target rx position, in radians</param>
            <param name="targetRYrads">target ry position, in radians</param>
            <param name="targetRZrads">target rz position, in radians</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.SixDofMotionSI(System.UInt16,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            6DOF motion command
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">xbot ID</param>       
            <param name="targetXmeters">target x position, in meters</param>
            <param name="targetYmeters">target y position, in meters</param>
            <param name="targetZmeters">target z position, in meters</param>
            <param name="targetRXrads">target rx position, in radians</param>
            <param name="targetRYrads">target ry position, in radians</param>
            <param name="targetRZrads">target rz position, in radians</param>
            <param name="xyMaxSpeed">maximum xy motion speed</param>
            <param name="xyMaxAccel">maximum xy motion acceleration</param>
            <param name="zMaxSpeed">maximum z speed</param>
            <param name="rxMaxSpeed">maximum rx speed</param>
            <param name="ryMaxSpeed">maximum ry speed</param>
            <param name="rzMaxSpeed">maximum rz speed</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.StopMotion(System.Int32)">
            <summary>
            stop xbot(s) motion
            </summary>
            <param name="xbotID">xbot ID, 0 = all Xbots</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.MotionBufferControl(System.Int32,PMCLIB.MOTIONBUFFEROPTIONS)">
            <summary>
            motion buffer control
            </summary>
            <param name="xbotID">xbot ID</param>
            <param name="bufferOption">0 = block buffer; 1 = unblock buffer; 2 = clear buffer</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.GroupControl(PMCLIB.GROUPOPTIONS,System.Int32,System.Int32,System.Int32[])">
            <summary>
            group control command
            </summary>
            <param name="groupOption">0 = create; 1 = delete; 2 = connect; 3 = disconnect; 4 = block; 5 = release; 6 = query status</param>
            <param name="groupID">group ID</param>
            <param name="xbotCount">number of XBots in the group, only useful for the create option. For other options, send 0</param>
            <param name="xbotIDs">array of XBOT ids in the group, only useful for the create option. For other options, send null</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.BondXbotGroup(System.Int32,System.Boolean,PMCLIB.GROUPBONDOPTIONS)">
            <summary>
            Group bond command
            </summary>
            <param name="groupID">group ID, 0 = bond all groups; >0 = bond specific group</param>
            <param name="isBond">true = bond group(s); false = unbound group(s)</param>
            <param name="bondoptions">0 = decouple mode, 1 = couple mode</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.GetGroupStatus(System.Int32)">
            <summary>
            Queries the status of the specified group
            </summary>
            <param name="groupID">group ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.CreateXbotGroup(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Creates the specified xbot group
            </summary>
            <param name="groupID">group ID (must be greater than 0)</param>
            <param name="xbotCount">number of xbots to be in the group</param>
            <param name="xbotIDs">xbot ID#'s in to be added to the group</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.DeleteXbotGroup(System.Int32)">
            <summary>
            Deletes the specified xbot group
            </summary>
            <param name="groupID">group ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.BlockXbotGroup(System.Int32,System.Boolean)">
            <summary>
            Blocks or unblocks the specified xbot group
            </summary>
            <param name="groupID">group ID</param>
            <param name="isBlock">true = block group; false = unblock group</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.GetXBotIDS">
            <summary>
            Returns the XBOT IDs of the XBots detected by the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.TrajectoryActivation(System.UInt16,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Activate trajectory for xbot(s)
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotCount">number of xbots to activate trajectories for</param>
            <param name="xbotIDs">an array containing the xbot IDs</param>
            <param name="trajectoryIDs">an array containing the corresponding trajectory IDs</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.WaitUntil(System.UInt16,System.Int32,PMCLIB.TRIGGERSOURCE,PMCLIB.WaitUntilTriggerParams)">
            <summary>
            Let's an XBOT wait until certain conditions are met before executing the next command
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">XBOT ID of the XBOT to wait</param>                
            <param name="triggerSource">source of the trigger that will release the XBOT from waiting</param>
            <param name="triggerParameters">parameters for finishing the Wait Until command</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.WriteXBotPayloadSettings(System.Int32,PMCLIB.XBotPayloadSettings)">
            <summary>
            Adjust parameters for an XBot carrying a load
            </summary>
            <param name="xbotID">ID of the XBot carrying load</param>
            <param name="payload">Details about the load carried by the XBot</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.WriteXBotPayloadSettingsMultiple(System.Int32,System.Int32[],PMCLIB.XBotPayloadSettings[])">
            <summary>
            Adjust parameters for up to 5 XBots carrying loads
            </summary>
            <param name="xbotCount">number of xbots to set in this command</param>
            <param name="xbotIDs">the array of xbot IDs</param>
            <param name="payloadSettings">the array of payload settings that corresponds to the previously provided XBOT IDs</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.ReadXBotPayloadSettings(System.Int32)">
            <summary>
            get the current payload settings of the xbot in question
            </summary>
            <param name="xbotID">xbot ID to check</param>
            <returns>return including payload settings of the queried xbot</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.SetMoverProperties(System.Int32,PMCLIB.MoverProperty[])">
            <summary>
            sets anywhere from 1 to 14 mover properties
            </summary>
            <param name="propertyCount">number of properties this command is setting</param>        
            <param name="moverProperties">the property definition, including the mover ID, property ID, and property value</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.GetMoverProperties(System.Int32,System.Int32)">
            <summary>
            returns 8 consecutive mover properties for the specified mover, starting with the specified property ID
            </summary>
            <param name="moverID">the mover ID to get the properties for</param>
            <param name="startingPropertyID">the property ID of the first property to get. Lowest number is 0</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.EditPlanetXbots(System.Int32,System.Int32,System.Int32[],PMCLIB.PLANETOPTIONS)">
            <summary>
            Use this command to edit the planet XBOTs list of a sun XBOT
            </summary>
            <param name="sunXbotID">Sun XBOT ID</param>
            <param name="planetXbotCount">number of planet XBOTs</param>
            <param name="planetXbotIDs">array of planet XBOT IDs</param>
            <param name="action">whether to add the planets or remove the planets</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.PayloadWeighingKg(System.Int32)">
            <summary>
            Provides the weight of the payload, as measured by the specified XBOT
            </summary>
            <param name="xbotID">ID of the XBOT carrying the payload</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.PayloadWeighingKg(System.Int32,System.Double)">
            <summary>
            Provides the weight of the payload, as measured by the specified XBOT
            </summary>
            <param name="xbotID">ID of the XBOT carrying the payload</param>
            <param name="durationSecs"> duration for the XBot to wait while weighing </param>
            <returns> Payloading weighing information </returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.TareMover(System.Int32)">
            <summary>
            Tare Xbot weighing
            </summary>
            <param name="xbotID">xbot ID</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.MotionInterruptCommand(System.Int32,PMCLIB.MOTIONINTERRUPTOPTIONS)">
            <summary>
            Pause or resume the motion of an Xbot
            </summary>
            <param name="xbotID">XBOT ID</param>
            <param name="motionInterruptOption">0 = Resume, 1 = Pause</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.CamControlCommand(System.UInt16,PMCLIB.CAMOPTIONS,System.Int32,System.Int32,PMCLIB.CamAxisDataClass[])">
            <summary>
            use this command to start or stop cam operations
            </summary>
            <param name="cmdLabel">command label</param>
            <param name="camCmdAction">start or stop cam operation</param>
            <param name="slaveXbotID">XBOT ID of the slave XBOT (it will follow other xbots' motions)</param>
            <param name="axisCount">how many axis of the slave XBOT will be configured by this command</param>
            <param name="camAxisData">detailed axis pairing data</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.CamControlAdvancedCommand(System.UInt16,PMCLIB.CAMOPTIONS,System.Int32,System.Int32,PMCLIB.CamAxisDataClassExtended[])">
            <summary>
            use this command to start or stop cam operations, advanced parameters available
            </summary>
            <param name="cmdLabel">command label</param>
            <param name="camCmdAction">start or stop cam operation</param>
            <param name="slaveXbotID">XBOT ID of the slave XBOT (it will follow other xbots' motions)</param>
            <param name="axisCount">how many axis of the slave XBOT will be configured by this command</param>
            <param name="camAxisData">detailed axis pairing data</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.SetXBotForceMode(System.Int32,PMCLIB.FORCEMODEOPTION,PMCLIB.XBotForceSetting,PMCLIB.FORCEMODETYPE,System.Boolean)">
            <summary>
            Apply open-loop force in user specified direction(s) for a particular XBot
            </summary>
            <param name="xbotID"> XBot to apply force mode </param>
            <param name="forceOption"> Enum to select which axis to apply force mode </param>
            <param name="forceInput"> Force input struct specifying the desired open-loop force/torque magnitudes </param>
            <param name="ForceModeType">Force Mode Type (Absolute or Relative)</param>
            <param name="bufferCommand">If "true", buffers the forcemode command at the end of the current buffered commands, otherwise, the command executes immediately</param>
            <returns> PMC Return code indicating if command was successful </returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.ReleaseXBotForceMode(System.Int32)">
            <summary>
            Release XBot from open-loop force mode
            </summary>
            <param name="xbotID"> The ID of the XBot to release from force mode </param>
            <returns> PMC Return code indicating if command was successful </returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.DefineMoverStereotype(PMCLIB.MOVERTYPE,System.Int32,PMCLIB.MoverStereotypeData)">
            <summary>
            defines a mover stereotype, which can be applied to movers afterwards
            </summary>
            <param name="moverType">mover type</param>  
            <param name="stereotypeID">stereotype id</param>
            <param name="stereotypeData">stereotype data</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.DefineMoverStereotype(PMCLIB.XBOTTYPE,System.Int32,PMCLIB.MoverStereotypeData)">
            <summary>
            defines a mover stereotype, which can be applied to movers afterwards
            </summary>
            <param name="moverType">mover type</param>  
            <param name="stereotypeID">stereotype id</param>
            <param name="stereotypeData">stereotype data</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.ReadMoverStereotypeDefinition(PMCLIB.MOVERTYPE,System.Int32)">
            <summary>
            provides the full details of a mover stereotype definition
            </summary>
            <param name="moverType">mover type</param>        
            <param name="stereotypeID">stereotype id</param>        
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.ReadMoverStereotypeDefinition(PMCLIB.XBOTTYPE,System.Int32)">
            <summary>
            provides the full details of a mover stereotype definition
            </summary>
            <param name="moverType">mover type</param>        
            <param name="stereotypeID">stereotype id</param>        
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.AssignStereotypeToMover(System.Int32,System.Int32,PMCLIB.ASSIGNSTEREOTYPEOPTION)">
            <summary>
            assign a mover stereotype definition to a mover
            </summary>
            <param name="moverID">mover id</param>  
            <param name="stereotypeID">stereotype id</param>
            <param name="option">Option to specify either send the AssignStereotype command to buffer or run immediately</param>        
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.AutoLoadingZoneControl(PMCLIB.ALZONEOPERATION,System.Int32,PMCLIB.AutoLoadZoneDefinition)">
            <summary>
            define or delete an auto load zone used to load or unload XBots from external devices onto the Flyway
            </summary>
            <param name="zoneOp">unload xbot from flyway, or load xbot onto flyway</param>
            <param name="zoneID">zone id</param>
            <param name="zoneDefinition">parameters used to define the auto load zone area</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.AutoUnloadXBot(System.Int32,System.Int32)">
            <summary>
            automatically unload an XBot from the flyway using a previously defined auto unloading zone
            </summary>
            <param name="xbotID">xbot id</param>
            <param name="autoUnloadZoneID">zone ID of zone used to unload XBot</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.SetAutoLoadingZoneEmpty(System.Int32)">
            <summary>
            set an auto loading zone as empty, so that the system can load the next XBot
            </summary>
            <param name="autoLoadingZoneID"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.GetAutoLoadingZoneStatus(System.Int32)">
            <summary>
            get the status of an auto loading/unloading zone
            </summary>
            <param name="autoLoadingZoneID">auto loading zone ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.GetAllAccidentXbots">
            <summary>
            Gets the ID and count of all xbots that have been deactivated due to accidents
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.RecoverAccidentXbot(System.Int32,PMCLIB.RECOVERXBOTMODE,PMCLIB.RECOVERXBOTOPTIONS)">
            <summary>
            Recovers the specified xbot after an accident
            </summary>
            <param name="xbotID"> ID of the Xbot to be recovered</param>
            <param name="mode"> Defines the behabiour of the Xbot after recovering</param>
            <param name="option">Option For Short Axes Posotion After Recovering the XBot</param>
            <returns> PMC return indiciating if command is successful </returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.RunGCode(System.UInt16,System.Int32,System.Int32)">
            <summary>
            Run g-code command
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID"> ID of xbot to run g-code motion command with </param>
            <param name="gCodeID"> ID of the g-code to run</param>
            <returns>PMC return code indicating whether the command is successful</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.CreateXbotTrackingFailure(System.Int32,PMCLIB.TRACKINGFAILURETYPE)">
            <summary>
            Injects tracking errors failures to the specified XBot, useful for testing failure handling routines
            </summary>
            <param name="xbotID"> XBot ID to add tracking error failure to</param>
            <param name="errType"> Type of tracking error failure to add</param>
            <returns> PMC return indiciating if command is successful  </returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.RotaryMotionP2P(System.Int32,System.Int32,PMCLIB.ROTATIONMODE,System.Double,System.Double,System.Double,PMCLIB.POSITIONMODE)">
            <summary>
            Rz full Rotation to user specified angle
            </summary>
            <param name="cmdLabel">Rotation command label</param>
            <param name="xbotID">Xbot ID to rotate</param>
            <param name="mode">Rotation mode </param>
            <param name="targetRz"> The target Rz to rotate to, in rad</param>
            <param name="targetRzVel"> The target Rz angular velocity to rotate at, in rad/s</param>
            <param name="targetRzAcc"> The target Rz angular acceleration, in rad/s^2</param>
            <param name="positionMode">0 = absolute position mode; 1 = relative position mode</param>
            <returns> PMC motion command return info </returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.RotaryMotionTimedSpin(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Rotate the xbot around the Rz axis for a specified amount time
            </summary>
            <param name="cmdLabel">Rotation command label</param>
            <param name="xbotID">Xbot ID to rotate</param>
            <param name="targetFinalRz"> The final Rz position to finish rotation at, in rad</param>
            <param name="targetRzVel"> The target Rz angular velocity to rotate at, in rad/s</param>
            <param name="targetRzAcc"> The target Rz angular acceleration, in rad/s^2</param>
            <param name="timeS"> The time to rotate for in s</param>
            <returns> PMC motion command return info </returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.SetJerkLimit(System.Int32,PMCLIB.JERKLIMAXIS,System.Double)">
            <summary>
            Set the jerk limit for a specific xbot and specific axis
            </summary>
            <param name="xbotID"> The xbot ID to set the jerk limit</param>
            <param name="axis"> The axis to set the jerk limit</param>
            <param name="jerkLim">The jerk limit, in m/s^3</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.SetVirtualXbotPosition(System.Int32,PMCLIB.SixDOFInfo)">
            <summary>
            Instantly set the position of a virtual xbot
            </summary>
            <param name="vXbotID">The virtual xbot ID (100-127)</param>
            <param name="positionSI">The 6DOF position to set the virtual xbot to</param>
            <returns>PMC command return code</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.LongAxisJoggingControl(System.Int32,System.Double,System.Double,PMCLIB.JOGGINGOPERATION)">
            <summary>
            Jogs the mover on the XY coordinates
            </summary>
            <param name="XbotID">Mover ID</param>
            <param name="XSpeed">X-Axis Speed (m/s)</param>
            <param name="YSpeed">Y-Axis Speed (m/s)</param>
            <param name="operation">Jogging Operation. Turns On or Turns Off the Jogging.</param>
            <returns>PMC command return code</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.ShortAxisJoggingControl(System.Int32,PMCLIB.SHORTAXIS,System.Double,PMCLIB.JOGGINGOPERATION)">
            <summary>
            Jogs the mover in a single direction in the Z, Rx, Ry or Rz axes
            </summary>
            <param name="XbotID">Mover ID</param>
            <param name="Axis">Jogging Axis</param>
            <param name="Speed">Jogging Speed (m/s) or (rad/s)</param>
            <param name="operation">Jogging Operation. Turns On or Turns Off the Jogging</param>
            <returns>PMC command return code</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.LoadPartsToXbots(System.Int32[],System.Int32[])">
            <summary>
            Loads specified parts into the corresponding XBots
            </summary>
            <param name="xbotIDs">Array of XBot IDs</param>
            <param name="partIDs">Array of Part IDs, where ID = 0 removes the part</param>
            <returns>PMC command return code</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.InjectNoiseToXbot(System.Int32,PMCLIB.NOISEOPERATION,PMCLIB.NoiseDefinition[])">
            <summary>
            Injects noise to the specified XBot
            </summary>
            <param name="xbotID">ID of the XBot to inject the noise</param>
            <param name="operation">Noise operation. NOISE_OFF: Disables the noise, NOISE_ON: Enables the noise</param>
            <param name="noiseDefinitions">Array of noise parameters, for each axis</param>
            <returns>PMC command return code</returns>
        </member>
        <member name="M:PMCLIB.IXBotCommands.InjectNoiseWithDelayToXbot(System.Int32,PMCLIB.NOISEOPERATION,PMCLIB.NoiseWithDelayDefinition[])">
            <summary>
            Injects noise to the specified XBot with delay
            </summary>
            <param name="xbotID">ID of the XBot to inject the noise</param>
            <param name="operation">Noise operation. NOISE_OFF: Disables the noise, NOISE_ON: Enables the noise</param>
            <param name="noiseWithDelayDefinitions">Array of noise parameters, for each axis</param>
            <returns>PMC command return code</returns>
        </member>
        <member name="T:PMCLIB.XBotCommands">
            <summary>
            class for sending xbot commands
            </summary>
        </member>
        <member name="M:PMCLIB.XBotCommands.ActivateXBOTS">
            <summary>
            Activate all Xbots
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.DeactivateXBOTS">
            <summary>
            Deactivate all Xbots
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.LevitationCommand(System.Int32,PMCLIB.LEVITATEOPTIONS)">
            <summary>
            Levitate or land Xbot(s)
            </summary>
            <param name="xbotID">0 = all XBots, otherwise, XBot ID of a single XBot</param>
            <param name="levMode">0 = land, 1 = levitate,</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.LevitationCommand(System.Int32,PMCLIB.LEVITATEOPTIONS,PMCLIB.LEVITATIONSPEED)">
            <summary>
            Levitate or land Xbot(s)
            </summary>
            <param name="xbotID">0 = all XBots, otherwise, XBot ID of a single XBot</param>
            <param name="levMode">0 = land, 1 = levitate,</param>
            <param name="levSpeed">specifies the speed at which the xbot levitate/land</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.LevitationCommand(System.Int32,PMCLIB.LEVITATEOPTIONS,PMCLIB.LEVITATIONSPEED,System.Double)">
            <summary>
            Levitate or land Xbot(s)
            </summary>
            <param name="xbotID">0 = all XBots, otherwise, XBot ID of a single XBot</param>
            <param name="levMode">0 = land, 1 = levitate,</param>
            <param name="levSpeed">specifies the speed at which the xbot levitate/land</param>
            <param name="force">z force after landing [N]</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.MobilityControl(System.Int32,PMCLIB.MOBILITYOPTIONS)">
            <summary>
            Disable, land, or levitate the XBOT(s), deprecated
            </summary>
            <param name="xbotID">0 = all XBots, otherwise, XBot ID of a single XBot</param>
            <param name="mobilityMode">0 = disable, 1 = land, 2 = levitate</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.LinearMotionSI(System.UInt16,System.Int32,PMCLIB.POSITIONMODE,PMCLIB.LINEARPATHTYPE,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            linear motion command using SI units (meters, radians)
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">xbot ID</param>
            <param name="positionMode">0 = absolute position mode; 1 = relative position mode</param>
            <param name="pathType">0 = direct; 1 = X then Y; 2 = Y then X</param>
            <param name="targetXmeters">Target Position X, in meters</param>
            <param name="targetYmeters">Target Position Y, in meters</param>
            <param name="finalSpeedMetersPs">Final speed, in m/s</param>
            <param name="maxSpeedMetersPs">Max speed, in m/s</param>
            <param name="maxAccelerationMetersPs2">Max acceleration, in m/s^2</param>
            <param name="cornerRadius">Corner radius for X then Y or Y then X motion in m</param>
            <returns>PMC return value + travel time</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.LinearSingleAxisMotionSI(System.UInt32,System.Int32,PMCLIB.POSITIONMODE,PMCLIB.AXISNAMES,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Single axis linear point to point motion
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">xbot ID</param>
            <param name="positionMode">0 = absolute position mode; 1 = relative position mode</param>
            <param name="axis">Which axis to move</param>
            <param name="targetPos">Target position of the axis (in m or rad)</param>
            <param name="finalSpeed">Final speed, in m/s or rad/s</param>
            <param name="maxSpeed">Max speed, in m/s or rad/s</param>
            <param name="maxAcceleration">Max acceleration, in m/s^2 or rad/s^2</param>
            <param name="hasPriority">If "true" the command will have priority for the obtacle handling. A fence will be created around the motion path.</param>
            <returns>PMC return value + travel time</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.ArcMotionMetersRadians(System.UInt16,System.Int32,PMCLIB.ARCMODE,PMCLIB.ARCTYPE,PMCLIB.ARCDIRECTION,PMCLIB.POSITIONMODE,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Arc motion command, in microns and millidegrees
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">xbot ID</param>
            <param name="arcMode">0 = target + radius; 1 = center + angle</param>
            <param name="arcType">0 = minor arc; 1 = major arc</param>
            <param name="arcDir">0 = clockwise, 1 = counterclockwise</param>
            <param name="positionMode">0 = absolute position mode; 1 = relative position mode; for specifying the arc center</param>
            <param name="XMeters">target or center x position, meters</param>
            <param name="YMeters">target or center y position, meters</param>
            <param name="finalSpeedMetersPs">final speed on exiting arc motion, m/s</param>
            <param name="maxSpeedMetersPs">max tangential speed during arc motion, m/s</param>        
            <param name="maxAccelerationMetersPs2">Max acceleration, in m/s^2</param>
            <param name="radiusMeters">radius of arc in target + radius mode, meters</param>
            <param name="angleRadians">angle of rotation in center + angle mode, radians</param>
            <returns>PMC return value + travel time</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.SyncMotionSI(System.Int32,System.Int32[],System.Double[],System.Double[],System.Double[],System.Double[],System.Double[])">
            <summary>
            synchronous motion command
            </summary>
            <param name="xbotCount">number of xbots specified in this command. valid range is 1 to 4</param>
            <param name="xbotIDs">an array containing the xbot IDs of the xbots specified in this command.</param>
            <param name="targetsXMeters">An array containing the target x positions. (m)</param>
            <param name="targetsYMeters">An array containing the target y positions. (m)</param>
            <param name="finalSpeedsMetersPs">An array containing the final speed (m/s)</param>
            <param name="maxSpeedsMetersPs">An array containing the max speed (m/s)</param>
            <param name="maxAccelerationMetersPs2">An array containing the max acceleration (m/s^2)</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.AsyncMotionSI(System.Int32,PMCLIB.ASYNCOPTIONS,System.Int32[],System.Double[],System.Double[])">
            <summary>
            deprecated, please use AutoDrivingMotionSI command, automatically route xbots to their target positions
            </summary>
            <param name="xbotCount">number of xbots specified in this command, up to 10</param>
            <param name="mode"> 0 = all xbots are involved in the move</param>
            <param name="xbotIDs">an array containing the xbot IDs of the xbots specified in this command.</param>
            <param name="targetsXMeters">An array containing the target x positions. (m)</param>
            <param name="targetsYMeters">An array containing the target y positions. (m)</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.AutoDrivingMotionSI(System.Int32,PMCLIB.ASYNCOPTIONS,System.Int32[],System.Double[],System.Double[],System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="M:PMCLIB.XBotCommands.AutoDrivingMotionSIWithSpeed(System.Int32,PMCLIB.ASYNCOPTIONS,System.Double,System.Double,System.Int32[],System.Double[],System.Double[],System.Int32,System.Boolean)">
            <summary>
            auto driving motion command, automatically route xbots to their target positions, with speed and acceleration
            </summary>
            <param name="xbotCount">number of xbots specified in this command, up to 10</param>
            <param name="mode"> 0 = all xbots are involved in the move</param>
            <param name="xbotIDs">an array containing the xbot IDs of the xbots specified in this command.</param>
            <param name="targetsXMeters">An array containing the target x positions. (m)</param>
            <param name="targetsYMeters">An array containing the target y positions. (m)</param>
            <param name="maxSpeed">max speed used during motion</param>
            <param name="maxAccel">max acceleration used during motion</param>
            <param name="zoneID">Zone to route within, or 0 to specify the entire flyway system</param>
            <param name="isOverhangAllowed">Indicates whether to use the max system overhang while routings. Normally, the routing algorithm tries not to overhang the movers, and only commands them to overhang at the start and end of motions to leave the starting positions and reach the final positions.</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.EditMotionMacro(PMCLIB.MOTIONMACROOPTIONS,System.Int32)">
            <summary>
            motion macro control command
            </summary>
            <param name="motionMacroOption">0 = clear macro; 1 = save macro; 2 = copy macro</param>
            <param name="motionMacroID">macro ID</param>        
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.RunMotionMacro(System.UInt16,System.Int32,System.Int32)">
            <summary>
            copies the motion commands stored in the macro into the specified xbot
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="motionMacroID">motion macro ID</param>
            <param name="xbotID">target xbot ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.WriteXBotPayloadSettings(System.Int32,PMCLIB.XBotPayloadSettings)">
            <summary>
            Adjust parameters for an XBot carrying a load
            </summary>
            <param name="xbotID">ID of the XBot carrying load</param>
            <param name="payload">Details about the load carried by the XBot</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.WriteXBotPayloadSettingsMultiple(System.Int32,System.Int32[],PMCLIB.XBotPayloadSettings[])">
            <summary>
            Adjust parameters for up to 3 XBots carrying loads
            </summary>
            <param name="xbotCount">number of xbots to set in this command</param>
            <param name="xbotIDs">the array of xbot IDs</param>
            <param name="payloadSettings">the array of payload settings that corresponds to the previously provided XBOT IDs</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.ReadXBotPayloadSettings(System.Int32)">
            <summary>
            get the current payload settings of the xbot in question
            </summary>
            <param name="xbotID">xbot ID to check</param>
            <returns>return including payload settings of the queried xbot</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.SetMoverProperties(System.Int32,PMCLIB.MoverProperty[])">
            <summary>
            sets anywhere from 1 to 14 mover properties
            </summary>
            <param name="propertyCount">number of properties this command is setting</param>        
            <param name="moverProperties">the property definition, including the mover ID, property ID, and property value</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.GetMoverProperties(System.Int32,System.Int32)">
            <summary>
            returns 8 consecutive mover properties for the specified mover, starting with the specified property ID
            </summary>
            <param name="moverID">the mover ID to get the properties for</param>
            <param name="startingPropertyID">the property ID of the first property to get. Lowest number is 0</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.ShortAxesMotionSI(System.UInt16,System.Int32,PMCLIB.POSITIONMODE,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Short axes motion command
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">xbot ID</param>
            <param name="positionMode">0 = absolute position mode; 1 = relative position mode</param>        
            <param name="targetZmeters">target z position, in meters</param>
            <param name="targetRXrads">target rx position, in radians</param>
            <param name="targetRYrads">target ry position, in radians</param>
            <param name="targetRZrads">target rz position, in radians</param>
            <param name="speedZmetersPs">max z speed, in m/s</param>
            <param name="speedRXradsPs">max rx speed, in rad/s</param>
            <param name="speedRYradsPs">max ry speed, in rad/s</param>
            <param name="speedRZradsPs">max rz speed, in rad/s</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.ShortAxesMotionSI(System.UInt16,System.Int32,PMCLIB.POSITIONMODE,PMCLIB.SHORTAXESCENTERMODE,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Short axes motion command
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">xbot ID</param>
            <param name="positionMode">0 = absolute position mode; 1 = relative position mode</param>        
            <param name="centerMode">rotation center is: 0 = xbot center, 1 = user defined center</param>
            <param name="centerX">user defined rotation center X</param>
            <param name="centerY">user defined rotation center Y</param>
            <param name="targetZmeters">target z position, in meters</param>
            <param name="targetRXrads">target rx position, in radians</param>
            <param name="targetRYrads">target ry position, in radians</param>
            <param name="targetRZrads">target rz position, in radians</param>
            <param name="speedZmetersPs">max z speed, in m/s</param>
            <param name="speedRXradsPs">max rx speed, in rad/s</param>
            <param name="speedRYradsPs">max ry speed, in rad/s</param>
            <param name="speedRZradsPs">max rz speed, in rad/s</param>                       
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.SixDofMotionSI(System.UInt16,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            6DOF motion command
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">xbot ID</param>       
            <param name="targetXmeters">target x position, in meters</param>
            <param name="targetYmeters">target y position, in meters</param>
            <param name="targetZmeters">target z position, in meters</param>
            <param name="targetRXrads">target rx position, in radians</param>
            <param name="targetRYrads">target ry position, in radians</param>
            <param name="targetRZrads">target rz position, in radians</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.SixDofMotionSI(System.UInt16,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            6DOF motion command
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">xbot ID</param>       
            <param name="targetXmeters">target x position, in meters</param>
            <param name="targetYmeters">target y position, in meters</param>
            <param name="targetZmeters">target z position, in meters</param>
            <param name="targetRXrads">target rx position, in radians</param>
            <param name="targetRYrads">target ry position, in radians</param>
            <param name="targetRZrads">target rz position, in radians</param>
            <param name="xyMaxSpeed">maximum xy motion speed</param>
            <param name="xyMaxAccel">maximum xy motion acceleration</param>
            <param name="zMaxSpeed">maximum z speed</param>
            <param name="rxMaxSpeed">maximum rx speed</param>
            <param name="ryMaxSpeed">maximum ry speed</param>
            <param name="rzMaxSpeed">maximum rz speed</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.StopMotion(System.Int32)">
            <summary>
            stop xbot(s) motion
            </summary>
            <param name="xbotID">xbot ID, 0 = all Xbots</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.MotionBufferControl(System.Int32,PMCLIB.MOTIONBUFFEROPTIONS)">
            <summary>
            motion buffer control
            </summary>
            <param name="xbotID">xbot ID</param>
            <param name="bufferOption">0 = block buffer; 1 = unblock buffer; 2 = clear buffer</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.GroupControl(PMCLIB.GROUPOPTIONS,System.Int32,System.Int32,System.Int32[])">
            <summary>
            group control command
            </summary>
            <param name="groupOption">0 = create; 1 = delete; 2 = connect; 3 = disconnect; 4 = block; 5 = release; 6 = query status</param>
            <param name="groupID">group ID</param>
            <param name="xbotCount">number of XBots in the group, only useful for the create option. For other options, send 0</param>
            <param name="xbotIDs">array of XBOT ids in the group, only useful for the create option. For other options, send null</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.GroupControl(PMCLIB.GROUPOPTIONS,System.Int32,PMCLIB.GROUPBONDOPTIONS,System.Int32,System.Int32[])">
            <summary>
            group control command
            </summary>
            <param name="groupOption">0 = create; 1 = delete; 2 = connect; 3 = disconnect; 4 = block; 5 = release; 6 = query status</param>
            <param name="groupID">group ID</param>
            /// <param name="bondOption">the bond option and axis coupling selection for the xbots</param>
            <param name="xbotCount">number of XBots in the group, only useful for the create option. For other options, send 0</param>
            <param name="xbotIDs">array of XBOT ids in the group, only useful for the create option. For other options, send null</param>
            <returns></returns>		
        </member>
        <member name="M:PMCLIB.XBotCommands.BondXbotGroup(System.Int32,System.Boolean,PMCLIB.GROUPBONDOPTIONS)">
            <summary>
            Group bond command
            </summary>
            <param name="groupID">group ID, 0 = bond all groups; >0 = bond specific group</param>
            <param name="isBond">true = bond group(s); false = unbound group(s)</param>
            <param name="bondoptions">0 = decouple mode, 1 = couple mode</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.GetGroupStatus(System.Int32)">
            <summary>
            Queries the status of the specified group
            </summary>
            <param name="groupID">group ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.CreateXbotGroup(System.Int32,System.Int32,System.Int32[])">
            <summary>
            Creates the specified xbot group
            </summary>
            <param name="groupID">group ID (must be greater than 0)</param>
            <param name="xbotCount">number of xbots to be in the group</param>
            <param name="xbotIDs">xbot ID#'s in to be added to the group</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.DeleteXbotGroup(System.Int32)">
            <summary>
            Deletes the specified xbot group
            </summary>
            <param name="groupID">group ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.BlockXbotGroup(System.Int32,System.Boolean)">
            <summary>
            Blocks/Releases the buffer for the specified group
            </summary>
            <param name="groupID">group ID</param>
            <param name="isBlock">true = block buffer; false = release buffer</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.GetXbotStatus(System.Int32)">
            <summary>
            get the full xbot status, including the xbot state amd position data
            </summary>
            <param name="xbotID">xbot id</param>
            <returns>the full status of the xbot</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.GetAllXbotInfo(PMCLIB.ALLXBOTSFEEDBACKOPTION)">
            <summary>
            Gets basic information about all XBots in the system in one command
            </summary>
            <returns>A struct containing basic information for every xbot in the system</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.GetXbotStatus(System.Int32,PMCLIB.FEEDBACKOPTION)">
            <summary>
            get the full xbot status, including the xbot state amd position or force data
            </summary>
            <param name="xbotID">xbot id</param>
            <param name="feedbackType">choose whether the reply should contain position or force data</param>
            <returns>the full status of the xbot</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.GetXBotIDS">
            <summary>
            Returns the XBOT IDs of the XBots detected by the system
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.TrajectoryActivation(System.UInt16,System.Int32,System.Int32[],System.Int32[])">
            <summary>
            Activate trajectory for xbot(s)
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotCount">number of xbots to activate trajectories for</param>
            <param name="xbotIDs">an array containing the xbot IDs</param>
            <param name="trajectoryIDs">an array containing the corresponding trajectory IDs</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.WaitUntil(System.UInt16,System.Int32,PMCLIB.WAITUNTILSTARTOPTION,PMCLIB.TRIGGERSOURCE,PMCLIB.TRIGGERSOURCE,PMCLIB.WaitUntilTriggerParams,PMCLIB.WaitUntilTriggerParams,System.Int32)">
            <summary>
            Let's an XBOT wait until certain conditions are met before executing the next command
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">XBOT ID of the XBOT to wait</param>
            <param name="startOption">if the command should start immediately, or start it at the option specified by the user</param>
            <param name="startingTriggerSource">source of the trigger that will start the wait until monitoring.</param>
            <param name="finishingTriggerSource">source of the trigger that will release the XBOT from waiting</param>
            <param name="startingParameters">parameters for starting the Wait Until command, an empty input here means the Wait Until command should start monitoring after it is executing</param>
            <param name="finishTriggerCount">number of times for the finishing trigger condition to be met, before the wait is released</param>
            <param name="finishingParameters">parameters for finishing the Wait Until command</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.WaitUntil(System.UInt16,System.Int32,PMCLIB.TRIGGERSOURCE,PMCLIB.WaitUntilTriggerParams,PMCLIB.WAITUNTILSTARTOPTION,System.Int32)">
            <summary>
            Only specify the finishing conditions for a WaitUntil command, the monitoring will start when this command is executed
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">XBOT ID of the XBOT to wait</param>
            <param name="triggerSource">source of the trigger that will release the XBOT from waiting</param>
            <param name="triggerParameters">parameters for activating the trigger source</param>
            <param name="startOption">option for start monitoring</param>
            <param name="triggerCount">number of times for the trigger to occur before WaitUntil is released</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.WaitUntil(System.UInt16,System.Int32,PMCLIB.TRIGGERSOURCE,PMCLIB.WaitUntilTriggerParams)">
            <summary>
            wait until a certain condition is met before continuing with XBOT command execution
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID">XBOT ID of the XBOT to wait</param>
            <param name="triggerSource">source of the trigger that will release the XBOT from waiting</param>
            <param name="triggerParameters">parameters for activating the trigger source</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.EditPlanetXbots(System.Int32,System.Int32,System.Int32[],PMCLIB.PLANETOPTIONS)">
            <summary>
            Use this command to edit the planet XBOTs list of a sun XBOT
            </summary>
            <param name="sunXbotID">Sun XBOT ID</param>
            <param name="planetXbotCount">number of planet XBOTs</param>
            <param name="planetXbotIDs">array of planet XBOT IDs</param>
            <param name="action">whether to add the planets or remove the planets</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.PayloadWeighingKg(System.Int32)">
            <summary>
            Provides the weight of the payload, as measured by the specified XBOT
            <br></br>
            This overload is deprecated, please specify weighing time as well
            </summary>
            <param name="xbotID">ID of the XBOT carrying the payload</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.PayloadWeighingKg(System.Int32,System.Double)">
            <summary>
            Provides the weight of the payload, as measured by the specified XBOT
            </summary>
            <param name="xbotID">ID of the XBOT carrying the payload</param>
            <param name="durationSecs"> duration for the XBot to wait while weighing </param>
            <returns> Payloading weighing information </returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.TareMover(System.Int32)">
            <summary>
            Tare Xbot weighing
            </summary>
            <param name="xbotID">xbot ID (>0)</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.MotionInterruptCommand(System.Int32,PMCLIB.MOTIONINTERRUPTOPTIONS)">
            <summary>
            Pause or resume the motion of an Xbot
            </summary>
            <param name="xbotID">XBOT ID</param>
            <param name="motionInterruptOption">0 = Resume, 1 = Pause</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.CamControlCommand(System.UInt16,PMCLIB.CAMOPTIONS,System.Int32,System.Int32,PMCLIB.CamAxisDataClass[])">
            <summary>
            use this command to start or stop cam operations
            </summary>
            <param name="cmdLabel">command label</param>
            <param name="camCmdAction">start or stop cam operation</param>
            <param name="slaveXbotID">XBOT ID of the slave XBOT (it will follow other xbots' motions)</param>
            <param name="axisCount">how many axis of the slave XBOT will be configured by this command</param>
            <param name="camAxisData">detailed axis pairing data</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.CamControlAdvancedCommand(System.UInt16,PMCLIB.CAMOPTIONS,System.Int32,System.Int32,PMCLIB.CamAxisDataClassExtended[])">
            <summary>
            use this command to start or stop cam operations, advanced parameters available
            </summary>
            <param name="cmdLabel">command label</param>
            <param name="camCmdAction">start or stop cam operation</param>
            <param name="slaveXbotID">XBOT ID of the slave XBOT (it will follow other xbots' motions)</param>
            <param name="axisCount">how many axis of the slave XBOT will be configured by this command</param>
            <param name="camAxisData">detailed axis pairing data</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.SetXBotForceMode(System.Int32,PMCLIB.FORCEMODEOPTION,PMCLIB.XBotForceSetting,PMCLIB.FORCEMODETYPE,System.Boolean)">
            <summary>
            Apply open-loop force in user specified direction(s) for a particular XBot
            </summary>
            <param name="xbotID"> XBot to apply force mode </param>
            <param name="forceOption"> Enum to select which axis to apply force mode </param>
            <param name="forceInput"> Force input struct specifying the desired open-loop force/torque magnitudes </param>
            <param name="ForceModeType">Force Mode Type (Absolute or Relative)</param>
            <param name="bufferCommand">If "true", buffers the ForceMode command at the end of the current buffered commands, otherwise, the command executes immediately</param>
            <returns> PMC Return code indicating if command was successful </returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.SetXBotForceMode(System.Int32,PMCLIB.ForceModeAxes,PMCLIB.XBotForceSetting,PMCLIB.FORCEMODETYPE,System.Boolean)">
            <summary>
            Apply open-loop force in user specified direction(s) for a particular XBot
            </summary>
            <param name="xbotID">XBot to apply force mode</param>
            <param name="forceModeAxes">Struct of bools to select which axis to apply force mode, if true turns on Force Mode for that axis</param>
            <param name="forceInput">Force input struct specifying the desired open-loop force/torque magnitudes</param>
            <param name="ForceModeType">Force Mode Type (Absolute or Relative)</param>
            <param name="bufferCommand">If "true", buffers the ForceMode command at the end of the current buffered commands, otherwise, the command executes immediately</param>
            <returns>PMC Return code indicating if command was successful</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.ReleaseXBotForceMode(System.Int32)">
            <summary>
            Release XBot from open-loop force mode
            </summary>
            <param name="xbotID"> The ID of the XBot to release from force mode </param>
            <returns> PMC Return code indicating if command was successful </returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.DefineMoverStereotype(PMCLIB.MOVERTYPE,System.Int32,PMCLIB.MoverStereotypeData)">
            <summary>
            defines a mover stereotype, which can be applied to movers afterwards
            </summary>
            <param name="moverType">mover type</param>
            <param name="stereotypeID">stereotype id</param>
            <param name="stereotypeData">stereotype data</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.DefineMoverStereotype(PMCLIB.XBOTTYPE,System.Int32,PMCLIB.MoverStereotypeData)">
            <summary>
            defines a mover stereotype, which can be applied to movers afterwards
            </summary>
            <param name="moverType">mover type</param>
            <param name="stereotypeID">stereotype id</param>
            <param name="stereotypeData">stereotype data</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.ReadMoverStereotypeDefinition(PMCLIB.MOVERTYPE,System.Int32)">
            <summary>
            provides the full details of a mover stereotype definition
            </summary>
            <param name="moverType">mover type</param>        
            <param name="stereotypeID">stereotype id</param>        
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.ReadMoverStereotypeDefinition(PMCLIB.XBOTTYPE,System.Int32)">
            <summary>
            provides the full details of a mover stereotype definition
            </summary>
            <param name="moverType">mover type</param>        
            <param name="stereotypeID">stereotype id</param>        
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.AssignStereotypeToMover(System.Int32,System.Int32,PMCLIB.ASSIGNSTEREOTYPEOPTION)">
            <summary>
            assign a mover stereotype definition to a mover
            </summary>
            <param name="moverID">mover id</param>  
            <param name="stereotypeID">stereotype id</param> 
            <param name="option">Option to specify either send the AssignStereotype command to buffer or run immediately</param>   
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.AddStereotypeBoundary(PMCLIB.XBOTTYPE,System.Int32,PMCLIB.StereotypeBoundaryData)">
            <summary>
            delete all boundary/parts from stereotype
            </summary>
            <param name="moverType">mover id</param>  
            <param name="stereotypeID">stereotype id</param> 
            <param name="boundaryData">stereotype id</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.DeleteStereotypeBoundaries(PMCLIB.XBOTTYPE,System.Int32)">
            <summary>
            delete all boundary/parts from stereotype
            </summary>
            <param name="moverType">mover id</param>  
            <param name="stereotypeID">stereotype id</param> 
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.ReadStereotypeBoundaries(PMCLIB.XBOTTYPE,System.Int32)">
            <summary>
            provides the full details of a mover stereotype definition
            </summary>
            <param name="moverType">mover type</param>        
            <param name="stereotypeID">stereotype id</param>        
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.AutoLoadingZoneControl(PMCLIB.ALZONEOPERATION,System.Int32,PMCLIB.AutoLoadZoneDefinition)">
            <summary>
            define or delete an auto load zone used to load or unload XBots from external devices onto the Flyway
            </summary>
            <param name="zoneOp">unload xbot from flyway, or load xbot onto flyway</param>
            <param name="zoneID">zone id</param>
            <param name="zoneDefinition">parameters used to define the auto load zone area</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.AutoUnloadXBot(System.Int32,System.Int32)">
            <summary>
            automatically unload an XBot from the flyway using a previously defined auto unloading zone
            </summary>
            <param name="xbotID">xbot id</param>
            <param name="autoUnloadZoneID">zone ID of zone used to unload XBot</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.SetAutoLoadingZoneEmpty(System.Int32)">
            <summary>
            set an auto loading zone as empty, so that the system can load the next XBot
            </summary>
            <param name="autoLoadingZoneID"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.GetAutoLoadingZoneStatus(System.Int32)">
            <summary>
            get the status of an auto loading/unloading zone
            </summary>
            <param name="autoLoadingZoneID">auto loading zone ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.GetAllAccidentXbots">
            <summary>
            Gets the ID and count of all xbots that have been deactivated due to accidents
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.RecoverAccidentXbot(System.Int32,PMCLIB.RECOVERXBOTMODE,PMCLIB.RECOVERXBOTOPTIONS)">
            <summary>
            Recovers the specified xbot after an accident
            </summary>
            <param name="xbotID">ID of the Xbot to be recovered</param>
            <param name="mode">Defines the behabiour of the Xbot after recovering</param>
            <param name="option">Option For Short Axes Posotion After Recovering the XBot</param>
            <returns> PMC return indiciating if command is successful </returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.RunGCode(System.UInt16,System.Int32,System.Int32)">
            <summary>
            Run g-code command
            </summary>
            <param name="cmdLabel">2 byte command label, converted to unsigned short</param>
            <param name="xbotID"> ID of xbot to run g-code motion command with </param>
            <param name="gCodeID"> ID of the g-code to run</param>
            <returns>PMC return code indicating whether the command is successful</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.CreateXbotTrackingFailure(System.Int32,PMCLIB.TRACKINGFAILURETYPE)">
            <summary>
            Injects tracking errors failures to the specified XBot, useful for testing failure handling routines
            </summary>
            <param name="xbotID"> XBot ID to add tracking error failure to</param>
            <param name="errType"> Type of tracking error failure to add</param>
            <returns> PMC return indiciating if command is successful  </returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.RotaryMotionP2P(System.Int32,System.Int32,PMCLIB.ROTATIONMODE,System.Double,System.Double,System.Double,PMCLIB.POSITIONMODE)">
            <summary>
            Rz full Rotation to user specified angle
            </summary>
            <param name="cmdLabel">Rotation command label</param>
            <param name="xbotID">Xbot ID to rotate</param>
            <param name="mode">Rotation mode </param>
            <param name="targetRz"> The target Rz to rotate to, in rad</param>
            <param name="targetRzVel"> The target Rz angular velocity to rotate at, in rad/s</param>
            <param name="targetRzAcc"> The target Rz angular acceleration, in rad/s^2</param>
            <param name="positionMode">0 = absolute position mode; 1 = relative position mode</param>
            <returns> PMC motion command return info </returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.RotaryMotionTimedSpin(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Rotate the xbot around the Rz axis for a specified amount time
            </summary>
            <param name="cmdLabel">Rotation command label</param>
            <param name="xbotID">Xbot ID to rotate</param>
            <param name="targetFinalRz"> The final Rz position to finish rotation at, in rad</param>
            <param name="targetRzVel"> The target Rz angular velocity to rotate at, in rad/s</param>
            <param name="targetRzAcc"> The target Rz angular acceleration, in rad/s^2</param>
            <param name="timeS"> The time to rotate for in s</param>
            <returns> PMC motion command return info </returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.SetJerkLimit(System.Int32,PMCLIB.JERKLIMAXIS,System.Double)">
            <summary>
            Set the jerk limit for a specific xbot and specific axis
            </summary>
            <param name="xbotID"> The xbot ID to set the jerk limit</param>
            <param name="axis"> The axis to set the jerk limit</param>
            <param name="jerkLim">The jerk limit, in m/s^3</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.SetVirtualXbotPosition(System.Int32,PMCLIB.SixDOFInfo)">
            <summary>
            Instantly set the position of a virtual xbot
            </summary>
            <param name="vXbotID">The virtual xbot ID (100-127)</param>
            <param name="positionSI">The 6DOF position to set the virtual xbot to</param>
            <returns>PMC command return code</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.LongAxisJoggingControl(System.Int32,System.Double,System.Double,PMCLIB.JOGGINGOPERATION)">
            <summary>
            Jogs the mover on the XY coordinates
            </summary>
            <param name="XbotID">Mover ID</param>
            <param name="XSpeed">X-Axis Speed (m/s)</param>
            <param name="YSpeed">Y-Axis Speed (m/s)</param>
            <param name="operation">Jogging Operation. Turns On or Turns Off the Jogging</param>
            <returns>PMC command return code</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.ShortAxisJoggingControl(System.Int32,PMCLIB.SHORTAXIS,System.Double,PMCLIB.JOGGINGOPERATION)">
            <summary>
            Jogs the mover in a single direction in the Z, Rx, Ry or Rz axes
            </summary>
            <param name="XbotID">Mover ID</param>
            <param name="Axis">Jogging Axis</param>
            <param name="Speed">Jogging Speed (m/s) or (rad/s)</param>
            <param name="operation">Jogging Operation. Turns On or Turns Off the Jogging</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.LoadPartsToXbots(System.Int32[],System.Int32[])">
            <summary>
            Loads specified parts into the corresponding XBots
            </summary>
            <param name="xbotIDs">Array of XBot IDs</param>
            <param name="partIDs">Array of Part IDs, where ID = 0 removes the part</param>
            <returns>PMC command return code</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.InjectNoiseToXbot(System.Int32,PMCLIB.NOISEOPERATION,PMCLIB.NoiseDefinition[])">
            <summary>
            Injects noise to the specified XBot
            </summary>
            <param name="xbotID">ID of the XBot to inject the noise</param>
            <param name="operation">Noise operation. NOISE_OFF: Disables the noise, NOISE_ON: Enables the noise</param>
            <param name="noiseDefinitions">Array of noise parameters, for each axis</param>
            <returns>PMC command return code</returns>
        </member>
        <member name="M:PMCLIB.XBotCommands.InjectNoiseWithDelayToXbot(System.Int32,PMCLIB.NOISEOPERATION,PMCLIB.NoiseWithDelayDefinition[])">
            <summary>
            Injects noise to the specified XBot with delay
            </summary>
            <param name="xbotID">ID of the XBot to inject the noise</param>
            <param name="operation">Noise operation. NOISE_OFF: Disables the noise, NOISE_ON: Enables the noise</param>
            <param name="noiseWithDelayDefinitions">Array of noise parameters, for each axis</param>
            <returns>PMC command return code</returns>
        </member>
        <member name="T:PMCLIB.PMAppCommands">
            <summary>
            Commands specific to a particular operation or workcell
            </summary>
        </member>
        <member name="M:PMCLIB.PMAppCommands.DiscoverXBOTsInZone(System.Int32)">
            <summary>
            Discover the XBOTs in the specified zone, deprecated
            </summary>
            <param name="zoneID">0 means all zones, otherwise, the zone ID to discover XBOTs in</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.ZoneControl(System.Int32,PMCLIB.ZONEOPERATION)">
            <summary>
            control the zone
            </summary>
            <param name="zoneID">Zone ID</param>
            <param name="zoneOp">Zone Operation, 0 = deactivate zone, 1 = activate zone</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.GetZoneStatus(System.Int32)">
            <summary>
            returns the zone state and the list of XBots inside the zone
            </summary>
            <param name="zoneID">zone id</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.ZoneFenceControl(System.Int32,PMCLIB.FENCEOPERATION)">
            <summary>
            control the zone fence
            </summary>
            <param name="zoneID">Zone ID</param>
            <param name="fenceOp">Zone Operation, 0 = remove the fence, 1 = build the fence</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.QueueControl(PMCLIB.QUEUEOPERATION,System.Int32,PMCLIB.QueueDefinition)">
            <summary>
            create or delete a queue area
            </summary>
            <param name="queueOp">can choose to create or delete a queue area</param>
            <param name="queueID">queue id</param>
            <param name="queueDefinition">if the option is to create a queue, then send the queue definitions here</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.GiveXBotToQueue(System.Int32,System.Int32)">
            <summary>
            After the XBot is placed in the entry area of the queue, use this command to transfer the control of the XBot to the queue management system
            </summary>
            <param name="xbotID">ID of the XBot located inside the entry area of the queue</param>
            <param name="queueID">Queue ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.SetQueueExitEmpty(System.Int32)">
            <summary>
            inform the queue management system that the queue's exit area is empty, so that the next available XBot can be placed in the queue exit area
            </summary>
            <param name="queueID">queue ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.GetQueueStatus(System.Int32)">
            <summary>
            Get the status of a queue
            </summary>
            <param name="queueID">queue ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.GetQueueInfo(System.Int32)">
            <summary>
            Get additional information of a queue including the ID of all managed XBots
            </summary>
            <param name="queueID">queue ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.AutoLoadingZoneControl(PMCLIB.ALZONEOPERATION,System.Int32,PMCLIB.AutoLoadZoneDefinition)">
            <summary>
            define or delete an auto load zone used to load or unload XBots from external devices onto the Flyway
            </summary>
            <param name="zoneOp">unload xbot from flyway, or load xbot onto flyway</param>
            <param name="zoneID">zone id</param>
            <param name="zoneDefinition">parameters used to define the auto load zone area</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.AutoUnloadXBot(System.Int32,System.Int32)">
            <summary>
            automatically unload an XBot from the flyway using a previously defined auto unloading zone
            </summary>
            <param name="xbotID">xbot id</param>
            <param name="autoUnloadZoneID">zone ID of zone used to unload XBot</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.SetAutoLoadingZoneEmpty(System.Int32)">
            <summary>
            set an auto loading zone as empty, so that the system can load the next XBot
            </summary>
            <param name="autoLoadingZoneID"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.GetAutoLoadingZoneStatus(System.Int32)">
            <summary>
            get the status of an auto loading/unloading zone
            </summary>
            <param name="autoLoadingZoneID">auto loading zone ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.CreateStarWheel(System.Int32,PMCLIB.StarWheelDefinition)">
            <summary>
            Create a star wheel
            </summary>
            <param name="wheelID"></param>
            <param name="wheelDefinition"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.DeleteStarWheel(System.Int32)">
            <summary>
            Delete a star wheel
            </summary>
            <param name="wheelID"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.SendXbotToStarWheel(System.Int32,System.Int32)">
            <summary>
            Sends a xbot to a star wheel
            </summary>
            <param name="xbotID"></param>
            <param name="wheelID"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.ReleaseStarWheelExit(System.Int32)">
            <summary>
            Tells wheel module that a xbot has been removed from the module
            </summary>
            <param name="wheelID"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMAppCommands.GetStarWheelStatus(System.Int32)">
            <summary>
            get Star wheel status: 
            1, status of star wheel; 2, xbot ID in exit; 3, locations of start/end;4, status of entrance and exit
            </summary>
            <param name="wheelID"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.LoadDesFile(System.Byte[])">
            <summary>
            load description file
            </summary>
            <param name="data">description file from PMC</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.ReadArray(System.Byte[],System.String,System.Char[]@,System.String)">
            <summary>
            Read char array from configuration buffer
            </summary>
            <param name="data">src:raw data from PMC</param>
            <param name="vName">variable name</param>
            <param name="strIndex">index of each node</param>
            <param name="var">dst:char array</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.ReadArray(System.Byte[],System.String,System.Byte[]@,System.String)">
            <summary>
            Read byte array from configuration buffer
            </summary>
            <param name="data">src:raw data from PMC</param>
            <param name="vName">variable name</param>
            <param name="strIndex">index of each node</param>
            <param name="var">dst:byte array</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.ReadVariable(System.Byte[],System.String,System.Int32@,System.String)">
            <summary>
            Read single Int32 from configuration buffer
            </summary>
            <param name="data">src:raw data from PMC</param>
            <param name="vName">variable name</param>
            <param name="strIndex">index of each node</param>
            <param name="var">dst:int variable</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.ReadArray(System.Byte[],System.String,System.Int32[]@,System.String)">
            <summary>
            Read Int32 array from configuration buffer
            </summary>
            <param name="data">src:raw data from PMC</param>
            <param name="vName">variable name</param>
            <param name="strIndex">index of each node</param>
            <param name="var">dst:int array</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.ReadVariable(System.Byte[],System.String,System.Single@,System.String)">
            <summary>
            Read single float from configuration buffer
            </summary>
            <param name="data">src:raw data from PMC</param>
            <param name="vName">variable name</param>
            <param name="strIndex">index of each node</param>
            <param name="var">dst:float variable</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.ReadArray(System.Byte[],System.String,System.Single[]@,System.String)">
            <summary>
            Read float array from configuration buffer
            </summary>
            <param name="data">src:raw data from PMC</param>
            <param name="vName">variable name</param>
            <param name="strIndex">index of each node</param>
            <param name="var">dst:float array</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.ReadVariable(System.Byte[],System.String,System.Double@,System.String)">
            <summary>
            Read double from configuration buffer
            </summary>
            <param name="data">src:raw data from PMC</param>
            <param name="vName">variable name</param>
            <param name="strIndex">index of each node</param>
            <param name="var">dst:double variable</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.ReadArray(System.Byte[],System.String,System.Double[]@,System.String)">
            <summary>
            Read double array from configuration buffer
            </summary>
            <param name="data">src:raw data from PMC</param>
            <param name="vName">variable name</param>
            <param name="strIndex">index of each node</param>
            <param name="var">dst:double array</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.WriteArray(System.Byte[],System.String,System.Char[],System.String)">
            <summary>
            Write char array to cofiguration buffer
            </summary>
            <param name="data">dst:raw data to PMC</param>
            <param name="vName">variable name</param>
            <param name="strIndex">index of each node</param>
            <param name="var">src:char array</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.WriteArray(System.Byte[],System.String,System.Byte[],System.String)">
            <summary>
            Write byte array to configuration buffer
            </summary>
            <param name="data">dst:raw data to PMC</param>
            <param name="vName">variable name</param>
            <param name="strIndex">index of each node</param>
            <param name="var">src:byte array</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.WriteVariable(System.Byte[],System.String,System.Int32,System.String)">
            <summary>
            Write single Int32 from configuration buffer
            </summary>
            <param name="data">dst:raw data to PMC</param>
            <param name="vName">variable name</param>
            <param name="strIndex">index of each node</param>
            <param name="var">src:int variable</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.WriteArray(System.Byte[],System.String,System.Int32[],System.String)">
            <summary>
            Write Int32 array from configuration buffer
            </summary>
            <param name="data">dst:raw data to PMC</param>
            <param name="vName">variable name</param>
            <param name="strIndex">index of each node</param>
            <param name="var">src:int array</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.WriteVariable(System.Byte[],System.String,System.Single,System.String)">
            <summary>
            Write single float from configuration buffer
            </summary>
            <param name="data">dst:raw data to PMC</param>
            <param name="vName">variable name</param>
            <param name="strIndex">index of each node</param>
            <param name="var">src:float variable</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.WriteArray(System.Byte[],System.String,System.Single[],System.String)">
            <summary>
            Write float array from configuration buffer
            </summary>
            <param name="data">dst:raw data to PMC</param>
            <param name="vName">variable name</param>
            <param name="strIndex">index of each node</param>
            <param name="var">src:float array</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.WriteVariable(System.Byte[],System.String,System.Double,System.String)">
            <summary>
            Write double to configuration buffer
            </summary>
            <param name="data">dst:raw data to PMC</param>
            <param name="vName">variable name</param>
            <param name="strIndex">index of each node</param>
            <param name="var">src:double variable</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCMCS.WriteArray(System.Byte[],System.String,System.Double[],System.String)">
            <summary>
            Write double array to configuration buffer
            </summary>
            <param name="data">dst:raw data to PMC</param>
            <param name="vName">variable name</param>
            <param name="strIndex">index of each node</param>
            <param name="var">src:double array</param>  
            <returns></returns>
        </member>
        <member name="P:PMCLIB.PMCXI.IsTCPCableDisconnected">
            <summary>
            returns whether the cable is disconnected, it is disconnected if the return from the server is 127.1.1.1, deprecated
            </summary>
        </member>
        <member name="M:PMCLIB.PMCXI.ConnectPMC(System.Boolean)">
            <summary>
            searches for PMCs, connects to the first PMC it finds
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCXI.ConnectPMC(System.String,System.Int32)">
            <summary>
            explicitly connects to a particular ip and port
            </summary>
            <param name="ipAddress">ip address of pmc</param>
            <param name="portNumber">assigned port id from pmc</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCXI.GetPMCPortInfo(System.String,System.Boolean)">
            <summary>
            Get the port number from a PMC at a specific IP address, this method is used by the API, so only app access is allowed
            </summary>
            <param name="iPAddress"></param>
            <param name="isApp"></param>        
            <returns>port number if successful, -1 if not successful</returns>
        </member>
        <member name="M:PMCLIB.PMCXI.SendMultiUDPBoardcast(System.Boolean)">
            <summary>
            sends a udp broadcast and returns the string message from the PMC, this will iterate through all network adapters until 1 responds
            this is only used by the ConnectPMC method
            </summary>
            <returns></returns>
        </member>
        <member name="T:PMCLIB.PMCXI.MyUdpClient">
            <summary>
            copied from https://stackoverflow.com/questions/1096142/broadcasting-udp-message-to-all-the-available-network-cards
            </summary>
        </member>
        <member name="M:PMCLIB.PMCXI.CheckPMCConnection">
            <summary>
            check if the existing tcpclient variable is connected
            </summary>
            <returns></returns>
            https://stackoverflow.com/questions/6993295/how-to-determine-if-the-tcp-is-connected-or-not
        </member>
        <member name="M:PMCLIB.PMCXI.ScanConnections(PMCLIB.NetworkDataList@)">
            <summary>
            finds all available PMC connections, on all network adapters
            </summary>
            <param name="netDataList"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCXI.SendAndReceivePMCCmd(System.UInt32,System.UInt32,System.UInt32,System.Boolean,System.Boolean)">
            <summary>
            basic I/O function for sending network commands
            </summary>
            <param name="cmd_id"></param>
            <param name="CMDSize"></param>
            <param name="RCVSize"></param>        
            <param name="requestCompressedReply">set to true if you would like the PMC to compress the reply before sending it</param>
            <param name="bCompressRequest">set to true if you would like the host PC to compress the message before sending to PMC</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCXI.GetTCPReadTimeout(System.UInt32)">
            <summary>
            Calculates the appropriate timeout for a command, in milliseconds
            </summary>
            <param name="cmd_id"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCXI.isTCPFree">
            <summary>
            deprecated
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCXI.CurrIPAddress">
            <summary>
            get ip address of the pmc we are currently connected to
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.PMCXI.ReleaseTCP">
            <summary>
            deprecated
            </summary>
        </member>
        <member name="M:PMCLIB.PMCXI.ConnectionEventTrigger">
            <summary>
            sends the events
            </summary>
        </member>
        <member name="T:PMCLIB.PMLibCompatibility">
            <summary>
            required to provide compatibility workarounds for commands
            </summary>
        </member>
        <member name="P:PMCLIB.PMLibCompatibility.IsStereotypeIDInXbotStatus">
            <summary>
            does get xbot status command contain stereotype ID in return?
            </summary>
        </member>
        <member name="T:PMCLIB.Properties.Resources">
            <summary>
              A strongly-typed resource class, for looking up localized strings, etc.
            </summary>
        </member>
        <member name="P:PMCLIB.Properties.Resources.ResourceManager">
            <summary>
              Returns the cached ResourceManager instance used by this class.
            </summary>
        </member>
        <member name="P:PMCLIB.Properties.Resources.Culture">
            <summary>
              Overrides the current thread's CurrentUICulture property for all
              resource lookups using this strongly typed resource class.
            </summary>
        </member>
        <member name="P:PMCLIB.Properties.Resources.DefaultConfiguration">
            <summary>
              Looks up a localized resource of type System.Byte[].
            </summary>
        </member>
        <member name="F:PMCLIB.TM4AZoneStatus.vFactor">
            override factors
        </member>
        <member name="F:PMCLIB.TM4AZoneStatusEx.vFactor">
            override factors
        </member>
        <member name="M:PMCLIB.TM4A.RebootPMC(System.Int32)">
            <summary>
            reboot PMC
            </summary>
            <param name="mode">0--cold reboot; 1--warm reboot</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.SetMachineConstant(System.Int32,System.Byte[])">
            <summary>
            write user configuration parameters to PMC
            </summary>
            <param name="type">0--system configuration;1--trajectory config;2---cam config;3---macro config</param>
            <param name="uc_mcs">data buffer</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetMachineConstant(System.Int32,System.Byte[]@,System.UInt32)">
            <summary>
            read user configuration parameters from PMC
            </summary>
            <param name="type">0--system configuration;1--trajectory config;2---cam config;3---macro config</param>
            <param name="uc_mcs_ary"></param>
            <param name="arraySize"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.SetUserCalibration(PMCLIB.TM4AUserCalibInfo)">
            <summary>
            write user calibration data to PMC
            </summary>
            <param name="uCalib">user calibration data buffer</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetUserCalibration(PMCLIB.TM4AAllUserCalibInfo@)">
            <summary>
            read user calibration data from PMC
            </summary>
            <param name="uCalib">user calibration data</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.SetMoverToMoverCompensation(PMCLIB.TM4AAllXbotCompData)">
            <summary>
            write user calibration data to PMC
            </summary>
            <param name="uCalib">user calibration data buffer</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetMoverToMoverCompensation(PMCLIB.TM4AAllXbotCompData@)">
            <summary>
            read grid compensation data from PMC
            </summary>
            <param name="uCalib">user calibration data</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.SetGridCompensation(PMCLIB.TM4AGridCompTable)">
            <summary>
            write grid compensation data to PMC
            </summary>
            <param name="gridComp">user calibration data buffer</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetGridCompensation(PMCLIB.TM4AGridCompTable@)">
            <summary>
            read user calibration data from PMC
            </summary>
            <param name="gridComp">user calibration data</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.WriteHighPerformanceCompensation(System.Int32,System.Int32,System.Int32,System.Single,PMCLIB.TM4AHPerfCompensation)">
            <summary>
            write high performance compensation data to PMC
            </summary>
            <param name="xbotID">absolute xbot ID</param>
            <param name="mode">0--write to both harddrive and RAM;1---write to RAM only</param>
            <param name="type">compensation type:0--sensing;1---force</param>
            <param name="pathLoc">compensation path location</param>
            <param name="hPerfComp">compensation data buffer</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.ReadHighPerformanceCompInfo(PMCLIB.TM4AHPerfCompInfo@)">
            <summary>
            read high performance compensation info from PMC
            </summary>
            <param name="hPerfCompInfo">compensation info</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.DeleteHighPerformanceCompensation(System.Int32,System.Int32)">
            <summary>
            delete high performance compensation table from PMC
            </summary>
            <param name="xbotID">0--delete all compensation table;>0 delete xbot releated compensation</param>
            <param name="tabID">0--delete all compensation related to specific xbot;>0--delete single table</param>
            <returns></returns>
        </member>
        <member name="T:PMCLIB.TM4A.TM4AMasterShipStatus">
            <summary>
            status monitoring parameters for mastership check
            </summary>
        </member>
        <member name="P:PMCLIB.TM4A.TM4AMasterShipStatus.IsMaster">
            <summary>
            returns true if current program is the master, or false if the program is not the master
            </summary>
        </member>
        <member name="P:PMCLIB.TM4A.TM4AMasterShipStatus.IsGatewayBlocked">
            <summary>
            returns true if the current program is the master and another program is trying to acquire mastership, returns false otherwise
            </summary>
        </member>
        <member name="P:PMCLIB.TM4A.TM4AMasterShipStatus.PrevCmdStatus">
            <summary>
            reports whether the previous command had any issues with being processed
            </summary>
        </member>
        <member name="M:PMCLIB.TM4A.MasterShipControl(System.Int32,System.Int32)">
            <summary>
            mastership control command, either acquire, or release mastership status
            </summary>
            <param name="ctrl">0 is release mastership, 1 is acquire mastership</param>
            <param name="mode">0 is acquire mastership immediately, 1 is acquire master after current command has finished</param>        
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.MasterShipControl(PMCLIB.TM4A.TM4AMasterShipStatus@,System.Int32,System.Int32)">
            <summary>
            mastership control command, monitor mastership status. Automatically sets ctrl = 2 (monitor), and mode = 0 (irrelevant)
            </summary>
            <param name="mastershipStat">TM4AMasterShipStatus struct storing relevant mastership status parameters</param>
            <param name="ctrl">0 is release mastership, 1 is acquire mastership, 2 is monitor mastership status</param>
            <param name="mode">0 is acquire mastership immediately, 1 is acquire master after current command has finished</param>  
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetPMCDynInfo(System.Single@,System.Single[]@)">
            <summary>
            read PMC dynamic information from PMC, including CPU temperature and usage. some other info may be added in the future
            </summary>
            <param name="cpuTemp">CPU temperature (degree)</param>
            <param name="cpuUsage">CPU usage in percentage: 0--linux core;1--real time core 1;2--real tme core 2</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.SetXbotOrientation(System.Int32,System.Int32)">
            <summary>
            Set xbot orientation before activation (absolute ID mode only).
            </summary>
            <param name="xbotID">0: all xbots; >0: single xbot</param>
            <param name="ori">0--0deg;1--90deg;2--180deg;3--270deg</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.DefineZone(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Re-define loading/unloading zone
            </summary>
            <param name="zID"> zone ID(>0) </param>
            <param name="xbl"> X position of bottom left corner of zone</param>
            <param name="ybl"> Y position of bottom left corner of zone</param>
            <param name="xtr"> X position of top right corner of zone</param>
            <param name="ytr"> Y position of top right corner of zone</param>
            <param name="zlimit"> 0: regular zone; >0: intersection zone with certain limitation</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.DefineZoneZLimited(System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Define zone with height limit
            </summary>
            <param name="zID"> zone ID(>0) </param>
            <param name="xbl"> X position of bottom left corner of zone</param>
            <param name="ybl"> Y position of bottom left corner of zone</param>
            <param name="xtr"> X position of top right corner of zone</param>
            <param name="ytr"> Y position of top right corner of zone</param>
            <param name="hlimit"> (>0.5mm)height limit of zone</param>
            <param name="zlimit"> 0: regular zone; >0: intersection zone with certain limitation</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.ZoneControl(System.Int32,System.Int32)">
            <summary>
            set loading/unloading zone
            </summary>
            <param name="zID"> zone ID(>0) </param>
            <param name="level"> zone control level(0: deactivate zone;1: activate zone;) </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.ZoneFenceControl(System.Int32,System.Int32)">
            <summary>
            zone startup to discover movers inside the zone
            </summary>
            <param name="zID"> 0 zone ID </param>
            <param name="level"> 0:fence off;1: fence on </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.OverrideZone(System.Int32,System.Single,System.Single,System.Int32)">
            <summary>
            override the speed and acceleration of xbot(s) passing through specific zone
            </summary>
            <param name="zID"> 0 zone ID </param>
            <param name="vFactor"> override speed factor[0-2] </param>
            <param name="aFactor"> override acceleration factor[0.001-2] </param>
            <param name="mode"> 0: ratio based override; 1: override with absolute limit </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.AddXbotsToZone(System.Int32,System.Int32,System.Int32[],System.Single[],System.Single[])">
            <summary>
            add xbots to zone in emulation mode
            </summary>
            <param name="zID"> 0 zone ID </param>
            <param name="xNum"> number of xbots add to zone[0-32] </param>
            <param name="mType"> mover type of each individual xbot </param>
            <param name="posX"> X position of each xbot </param>
            <param name="posY"> Y position of each xbot </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.ZoneCollisionControl(System.Int32,System.Int32)">
            <summary>
            enable/disable rz for collision control
            </summary>
            <param name="zID"></param>
            <param name="level">0:enable rz; 1: disable rz</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.RemoveXbotsFromZone(System.Int32)">
            <summary>
            remove all xbots from zone in emulation mode
            </summary>
            <param name="zID"> 0 zone ID </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetZoneStatus(System.Int32,PMCLIB.TM4AZoneStatus@)">
            <summary>
            Get zone status: 
            1. zone state(0: FREE;1: wait for loading;2: discovering;3: wait for unloading)
            2. number of movers inside the zone
            3. xbot ID
            </summary>
            <param name="zID"> 0 zone ID </param>
            <param name="zStatus"> zone status </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetZoneStatus(System.Int32,PMCLIB.TM4AZoneStatusEx@)">
            <summary>
            Get zone status: 
            1. zone state(0: FREE;1: wait for loading;2: discovering;3: wait for unloading)
            2. number of movers inside the zone
            3. xbot ID
            </summary>
            <param name="zID"> 0 zone ID </param>
            <param name="zStatus"> zone status </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetZoneInfo(System.Int32,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Get defined zone boundary including external and internal zones
            </summary>
            <param name="zID"> 0 zone ID </param>
            <param name="xbl"> X position of bottom left corner of zone</param>
            <param name="ybl"> Y position of bottom left corner of zone</param>
            <param name="xtr"> X position of top right corner of zone</param>
            <param name="ytr"> Y position of top right corner of zone</param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.SectorControl(System.Int32,System.Int32)">
            <summary>
            activate/deactivate specific sector
            </summary>
            <param name="sectorID"> sector ID(>0) </param>
            <param name="level"> sector control level(0: deactivate sector;1: activate sector;) </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.SectorRecover(System.Int32)">
            <summary>
            remove sector fences after it's activated
            </summary>
            <param name="sectorID"> sector ID(>0) </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetSectorStatus(System.Int32,PMCLIB.TM4ASectorStatus@)">
            <summary>
            Get sector status: 
            1. sector state
            2. number of movers inside the zone
            3. xbot ID
            </summary>
            <param name="sectorID"> 0 sector ID </param>
            <param name="sStatus"> sector status </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetPMCBorderStatus(System.Int32,System.Int32@)">
            <summary>
            Get PMC border status 
            </summary>
            <param name="bdID"> border ID>0 </param>
            <param name="status"> border status(0--disconnected;1--connected but not ready;2--border is ready) </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetNewXbotFromBorder(System.Int32@,System.Int32[]@,System.Int32[]@)">
            <summary>
            Get new xbot info. from all borders, buffer will be reset after calling this command
            </summary>
            <param name="nXbot"> number of new xbots </param>
            <param name="bdID"> border ID (>0) for each new xbot </param>
            <param name="xbotID"> xbot ID (>0) for each new xbot </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetXbotLabel(System.Int32,System.Int32@)">
            <summary>
            Get xbot label
            </summary>
            <param name="xbotID"> xbot ID > 0 </param>
            <param name="xbotLabel"> xbot label > 0 </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.SetXbotLabel(System.Int32,System.Int32)">
            <summary>
            Set xbot label
            </summary>
            <param name="xbotID"> xbot ID > 0 </param>
            <param name="xbotLabel"> xbot label > 0 </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetXbotIDFromLabel(System.Int32,System.Int32@)">
            <summary>
            Get xbot ID based on label
            </summary>        
            <param name="xbotLabel"> xbot label > 0 </param>
            <param name="xbotID"> xbot ID > 0 </param>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetAllMoversPos(PMCLIB.TM4AAllMoverPos@,System.Int32)">
            <summary>
            Get all xbot information
            </summary>
            <param name="AllMPos"> All xbot info</param>
            <param name="mode"> 0 = feedback, 1 = reference </param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetPMCTime(PMCLIB.TM4ATimeStruct@)">
            <summary>
            Get current PMC time
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.SetPMCTime(PMCLIB.TM4ATimeStruct)">
            <summary>
            Set current PMC time
            </summary>
            <param name="time"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetPMCSerialNo(System.UInt32@,System.UInt32@)">
            <summary>
            Get PMC controller serial No.
            </summary>
            <param name="lowLW">lower 32bits</param>
            <param name="upperLW">upper 32bits</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetFlywaySerialNo(System.Int32,System.UInt32@,System.UInt32@)">
            <summary>
            Get flyway serial No.
            </summary>
            <param name="flwID">logic flyway ID(>0)</param>
            <param name="lowLW">lower 32bits</param>
            <param name="upperLW">upper 32bits</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetLicenseInfo(System.Int32@,System.Int32@)">
            <summary>
            gets license info. from PMC
            </summary>
            <param name="maxFlw">max. number of flyways</param>
            <param name="maxMover">max. number of movers</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.SetPMCIPAddr(System.Int32[])">
            <summary>
            Set PMC IP Address
            </summary>
            <param name="IPAddr">PMC IP Address</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.ConfigPMCIP(System.Int32[],System.Int32[],System.Int32[])">
            <summary>
            Configure PMC IP: address/netmask/gateway
            </summary>
            <param name="IPAddr">PMC IP Address</param>
            <param name="NetMask">PMC IP Address</param>
            <param name="Gateway">PMC IP Address</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.ReadPMCIPInfo(System.Int32[]@,System.Int32[]@,System.Int32[]@)">
            <summary>
            Read PMC IP info: address/netmask/gateway
            </summary>
            <param name="IPAddr">PMC IP Address</param>
            <param name="NetMask">PMC IP Address</param>
            <param name="Gateway">PMC IP Address</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GatewayControl(System.Boolean,System.Boolean)">
            <summary>
            block/unblock all gateways
            </summary>
            <param name="isBlock">TRUE:block all gateways; FALSE: unblock all gateways</param>
            <param name="requirePMTMastership">TRUE: PMT must be master before sending this command; FALSE: PMT can send this command at any time</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetErrLogInfo(System.String[]@,System.Boolean)">
            <summary>
            gets the error log or warning log information
            </summary>
            <param name="ErrLogInfo">the output error / warning log info</param>
            <param name="GetWarningInfo">true = get warning log. default of false means get the error log</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.DeleteErrLogInfo(System.Int32)">
            <summary>
            delete the content of log files (Warning log and error log)
            </summary>
            <param name="level">0: all files;1: warning log file; 2: error log file</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.ActivateTm4aAm4aParameters(System.Int32,System.Int32)">
            <summary>
            activate tm4a and am4a parameters
            </summary>
            <param name="flywayCount">total number of flyways</param>
            <param name="rescanFlyways">1 = trigger a flyway scan, other values, no scan</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.ReadUCMCSDes(System.Byte[]@)">
            <summary>
            read description file of user configuration from PMC
            </summary>
            <param name="DesInfo">description file info</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.ReadFCMCSDes(System.Byte[]@)">
            <summary>
            read description file of factory configuration from PMC
            </summary>
            <param name="DesInfo">description file info</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.SetPMCConfigXML(System.Int32,System.Byte[])">
            <summary>
            Set PMC configuration in XML format
            </summary>
            <param name="fsize">XML config. file size</param>
            <param name="data">XML config. file data in binary</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.SetPMCConfigXML(System.Int32,System.Byte[],PMCLIB.TM4ASetPMCConfigXMLStruct@)">
            <summary>
            Set PMC configuration in XML format
            </summary>
            <param name="fsize">XML config. file size</param>
            <param name="data">XML config. file data in binary</param>
            <param name="errInfo">Struct containing error info, if any</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetPMCConfigXML(System.Byte[]@)">
            <summary>
            Get PMC configuration in XML format
            </summary>
            <param name="data">XML config. file in binary</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetWiringInformation(System.Byte[],System.Int32,System.Int32[0:,0:]@)">
            <summary>
            Get the wiring info for the given XML config
            </summary>
            <param name="data">XML config. file data in binary</param>
            <param name="fsize">XML config. file size</param>
            <param name="wiringInfo">wiring info 2D array</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetWiringInformation(System.Byte[],System.Int32,PMCLIB.TM4AWiringInfoStruct@)">
            <summary>
            Get the wiring info for the given XML config
            </summary>
            <param name="data">XML config. file data in binary</param>
            <param name="fsize">XML config. file size</param>
            <param name="wiringInfo">wiring info 2D array and error flyway info</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.SetCtrlWord(System.Int32,PMCLIB.TM4AFlwCtrlWordStruct)">
            <summary>
            Set a flyway's control words
            </summary>
            <param name="flwID"></param>
            <param name="cw"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetCtrlWord(System.Int32,PMCLIB.TM4AFlwCtrlWordStruct@)">
            <summary>
            Get a flyway's control words
            </summary>
            <param name="flwID"></param>
            <param name="cw"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.SetHDMICommPath(PMCLIB.CLUSTERSEARCHMETHOD,System.String@)">
            <summary>
            Set HDMI communication path
            </summary>
            <param name="method">communication path method</param>
            <param name="errMsgBuf">error messages, if any</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetHDMICommPath(PMCLIB.TM4AHDMIConnParams[]@,System.String@)">
            <summary>
            Get HDMI communication path
            </summary>
            <param name="config">Array of structs containing path communication info for each flyway, sorted by node</param>
            <param name="errMsgBuf">error messages, if any</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.SaveGCode(System.Int32,System.Int32,System.Byte[])">
            <summary>
            save gcode file to PMC
            </summary>
            <param name="gcodeID">>0</param>
            <param name="fsize">gcode file size</param>
            <param name="data">gcode file data in binary</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.DeleteGCode(System.Int32)">
            <summary>
            Delete one or all gcodes from PMC
            </summary>
            <param name="gcodeID">>0</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.ReadGCode(System.Int32,System.Byte[]@)">
            <summary>
            read gcode file from PMC
            </summary>
            <param name="gcodeID">gcode ID (>0)</param>
            <param name="data">gcode file</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetGCodeInfo(System.Int32@,System.Int32[]@)">
            <summary>
            Get gcode info. from PMC
            </summary>
            <param name="nGCode">number of GCode</param>
            <param name="gcodeID">gcode ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.TcpFieldbusCommControl(System.Boolean)">
            <summary>
            TCP/IP fieldbus communication control
            </summary>
            <param name="TCPFbOn">true:TCP fieldbus enable;false: TCP fieldbus disable</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.FBSnapshotControl(System.Boolean)">
            <summary>
            enable/disable fieldbus snapshot
            </summary>
            <param name="isEnable">true:enable snapshot;false: disable snapshot</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetFBSnapshotStatus(System.Boolean@,System.Int32@)">
            <summary>
            Get fieldbus snapshot status
            </summary>
            <param name="isEnable">true:enable snapshot;false: disable snapshot</param>
            <param name="fileID">the latest file ID of snapshot</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.SendReceiveFbBytes(System.Byte[],System.Byte[]@)">
            <summary>
            periodically read/write fieldbus frame from/to PMC via TCP/IP
            </summary>
            <param name="Plc2Pmc">400B from PLC to PMC</param>
            <param name="Pmc2Plc">400B from PMC to PLC</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.ActivateXIDReading(System.Int32)">
            <summary>
            Activates the XID Reading for a flyway
            </summary>
            <param name="tile_id">Tile ID</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetXIDReadingStatus(System.Int32,System.Int32@)">
            <summary>
            Gets the status of the XID Reading for a flyway
            </summary>
            <param name="tile_id">Tile ID</param>
            <param name="status">Status</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetXIDResult(System.Int32,System.Int32@,System.UInt32@,System.UInt32@)">
            <summary>
            Gets XID Result
            </summary>
            <param name="tile_id"></param>
            <param name="xIDSta"></param>
            <param name="xIDLow"></param>
            <param name="xIDHigh"></param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.ResetFatalErrCnt(System.Int32)">
            <summary>
            reset fatal error counter
            </summary>
            <param name="xbotID">0---all xbots; > 0---single xbot</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.ReadFatalErrCnt(System.Int32,System.Int32[],System.Int16[]@)">
            <summary>
            Read fatal error counter of all XBots
            </summary>
            <param name="nXbot">total number of XBots</param>
            <param name="errCnt">fatal error counter of all XBots</param>
            <param name="xbotID">XBot IDs array</param>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.DeleteAllSnapshots">
            <summary>
            Delete all snapshots from ../data/snapshots folder
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.TM4A.StartDSA(System.Int32,PMCLIB.TM4ADSAInfo)">
            <summary>
            DSA vibration, or Dynamic Signal Analyzer vibration
            </summary>
            <param name="tileID">Flyway ID</param>
            <param name="DSAInfo">Ref to TM4ADSAInfo</param>
            <returns>PMC Return</returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetDSAStatus(System.Int32@)">
            <summary>
            Gets status of a DSA
            </summary>
            <param name="status">DSA Status</param>
            <returns>PMC Return</returns>
        </member>
        <member name="M:PMCLIB.TM4A.GetDSAResult(System.Single[]@,System.Single[]@)">
            <summary>
            Returns the collected data set in the StartDSA
            </summary>
            <param name="Xw">Data of excitation axis</param>
            <param name="Yw">Data of trace axis </param>
            <returns>PMC Return</returns>
        </member>
        <member name="M:PMCLIB.TM4A.StopDSA(System.Int32)">
            <summary>
            Stopping a DSA set on a flyway
            </summary>
            <param name="tileID">Flyway ID</param>
            <returns>PMC Return</returns>
        </member>
        <member name="T:PMCLIB.Trace.TRACETYPE">
            <summary>
            Enum for the Available Trace Parameters
            </summary>
        </member>
        <member name="T:PMCLIB.Trace.TRACETRIGGEREVENT">
            <summary>
            Enum for the Trigger Event
            </summary>
        </member>
        <member name="F:PMCLIB.Trace.TRACETRIGGEREVENT.SW_TRIGGER">
            <summary>
            Software Trigger
            </summary>
        </member>
        <member name="F:PMCLIB.Trace.TRACETRIGGEREVENT.MOTION_START_TRIGGER">
            <summary>
            Triggers Trace After Motion Started
            </summary>
        </member>
        <member name="F:PMCLIB.Trace.TRACETRIGGEREVENT.MOTION_STOP_TRIGGER">
            <summary>
            Triggers Trace After Motion Stopped
            </summary>
        </member>
        <member name="F:PMCLIB.Trace.TRACETRIGGEREVENT.FIELDBUS_TRIGGER">
            <summary>
            Triggers Trace After Fieldbus digital input (rising edge)
            </summary>
        </member>
        <member name="T:PMCLIB.Trace.TraceAxis">
            <summary>
            Axis options to trace
            </summary>
        </member>
        <member name="F:PMCLIB.Trace.TraceAxis.X">
            <summary>
            X Axis
            </summary>
        </member>
        <member name="F:PMCLIB.Trace.TraceAxis.Y">
            <summary>
            Y Axis
            </summary>
        </member>
        <member name="F:PMCLIB.Trace.TraceAxis.Z">
            <summary>
            Z Axis
            </summary>
        </member>
        <member name="F:PMCLIB.Trace.TraceAxis.Rx">
            <summary>
            Rx Axis
            </summary>
        </member>
        <member name="F:PMCLIB.Trace.TraceAxis.Ry">
            <summary>
            Ry Axis
            </summary>
        </member>
        <member name="F:PMCLIB.Trace.TraceAxis.Rz">
            <summary>
            Rz Axis
            </summary>
        </member>
        <member name="T:PMCLIB.Trace.SignalOption">
            <summary>
            Signal Option (Reference or Feedback)
            </summary>
        </member>
        <member name="F:PMCLIB.Trace.SignalOption.Reference">
            <summary>
            Reference
            </summary>
        </member>
        <member name="F:PMCLIB.Trace.SignalOption.Feedback">
            <summary>
            Feedback
            </summary>
        </member>
        <member name="T:PMCLIB.Trace.ITraceTrigger">
            <summary>
            Trace Trigger Interface
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.ITraceTrigger.TrigType">
            <summary>
            Triger Type
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.ITraceTrigger.ID">
            <summary>
            The ID of the XBot or Fieldbus Signal that triggers the trace
            </summary>
        </member>
        <member name="T:PMCLIB.Trace.SoftwareTrigger">
            <summary>
            Object for Software Trigger
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.SoftwareTrigger.TrigType">
            <summary>
            Triger Type (Software Trigger)
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.SoftwareTrigger.ID">
            <summary>
            The ID of the XBot that triggers the trace. 
            For software-triggered traces, this value is not needed and is always set to 0.
            </summary>
        </member>
        <member name="T:PMCLIB.Trace.MotionStartTrigger">
            <summary>
            Object for Motion Trigger
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.MotionStartTrigger.TrigType">
            <summary>
            Trigger Type (Motion Start Trigger)
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.MotionStartTrigger.ID">
            <summary>
            The ID of the XBot or Fieldbus Signal that triggers the trace
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.MotionStartTrigger.XBotID">
            <summary>
            The ID of the XBot that triggers the trace
            </summary>
        </member>
        <member name="M:PMCLIB.Trace.MotionStartTrigger.#ctor(System.Int32)">
            <summary>
            Creates a Motion Start Trigger Object
            </summary>
            <param name="xBotID">The ID of the XBot that triggers the trace</param>
        </member>
        <member name="T:PMCLIB.Trace.MotionStopTrigger">
            <summary>
            Object for Motion Trigger
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.MotionStopTrigger.TrigType">
            <summary>
            Trigger Type (Motion Stop Trigger)
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.MotionStopTrigger.ID">
            <summary>
            The ID of the XBot or Fieldbus Signal that triggers the trace
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.MotionStopTrigger.XBotID">
            <summary>
            The ID of the XBot that triggers the trace
            </summary>
        </member>
        <member name="M:PMCLIB.Trace.MotionStopTrigger.#ctor(System.Int32)">
            <summary>
            Creates a Motion Stop Trigger Object
            </summary>
            <param name="xBotID">The ID of the XBot that triggers the trace</param>
        </member>
        <member name="T:PMCLIB.Trace.FieldbusTrigger">
            <summary>
            Object for fieldbus Trigger
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.FieldbusTrigger.TrigType">
            <summary>
            Trigger Type (Motion Stop Trigger)
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.FieldbusTrigger.ID">
            <summary>
            The ID of the XBot or Fieldbus Signal that triggers the trace
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.FieldbusTrigger.FBTriggerID">
            <summary>
            The ID of the XBot that triggers the trace
            For fieldbus-triggered traces, this value is used to store the bit that
            triggers the event. Can be 1-128.
            </summary>
        </member>
        <member name="M:PMCLIB.Trace.FieldbusTrigger.#ctor(System.Int32)">
            <summary>
            Creates a Fieldbus Trigger Object
            </summary>
            <param name="fbTrigger">The fieldbus bit 1-128 that triggers the trace</param>
        </member>
        <member name="T:PMCLIB.Trace.SingleTrace">
            <summary>
            Single Trace Object
            </summary>
        </member>
        <member name="M:PMCLIB.Trace.SingleTrace.#ctor(PMCLIB.Trace.TRACETYPE,System.Int32,System.Double,PMCLIB.Trace.ITraceTrigger)">
            <summary>
            Constructor of the Single Trace Object
            </summary>
            <param name="parameter">Trace Parameter</param>
            <param name="xbotOrFlywayID">Mover ot Tile ID</param>
            <param name="traceDurationSecond">Trace Duration in Second</param>
            <param name="startTriggerEvent">Start Trigger event object. It can be MotionStartTrigger, MotionStopTrigger or SoftwareTrigger</param>
        </member>
        <member name="M:PMCLIB.Trace.SingleTrace.#ctor(PMCLIB.Trace.TRACETYPE,System.Int32,PMCLIB.Trace.ITraceTrigger,PMCLIB.Trace.ITraceTrigger)">
            <summary>
            Constructor of the Single Trace Object
            </summary>
            <param name="parameter">Trace Parameter</param>
            <param name="xbotOrFlywayID">Mover ot Tile ID</param>
            <param name="startTriggerEvent">Start Trigger event object. It can be MotionStartTrigger, MotionStopTrigger or SoftwareTrigger</param>
            <param name="endTriggerEvent">End Trigger event object. It can be MotionStartTrigger, MotionStopTrigger or SoftwareTrigger</param>
            <exception cref="T:System.Exception">Throws an exception if it fails to create the trace.</exception>
        </member>
        <member name="M:PMCLIB.Trace.SingleTrace.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="T:PMCLIB.Trace.SingleTrace.DOMAIN">
            <summary>
            Enum To Specify the Trace Domain
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.SingleTrace.TraceType">
            <summary>
            Trace Parameter
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.SingleTrace.SamplingTimeMilliSec">
            <summary>
            Sampling Time
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.SingleTrace.TraceStopTrigger">
            <summary>
            Stop Trace Trigger Event
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.SingleTrace.TraceID">
            <summary>
            Trace ID
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.SingleTrace.TraceData">
            <summary>
            Returns the Trace Data if the trace is ready
            </summary>
        </member>
        <member name="M:PMCLIB.Trace.SingleTrace.AssignTraceParams">
            <summary>
            Assigns All Trace Parameters Based of the Input
            </summary>
        </member>
        <member name="M:PMCLIB.Trace.SingleTrace.GetTraceStatistic">
            <summary>
            Evaluates the Max, Min, Mean and 3Sigma of the traced data
            </summary>
            <returns>The Struct which has the Max, Mean, Min and 3Sigma of the data</returns>
        </member>
        <member name="M:PMCLIB.Trace.SingleTrace.StopTrace">
            <summary>
            Stops Current Trace
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.Trace.SingleTrace.StopAndDeallocateTrace">
            <summary>
            Deallocates the current Trace
            </summary>
            <returns></returns>
        </member>
        <member name="M:PMCLIB.Trace.SingleTrace.Dispose">
            <summary>
            Implements IDisposable to stop and deallocate the trace resources.
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.SingleTrace.IsTraceReady">
            <summary>
            Indicates If the Trace Data is Ready or Not
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.SingleTrace.TraceDataArray">
            <summary>
            Traced Data
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.SingleTrace.MoverID">
            <summary>
            Mover ot Tile ID
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.SingleTrace.TraceStartTrigger">
            <summary>
            Trace Trigger Event Object
            </summary>
        </member>
        <member name="P:PMCLIB.Trace.SingleTrace.TraceDurationSec">
            <summary>
            Trace Duration in Second
            </summary>
        </member>
        <member name="T:PMCLIB.Trace.TraceHelper">
            <summary>
            Static Classes which contains the methods to make trace easier
            </summary>
        </member>
        <member name="M:PMCLIB.Trace.TraceHelper.TracePosition(PMCLIB.Trace.TraceAxis,PMCLIB.Trace.SignalOption,System.Int32,System.Double,PMCLIB.Trace.ITraceTrigger)">
            <summary>
            Traces the XBot position for the specified axis.
            </summary>
            <param name="Axis">The axis to trace for force.</param>
            <param name="SignalOption">Specifies whether to trace the reference or feedback signal.</param>
            <param name="XBotID">The ID of the XBot to trace.</param>
            <param name="TraceDuration">Duration of the trace in seconds.</param>
            <param name="StartTriggerEvent">Event that triggers the trace (e.g., SoftwareTrigger or MotionTrigger)</param>
            <returns>A SingleTrace object that manages the trace and provides access to the trace data.</returns>
            <exception cref="T:System.Exception">Throws an exception if it fails to create the trace.</exception>
        </member>
        <member name="M:PMCLIB.Trace.TraceHelper.TraceForce(PMCLIB.Trace.TraceAxis,PMCLIB.Trace.SignalOption,System.Int32,System.Double,PMCLIB.Trace.ITraceTrigger)">
            <summary>
            Traces the XBot force for the specified axis.
            </summary>
            <param name="Axis">The axis to trace for force.</param>
            <param name="SignalOption">Specifies whether to trace the reference or feedback signal.</param>
            <param name="XBotID">The ID of the XBot to trace.</param>
            <param name="TraceDuration">Duration of the trace in seconds.</param>
            <param name="StartTriggerEvent">Event that triggers the trace (e.g., SoftwareTrigger or MotionTrigger).</param>
            <returns>A SingleTrace object that manages the trace and provides access to the trace data.</returns>
            <exception cref="T:System.Exception">Throws an exception if it fails to create the trace.</exception>
        </member>
        <member name="M:PMCLIB.Trace.TraceHelper.TracePositionError(PMCLIB.Trace.TraceAxis,System.Int32,System.Double,PMCLIB.Trace.ITraceTrigger)">
            <summary>
            Traces the XBot position error for the specified axis.
            </summary>
            <param name="Axis">The axis to trace for position error.</param>
            <param name="XBotID">The ID of the XBot to trace.</param>
            <param name="TraceDuration">Duration of the trace in seconds.</param>
            <param name="StartTriggerEvent">Event that triggers the trace (e.g., SoftwareTrigger or MotionTrigger).</param>
            <returns>A SingleTrace object that manages the trace and provides access to the trace data.</returns>
            <exception cref="T:System.Exception">Throws an exception if it fails to create the trace.</exception>
        </member>
        <member name="M:PMCLIB.Trace.TraceHelper.TraceXbotState(System.Int32,System.Double,PMCLIB.Trace.ITraceTrigger)">
            <summary>
            Traces the state of the XBot over a specified duration.
            </summary>
            <param name="XBotID">The ID of the XBot to trace.</param>
            <param name="TraceDuration">Duration of the trace in seconds.</param>
            <param name="StartTriggerEvent">Event that triggers the trace (e.g., SoftwareTrigger or MotionTrigger).</param>
            <returns>A SingleTrace object that manages the trace and provides access to the trace data.</returns>
            <exception cref="T:System.Exception">Throws an exception if it fails to create the trace.</exception>
        </member>
        <member name="M:PMCLIB.Trace.TraceHelper.TraceFlywayPowerConsumption(System.Int32,System.Double,PMCLIB.Trace.ITraceTrigger)">
            <summary>
            Traces Flyway power consumption over a specified duration.
            </summary>
            <param name="FlywayID">The ID of the Flyway to trace.</param>
            <param name="TraceDuration">Duration of the trace in seconds.</param>
            <param name="StartTriggerEvent">Event that triggers the trace (e.g., SoftwareTrigger or MotionTrigger).</param>
            <returns>A SingleTrace object that manages the trace and provides access to the trace data.</returns>
            <exception cref="T:System.Exception">Throws an exception if it fails to create the trace.</exception>
        </member>
        <member name="M:PMCLIB.Trace.TraceHelper.GenerateSoftwareTrigger(System.Int32)">
            <summary>
            Generates a software trigger for the specified XBot.
            </summary>
            <param name="XBotID">The ID of the XBot to trigger. Use 0 to trigger all XBots.</param>
            <returns>PMC return indicating whether command is successful.</returns>
        </member>
        <member name="M:PMCLIB.Trace.TraceHelper.StopAndDeallocateAllTraces">
            <summary>
            Stops and deallocate all traces
            </summary>
            <returns>PMC return indicating whether command is successful</returns>
        </member>
        <member name="T:PMCLIB.XBOTPreviewPos">
            <summary>
            XY position of the XBOT preview
            </summary>
        </member>
        <member name="M:PMCLIB.XBOTPreviewPos.#ctor(System.Int32,System.Double,System.Double)">
            <summary>
            xbot preview pos constructor with ability to specify values
            </summary>
            <param name="xbotID"></param>
            <param name="xPosMeters"></param>
            <param name="yPosMeters"></param>
        </member>
        <member name="M:PMCLIB.XBOTPreviewPos.#ctor">
            <summary>
            create all 0s preview pos
            </summary>
        </member>
        <member name="P:PMCLIB.XBOTPreviewPos.XbotID">
            <summary>
            xbot id
            </summary>
        </member>
        <member name="P:PMCLIB.XBOTPreviewPos.XPosMeters">
            <summary>
            x position, in meters
            </summary>
        </member>
        <member name="P:PMCLIB.XBOTPreviewPos.YPosMeters">
            <summary>
            y position, in meters
            </summary>
        </member>
        <member name="T:PMCLIB.UIMessenger">
            <summary>
            sends messages to gui
            </summary>
        </member>
        <member name="M:PMCLIB.UIMessenger.SendPreviewPosToUI(System.Collections.Generic.List{PMCLIB.XBOTPreviewPos})">
            <summary>
            Sends previews to a running GUI, can send up to 128 previews.
            </summary>
            <param name="previewList"></param>
        </member>
        <member name="M:PMCLIB.UIMessenger.ClearPreviewXBOTS">
            <summary>
            delete preview xbots
            </summary>
        </member>
        <member name="T:PmcUpdateLIB.UpdaterConnectionRtn">
            <summary>
            Status of connecting to a PMC
            </summary>
        </member>
        <member name="F:PmcUpdateLIB.UpdaterConnectionRtn.CONNECTED">
            <summary>
            Successfully connected to a PMC
            </summary>
        </member>
        <member name="F:PmcUpdateLIB.UpdaterConnectionRtn.MULTIPLE_CONNECTED">
            <summary>
            More than one PMC connected to this host
            </summary>
        </member>
        <member name="F:PmcUpdateLIB.UpdaterConnectionRtn.NO_MASTERSHIP">
            <summary>
            Cannot gain mastership of the connected PMC
            </summary>
        </member>
        <member name="F:PmcUpdateLIB.UpdaterConnectionRtn.NO_CONNECTION">
            <summary>
            No PMC updater availble to connect
            </summary>
        </member>
        <member name="F:PmcUpdateLIB.UpdaterConnectionRtn.CONNECTION_AVAILABLE">
            <summary>
            PMC updater avaiable to connect
            </summary>
        </member>
        <member name="F:PmcUpdateLIB.UpdaterConnectionRtn.TIMEOUT">
            <summary>
            Time out while attempting to connect a PMC
            </summary>
        </member>
        <member name="F:PmcUpdateLIB.UpdaterConnectionRtn.EXCEPTION">
            <summary>
            Other exceptions
            </summary>       
        </member>
        <member name="T:PmcUpdateLIB.PmcUpdateResult">
            <summary>
            Result of a PMC update cycle
            </summary>
        </member>
        <member name="F:PmcUpdateLIB.PmcUpdateResult.SUCCESSFUL">
            <summary>
            PMc update succesful
            </summary>
        </member>
        <member name="F:PmcUpdateLIB.PmcUpdateResult.FAILED">
            <summary>
            PMC update failed due to general error
            </summary>
        </member>
        <member name="F:PmcUpdateLIB.PmcUpdateResult.FAILED_CONNECTION_LOST">
            <summary>
            PMC update failed due to lost connection to the update server
            </summary>
        </member>
        <member name="F:PmcUpdateLIB.PmcUpdateResult.FAILED_CONNECTION_DEAD">
            <summary>
            PMC update failed due to dead connection to the update server
            </summary>
        </member>
        <member name="F:PmcUpdateLIB.PmcUpdateResult.FAILED_POWERCYCLE_REQUIRED">
            <summary>
            PMC update failed and power cycle of PMC is required to solve the issue
            </summary>
        </member>
        <member name="F:PmcUpdateLIB.PmcUpdateResult.FAILED_EXCEPTION">
            <summary>
            PMC update failed due to exceptions
            </summary>
        </member>
        <member name="F:PmcUpdateLIB.PmcUpdateResult.CANCELLED">
            <summary>
            PMC update was cancelled in updating process
            </summary>
        </member>
        <member name="T:PmcUpdateLIB.PmcUpdater">
            <summary>
            The class for updating a PMC
            </summary>
        </member>
        <member name="M:PmcUpdateLIB.PmcUpdater.#ctor">
            <summary>
            The constructor
            </summary>
        </member>
        <member name="M:PmcUpdateLIB.PmcUpdater.ScanAllPmcUpdaters(System.Collections.Generic.List{System.Net.IPEndPoint}@)">
            <summary>
            Scan all PMC updaters on the same network of the host
            </summary>
            <param name="pmcUpdateList"> output: a list of found PMC updater endpoints</param>
            <returns></returns>
        </member>
        <member name="M:PmcUpdateLIB.PmcUpdater.AutoSearchAndConnectToPmcUpdater">
            <summary>
            Scan PMC updaters on the network and attempt to connect to the 1st one it found. 
            Successful connection is not guaranteed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:PmcUpdateLIB.PmcUpdater.ConnectToSpecificPmcUpdater(System.String)">
            <summary>
            Attempt to connect to a specific PMC updater if it's currently not connected
            </summary>
            <param name="ipAddr"> IP address of PMC updater to connect</param>
            <returns></returns>
        </member>
        <member name="M:PmcUpdateLIB.PmcUpdater.UpdatePmcToEnd(System.String,System.String@)">
             <summary>
             After connecting to the TCP server, start PMC update and return when update is completed. 
             </summary>
             <param name="pmiuPackagePath"> Path of the update package (.pmiu) file</param>
             <param name="updateDetailedResult">Details of PMC update result</param>
             <returns>Result of PMC update</returns>
            
        </member>
        <member name="M:PmcUpdateLIB.PmcUpdater.UpdatePmcWholeProcedure(System.String,System.String@)">
            <summary>
            Start the whole PMC update procedure from the start to the end. It may take long time (up to 5 minutes) for this method to return.
            </summary>
            <param name="pmiuPackagePath">Path of the update package (.pmiu) file</param>
            <param name="detailedResult">A string of detailed result of PMC update which can be used for debugging, UI etc.</param>
            <returns>Result of PMC update</returns>
        </member>
        <member name="M:PmcUpdateLIB.PmcUpdater.GetUpdateProgress">
            <summary>
            To know at which step the update is. It should be called periodically, for example, in a timer event
            </summary>
            <returns>string of update progress</returns>
        </member>
        <member name="M:PmcUpdateLIB.PmcUpdater.DiconnectUpdater">
            <summary>
            Disconnect the tcp connection to the connected update server
            </summary>
        </member>
        <member name="M:PmcUpdateLIB.PmcUpdater.StartRestoringToPrevious">
            <summary>
            Trigger restoring to the previous package (not released)
            </summary>
        </member>
        <member name="M:PmcUpdateLIB.PmcUpdater.StartRestoringToSelectedPackage(System.String)">
            <summary>
            Never implemented resotring to a specific package
            </summary>
            <param name="packagePath"></param>
        </member>
        <member name="M:PmcUpdateLIB.PmcUpdater.StartRestoringToFactory">
            <summary>
            Trigger restoring to the factory package (not released)
            </summary>
        </member>
        <member name="M:PmcUpdateLIB.PmcUpdater.ConnectToSpecificUpdateServerMultiTryWithTimeout(System.String,System.Boolean,System.Boolean)">
            <summary>
            This will force a busy box until the update server is connected, it uses the built in timeout for
            ConnectToUpdateServerAsync thus it will exit before timeout if connected, exit after timeout if 
            not connected
            </summary>
            <returns>Return true if ether connected or no need to reconnect, return false if no connection and reconnect fails</returns>
        </member>
        <member name="M:PmcUpdateLIB.TcpUdpClient.ScanPmcByUdpBroadcastWithMaximumTries(System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Go through all host's network adapter to scan all pmc update servers using UDP broadcast starting from a default port
            </summary>
            <param name="maxTries">how many times to loop through all ports</param>
            <param name="searchDepth">how many ports to try starting from the default port</param>
            <param name="stopIfFoundOne">whether to stop scanning if found one server</param>
            <param name="connectTcp">whether to connect it after being found</param>        
            <returns>a list of server endpoints scanned on the netweork</returns>
        </member>
        <member name="M:PmcUpdateLIB.TcpUdpClient.udpBroadcastFromSinglePortAllAdpaters(System.String,System.Boolean,System.Boolean)">
            <summary>
            Loop through all host's network adapter to UDP broadcast from a single port
            </summary>
            <param name="ClientMessage">the boradcast message that update server is polling</param>
            <param name="stopIfFoundOne">whether to stop searching if one is found</param>
            <param name="connectTcp">whether to connect it after being found</param>        
            <returns>a list of found update server endpoints</returns>
        </member>
        <member name="M:PmcUpdateLIB.TcpUdpClient.GetPortAndConnectToTCP(System.String)">
            <summary>
            Get an available port of the targer update server and try to TCP connect to it
            </summary>
            <param name="updateServerIp">the target update server to be connected</param>
            <returns>true: connected; false: conenction failed</returns>
        </member>
        <member name="M:PmcUpdateLIB.TcpUdpClient.GetTcpClientPort(System.Net.IPEndPoint,System.Int32)">
            <summary>
            check if a certain port is available on the target update server
            </summary>
            <param name="updaterServerEp">target update server</param>
            <param name="port">the port trying to connect to</param>
            <returns></returns>
        </member>
        <member name="M:PmcUpdateLIB.TcpUdpClient.PingUpdateServer">
            <summary>
            OBSOLETE: This function will refresh the status of GetIsConnected
            </summary>
        </member>
        <member name="M:PmcUpdateLIB.TcpUdpClient.IsUpdateServerTcpConnected">
            <summary>
            works for server is killed, cable unplugged, but NOT power loss??
            </summary>
            <returns></returns>
        </member>
        <member name="M:PmcUpdateLIB.TcpUdpClient.SendMessageThroughTcpWithTimeout(System.String,System.Int32)">
            <summary>
            Running this function will refresh the status of wheather TcpClient is connected
            </summary>
            <param name="message"></param>
            <param name="readWriteTimeoutInMilliseconds"></param>
            <returns></returns>
        </member>
        <member name="M:PmcUpdateLIB.TcpUdpClient.ReadWriteStringToTcpServer(System.Net.Sockets.TcpClient,System.Net.Sockets.NetworkStream,System.String)">
            <summary>
            Send a message to from TcpClient to TcpServer
            </summary>
            <param name="client">TcpClient instance</param>
            <param name="nwStream"></param>
            <param name="message">The message you want to send</param>
            <returns>The respond from TcpServer</returns>
        </member>
        <member name="M:PmcUpdateLIB.TcpUdpClient.SendFileThroughTcp(System.String,System.String)">
            <summary>
            WORK IN PROGRESS This function is the only function that returns local messages
            reason being it compares the return value of md5, number of packets, and fileName.
            Probably not neccessary to check them here?
            </summary>
            <param name="cmdName">pass in the command you want the remote process to run, should in sync with the server update file command</param>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:PmcUpdateLIB.TcpUdpClient.GetServerCanBePing">
            <summary>
            Check if server is physically connected/powered on, the timeout for this function is 1 seconds
            </summary>
            <returns></returns>
        </member>
        <member name="T:PmcUpdateLIB.MyUdpClient">
            <summary>
            copied from https://stackoverflow.com/questions/1096142/broadcasting-udp-message-to-all-the-available-network-cards
            </summary>
        </member>
        <member name="T:PmcUpdateLIB.UserResponse">
            <summary>
            User's response to an interactive event
            </summary>
        </member>
        <member name="F:PmcUpdateLIB.UserResponse.YES">
            <summary>
            yes/ok
            </summary>
        </member>
        <member name="F:PmcUpdateLIB.UserResponse.NO">
            <summary>
            no/cancel
            </summary>
        </member>
        <member name="T:PmcUpdateLIB.InteractiveEventArgs">
            <summary>
             the event arguement of an event that requires user input
            </summary>
        </member>
        <member name="P:PmcUpdateLIB.InteractiveEventArgs.Message">
            <summary>
            Message from the event
            </summary>
        </member>
        <member name="P:PmcUpdateLIB.InteractiveEventArgs.Response">
            <summary>
            reponse from users
            </summary>
        </member>
        <member name="T:PmcUpdateLIB.UINotifier">
            <summary>
            This class is for handling events from the cycle of PMC update, for example, errors, information, warning.
            If building an UI, choose your UI and subscribe to events in this class so event argument are shown on the UI.
            </summary>
        </member>
        <member name="E:PmcUpdateLIB.UINotifier.EventRaisedForErrors">
            <summary>
            event for errors from the PMC update
            </summary>
        </member>
        <member name="E:PmcUpdateLIB.UINotifier.EventRaisedForInformation">
            <summary>
            event for information from the PMC update
            </summary>
        </member>
        <member name="E:PmcUpdateLIB.UINotifier.EventRaisedForWarning">
            <summary>
            event for warnings from the PMC update. You can give a response (yes/no)
            </summary>
        </member>
        <member name="E:PmcUpdateLIB.UINotifier.EventRaisedForInteractiveMessage">
            <summary>
            event for choices from the PMC update. You can give a response (yes/no)
            </summary>
        </member>
        <member name="E:PmcUpdateLIB.UINotifier.EventRaisedForPowerCycleRequired">
            <summary>
            event for requiring power cycle to finish the PMC update
            </summary>
        </member>
    </members>
</doc>
